---
title: "備忘録"
about:
  template: jolla
format: 
    dashboard:
        include-in-header: 
            - ../include/mathjax_read.html
---


## row {.tabset}

### Glossary

:::: {.no-border-top-table #DictTable}

<input type="text" id="searchInput" placeholder="Search... (regex, space-separated AND)" style="width: 50%;">


```{python}
# | echo: false
#| tbl-colwidths: [15,10,80]
import pandas as pd
from itables import show, options, init_notebook_mode, JavascriptFunction
from keyword_dict import CONFIG, KeywordField
from IPython.display import HTML, display, Markdown



# fetch colnames
cols = list(KeywordField.model_json_schema()["properties"].keys())

# define dictionary df
df = (
    pd.DataFrame.from_dict(CONFIG.keywords, orient="index", columns=cols)
    .map(lambda x: x[1] if x else None)
    .iloc[:, :-1]
)

display(Markdown(df.to_markdown(index = True)))
```

<script>
// Debounce function to limit how often search is performed
function debounce(func, wait) {
  let timeout;
  return function(...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
}

document.getElementById('searchInput').addEventListener('keyup', debounce(function() {
  let filter = this.value.trim();
  let regexes = [];

  // Split search terms by space and create regex for each
  if (filter) {
    const terms = filter.split(/\s+/);
    regexes = terms.map(term => {
      try {
        return new RegExp(term, 'i');
      } catch (e) {
        console.warn(`Invalid regex: ${term}`);
        return null;
      }
    }).filter(regex => regex !== null);
  }

  const rows = document.querySelectorAll('#DictTable tbody tr');
  rows.forEach(row => {
    const rowText = row.textContent;
    const matchesAll = regexes.length === 0 || regexes.every(regex => regex.test(rowText));
    row.style.display = matchesAll ? '' : 'none';
  });
}, 300)); // Wait 300ms after last keypress before searching
</script>

::::

### Unit of Measurement

:::: {.no-border-top-table #UnitTable}

<input type="text" id="searchInput" placeholder="Search... (regex, space-separated AND)" style="width: 50%;">


```{python}
# | echo: false
#| tbl-colwidths: [10,10,10,10,60]
import pandas as pd
from itables import show, options, init_notebook_mode, JavascriptFunction
from keyword_dict import UNIT_OF_MEASUREMENT_CONFIG, UnitofMeasurementField
from IPython.display import HTML, display, Markdown

# fetch colnames
cols = list(UnitofMeasurementField.model_json_schema()["properties"].keys())

# define dictionary df
df_si = (
    pd.DataFrame(UNIT_OF_MEASUREMENT_CONFIG.unit_of_measurement, columns=cols)
    .map(lambda x: x[1] if x else None)
)

display(Markdown(df_si.to_markdown(index = False)))
```

<script>
// Debounce function to limit how often search is performed
function debounce(func, wait) {
  let timeout;
  return function(...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
}

document.getElementById('searchInput').addEventListener('keyup', debounce(function() {
  let filter = this.value.trim();
  let regexes = [];

  // Split search terms by space and create regex for each
  if (filter) {
    const terms = filter.split(/\s+/);
    regexes = terms.map(term => {
      try {
        return new RegExp(term, 'i');
      } catch (e) {
        console.warn(`Invalid regex: ${term}`);
        return null;
      }
    }).filter(regex => regex !== null);
  }

  const rows = document.querySelectorAll('#UnitTable tbody tr');
  rows.forEach(row => {
    const rowText = row.textContent;
    const matchesAll = regexes.length === 0 || regexes.every(regex => regex.test(rowText));
    row.style.display = matchesAll ? '' : 'none';
  });
}, 300)); // Wait 300ms after last keypress before searching
</script>

::::


### 便利コマンド

:::: {.no-border-top-table #CommandTable}

<input type="text" id="searchInputCommand" placeholder="Search... (regex, space-separated AND)" style="width: 50%;">

```{python}
# | echo: false
#| tbl-colwidths: [30,6, 34, 30]
from keyword_dict import COMMAND_CONFIG, CommandField

# fetch colnames
cols = list(CommandField.model_json_schema()["properties"].keys())

# define dictionary df
df_command = (
    pd.DataFrame(COMMAND_CONFIG.command_list, columns=cols)
    .map(lambda x: x[1] if x else None)
)

display(Markdown(df_command.to_markdown(index = False)))
```

<script>
// Reuse the same debounce function
document.getElementById('searchInputCommand').addEventListener('keyup', debounce(function() {
  let filter = this.value.trim();
  let regexes = [];

  // Split search terms by space and create regex for each
  if (filter) {
    const terms = filter.split(/\s+/);
    regexes = terms.map(term => {
      try {
        return new RegExp(term, 'i');
      } catch (e) {
        console.warn(`Invalid regex: ${term}`);
        return null;
      }
    }).filter(regex => regex !== null);
  }

  const rows = document.querySelectorAll('#CommandTable tbody tr');
  rows.forEach(row => {
    const rowText = row.textContent;
    const matchesAll = regexes.length === 0 || regexes.every(regex => regex.test(rowText));
    row.style.display = matchesAll ? '' : 'none';
  });
}, 300)); // Wait 300ms after last keypress before searching
</script>

::::

### Ubuntu Tool

:::: {.no-border-top-table #CommandTable}

<input type="text" id="searchInputGnomeTool" placeholder="Search... (regex, space-separated AND)" style="width: 50%;">

```{python}
# | echo: false
#| tbl-colwidths: [10,10, 60, 20]
from keyword_dict import GNOME_TOOL_CONFIG, GnomeToolField

# fetch colnames
cols = list(GnomeToolField.model_json_schema()["properties"].keys())

# define dictionary df
df_command = (
    pd.DataFrame(GNOME_TOOL_CONFIG.tool_list, columns=cols)
    .map(lambda x: x[1] if x else None)
)

display(Markdown(df_command.to_markdown(index = False)))
```

<script>
// Reuse the same debounce function
document.getElementById('searchInputGnomeTool').addEventListener('keyup', debounce(function() {
  let filter = this.value.trim();
  let regexes = [];

  // Split search terms by space and create regex for each
  if (filter) {
    const terms = filter.split(/\s+/);
    regexes = terms.map(term => {
      try {
        return new RegExp(term, 'i');
      } catch (e) {
        console.warn(`Invalid regex: ${term}`);
        return null;
      }
    }).filter(regex => regex !== null);
  }

  const rows = document.querySelectorAll('#CommandTable tbody tr');
  rows.forEach(row => {
    const rowText = row.textContent;
    const matchesAll = regexes.length === 0 || regexes.every(regex => regex.test(rowText));
    row.style.display = matchesAll ? '' : 'none';
  });
}, 300)); // Wait 300ms after last keypress before searching
</script>

::::

### Ubuntu Directory

:::: {.no-border-top-table #UbuntuDirectory}

<input type="text" id="searchInputUbuntuDirectory" placeholder="Search... (regex, space-separated AND)" style="width: 50%;">

```{python}
# | echo: false
#| tbl-colwidths: [10,90]
from keyword_dict import UBUNTU_DIRECTORY_CONFIG, UbuntuDirectoryField

# fetch colnames
cols = list(UbuntuDirectoryField.model_json_schema()["properties"].keys())

# define dictionary df
df_command = (
    pd.DataFrame(UBUNTU_DIRECTORY_CONFIG.UbuntuDirectory, columns=cols)
    .map(lambda x: x[1] if x else None)
)

display(Markdown(df_command.to_markdown(index = False)))
```

<script>
// Reuse the same debounce function
document.getElementById('searchInputUbuntuDirectory').addEventListener('keyup', debounce(function() {
  let filter = this.value.trim();
  let regexes = [];

  // Split search terms by space and create regex for each
  if (filter) {
    const terms = filter.split(/\s+/);
    regexes = terms.map(term => {
      try {
        return new RegExp(term, 'i');
      } catch (e) {
        console.warn(`Invalid regex: ${term}`);
        return null;
      }
    }).filter(regex => regex !== null);
  }

  const rows = document.querySelectorAll('#UbuntuDirectory tbody tr');
  rows.forEach(row => {
    const rowText = row.textContent;
    const matchesAll = regexes.length === 0 || regexes.every(regex => regex.test(rowText));
    row.style.display = matchesAll ? '' : 'none';
  });
}, 300)); // Wait 300ms after last keypress before searching
</script>

::::



### ギリシャ文字

:::: {.no-border-top-table #GreekLetterTable}

<input type="text" id="searchInputGreekLetter" placeholder="Search... (regex, space-separated AND)" style="width: 50%;">

```{python}
# | echo: false
#| tbl-colwidths: [20,20,20,20,20]
from keyword_dict import GREEK_LETTER_CONFIG, GreekLetterField

# fetch colnames
cols = list(GreekLetterField.model_json_schema()["properties"].keys())

# define dictionary df
df_command = (
    pd.DataFrame(GREEK_LETTER_CONFIG.GreekLetter, columns=cols)
    .map(lambda x: x[1] if x else None)
)

display(Markdown(df_command.to_markdown(index = False)))
```

<script>
// Reuse the same debounce function
document.getElementById('searchInputGreekLetter').addEventListener('keyup', debounce(function() {
  let filter = this.value.trim();
  let regexes = [];

  // Split search terms by space and create regex for each
  if (filter) {
    const terms = filter.split(/\s+/);
    regexes = terms.map(term => {
      try {
        return new RegExp(term, 'i');
      } catch (e) {
        console.warn(`Invalid regex: ${term}`);
        return null;
      }
    }).filter(regex => regex !== null);
  }

  const rows = document.querySelectorAll('#GreekLetterTable tbody tr');
  rows.forEach(row => {
    const rowText = row.textContent;
    const matchesAll = regexes.length === 0 || regexes.every(regex => regex.test(rowText));
    row.style.display = matchesAll ? '' : 'none';
  });
}, 300)); // Wait 300ms after last keypress before searching
</script>

::::
