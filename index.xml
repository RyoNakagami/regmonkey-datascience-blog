<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>regmonkey datascience blog</title>
<link>https://ryonakagami.github.io/regmonkey-datascience-blog/</link>
<atom:link href="https://ryonakagami.github.io/regmonkey-datascience-blog/index.xml" rel="self" type="application/rss+xml"/>
<description>日々の徒然勉強日記</description>
<generator>quarto-1.8.24</generator>
<lastBuildDate>Fri, 26 Sep 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>ネットワークトラブルの切り分け</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-26-network-connection-trouble/</link>
  <description><![CDATA[ 






<section id="トラブル" class="level2">
<h2 class="anchored" data-anchor-id="トラブル">⚠️ トラブル</h2>
<ul>
<li>Ubuntu 24.04 LTSにて，S3 storage <code>s3.amazonaws.com</code> にある日突然接続できなくなった</li>
</ul>
</section>
<section id="トラブルシューティングフローチャート" class="level2">
<h2 class="anchored" data-anchor-id="トラブルシューティングフローチャート">🔍 トラブルシューティングフローチャート</h2>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">---
config:
  layout: elk
---
flowchart LR
    A["ネットワークに問題発生"] --&gt; B["ping ホスト名を実行"]
    B --&gt; C{"応答あり？"}
    C -- YES --&gt; D["名前解決 &amp;amp; 通信OK"]
    C -- NO --&gt; E["ping IPアドレスを実行"]
    E --&gt; F{"応答あり？"}
    F -- YES --&gt; G["名前解決の問題&lt;br&gt;DNS設定確認"]
    F -- NO --&gt; H["ネットワーク未接続&lt;br&gt;ケーブル/ルータ確認"]

    %% フォントサイズをノードごとに指定
    style A font-size:1.2em
    style B font-size:1.2em
    style C font-size:1.2em
    style D font-size:1.2em
    style E font-size:1.2em
    style F font-size:1.2em
    style G font-size:1.2em
    style H font-size:1.1em
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>今回のトラブルでは，掃除のタイミングでケーブルを抜いており，物理的にケーブルが刺さっていませんでした．．．</p>
<section id="pingコマンド" class="level3">
<h3 class="anchored" data-anchor-id="pingコマンド">pingコマンド</h3>
<div id="def-" class="custom_problem blog-custom-border theorem definition">
<p><span class="theorem-title"><strong>Definition 1</strong></span> <span class="def-title">pingコマンド</span></p>
<ul>
<li>pingコマンドは指定したホストとの間でネットワークが疎通しているかどうかを調べるコマンド</li>
<li><code>ping ホスト名</code>を実行すると，サイズの小さなパケットを相手に送信して，その応答を調べる</li>
<li><code>ping6</code> は <code>/usr/bin/ping6 -&gt; ping*</code> とシンボリックリンクになっている</li>
</ul>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ping</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">option</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> destination</span></code></pre></div></div>
</div>
<p><code>ping</code>コマンドは相手のコンピューターに対してICMPメッセージ(ネットワーク層のプロトコル)を送信し，その応答で通信状況を判断します．以下の例ではグローバルIPアドレスに対してですが， プライベートIPアドレスに対して送信することも可能です．</p>
<div id="fig-plot-ping" class="center quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-plot-ping-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">sequenceDiagram
    participant PC as ユーザー端末
    participant Router as ルーター
    participant Target as 宛先サーバー (例: google.com)

    %% ICMP Echo Request
    PC -&gt;&gt; Router: ICMP Echo Request
    Router -&gt;&gt; Target: ICMP Echo Request

    %% ICMP Echo Reply
    Target --&gt;&gt; Router: ICMP Echo Reply
    Router --&gt;&gt; PC: ICMP Echo Reply

    %% Note
    Note over PC,Target: PCは応答を受け取ってRTT（Round-Trip Time，往復時間）を計測
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-plot-ping-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1
</figcaption>
</figure>
</div>
<div id="exm-" class="custom_problem theorem example">
<p><span class="theorem-title"><strong>Example 1</strong></span> <strong>ping出力</strong> <br></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> ping 8.8.8.8 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> 3</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PING</span> 8.8.8.8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(8.8.8.8)</span> 56<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(84)</span> bytes of data.</span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">64</span> bytes from 8.8.8.8: icmp_seq=1 ttl=117 time=7.46 ms</span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">64</span> bytes from 8.8.8.8: icmp_seq=2 ttl=117 time=17.9 ms</span>
<span id="cb2-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">64</span> bytes from 8.8.8.8: icmp_seq=3 ttl=117 time=14.1 ms</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">---</span> 8.8.8.8 ping statistics <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb2-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">3</span> packets transmitted, 3 received, 0% packet loss, time 2003ms</span>
<span id="cb2-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">rtt</span> min/avg/max/mdev <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> 7.463/13.149/17.850/4.297 ms</span></code></pre></div></div>
<ul>
<li><code>8.8.8.8</code>: Google Public DNS</li>
<li><code>ttl</code>: time to live, パケットがネットワーク上を通過できる最大ホップ数を指定する値</li>
</ul>
</div>
<hr>
<p><span class="mini-section">Options</span></p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 30%">
<col style="width: 70%">
</colgroup>
<thead>
<tr class="header">
<th>オプション</th>
<th>意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>-4</code></td>
<td>IPv4を使用する（pingコマンドのデフォルト）</td>
</tr>
<tr class="even">
<td><code>-6</code></td>
<td>IPv6を使用する（ping6コマンドのデフォルト）</td>
</tr>
<tr class="odd">
<td><code>-c 回数</code></td>
<td>パケットを送る回数</td>
</tr>
<tr class="even">
<td><code>-i 秒数</code></td>
<td>個々の送信の後に待つ秒数（デフォルトは1秒）</td>
</tr>
<tr class="odd">
<td><code>-w 秒数</code></td>
<td>状況を問わず、pingコマンドの実行を指定した秒数で終了</td>
</tr>
<tr class="even">
<td><code>-n</code></td>
<td>数値出力のみを行う（IPアドレスからホスト名を検索しない）</td>
</tr>
<tr class="odd">
<td><code>-q</code></td>
<td>開始と終了時の要約のみで他は表示しない（quiet）</td>
</tr>
<tr class="even">
<td><code>-v</code></td>
<td>詳細な出力を行う（verbose）</td>
</tr>
<tr class="odd">
<td><code>-p パターン</code></td>
<td>送出するパケットを埋める値をパターンで指定（例: <code>-p ff</code> で全て 1 で埋めたパケット）</td>
</tr>
<tr class="even">
<td><code>-s サイズ</code></td>
<td>送出するパケットのサイズを指定（デフォルト 56バイト＋ICMPヘッダ8バイト＝合計64バイト）</td>
</tr>
<tr class="odd">
<td><code>-R</code></td>
<td>経路を記録する</td>
</tr>
<tr class="even">
<td><code>-r</code></td>
<td>通常のルーティングを無視して接続する</td>
</tr>
<tr class="odd">
<td><code>-I インタフェース</code></td>
<td>指定したインタフェースからマルチキャストパケットを送る</td>
</tr>
<tr class="even">
<td><code>-L</code></td>
<td>マルチキャストパケットのループバックを抑制する</td>
</tr>
<tr class="odd">
<td><code>-t TTL値</code></td>
<td>Time To Liveを設定する</td>
</tr>
</tbody>
</table>
</div>
<div class="reveal_vspace" style="--vspace-height: 1em;"></div>
<p><span class="mini-section">pingコマンドを用いた問題の切り分け</span></p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 15%">
<col style="width: 45%">
</colgroup>
<thead>
<tr class="header">
<th>テスト内容</th>
<th>コマンド例</th>
<th>結果</th>
<th>考えられる原因 / 対策</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>IPv4 外部接続</td>
<td><code>ping 8.8.8.8</code></td>
<td>✅ 応答あり</td>
<td>IPv4経路は正常</td>
</tr>
<tr class="even">
<td>IPv4 外部接続</td>
<td><code>ping 8.8.8.8</code></td>
<td>❌ 応答なし</td>
<td>IPv4経路問題（ルーティング・ファイアウォール等）</td>
</tr>
<tr class="odd">
<td>IPv6 外部接続</td>
<td><code>ping -6 2001:4860:4860::8888</code></td>
<td>✅ 応答あり</td>
<td>IPv6経路は正常</td>
</tr>
<tr class="even">
<td>IPv6 外部接続</td>
<td><code>ping -6 2001:4860:4860::8888</code></td>
<td>❌ 応答なし</td>
<td>IPv6経路問題（ルーティング・ICMPv6制限・ISP未対応）</td>
</tr>
<tr class="odd">
<td>特定インターフェース経由</td>
<td><code>ping -I eno1 8.8.8.8</code></td>
<td>✅ / ❌</td>
<td>インターフェース選択による疎通確認、VPN/物理NIC切替の検証</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="ネットワークインターフェース一覧の確認" class="level3">
<h3 class="anchored" data-anchor-id="ネットワークインターフェース一覧の確認">ネットワークインターフェース一覧の確認</h3>
<p>インターフェース一覧のみを出力する場合は</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip</span> link show</span></code></pre></div></div>
<p>を実行します．実行結果例として</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 ...</span></span>
<span id="cb4-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">2: eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 ...</span></span>
<span id="cb4-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 ...</span></span>
<span id="cb4-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">4: tailscale0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 ...</span></span></code></pre></div></div>
<p>または</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> ls /sys/class/net/</span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker0@</span>  eno1@  lo@  tailscale0@</span></code></pre></div></div>
<p>でも確認することができます．</p>
<div id="exm-" class="custom_problem theorem example">
<p><span class="theorem-title"><strong>Example 2</strong></span> <strong>ネットワークインターフェース例</strong> <br></p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 22%">
<col style="width: 20%">
<col style="width: 57%">
</colgroup>
<thead>
<tr class="header">
<th>インターフェース名</th>
<th>種類</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>lo</code></td>
<td>ループバック</td>
<td>ローカル内部通信専用．自分自身との通信に使用される（<code>127.0.0.1 / ::1</code>）．</td>
</tr>
<tr class="even">
<td><code>eno1</code></td>
<td>有線LAN（Ethernet）</td>
<td>物理 NIC．Onboard NIC．マザーボード直付けのポート 1</td>
</tr>
<tr class="odd">
<td><code>enp6s0</code></td>
<td>有線LAN（Ethernet）</td>
<td>物理 NIC．複数NIC構成の場合の追加ポート．</td>
</tr>
<tr class="even">
<td><code>wlp13s0</code></td>
<td>無線LAN（Wi-Fi）</td>
<td>Wi-Fi接続用の物理 NIC．無線ネットワークに接続される．</td>
</tr>
<tr class="odd">
<td><code>docker0</code></td>
<td>仮想ブリッジ</td>
<td>Docker が作成する仮想ネットワーク．コンテナ間通信やホスト通信に使用．</td>
</tr>
<tr class="even">
<td><code>br-xxxxxxxxxxx</code></td>
<td>仮想ブリッジ</td>
<td>Docker などが作成するカスタムブリッジ．コンテナ専用ネットワーク用．</td>
</tr>
<tr class="odd">
<td><code>tailscale0</code></td>
<td>VPN仮想NIC</td>
<td>Tailscale VPN用の仮想インターフェース．VPN経由の通信に使用．</td>
</tr>
</tbody>
</table>
</div>
<p>基本的には</p>
<ul>
<li><code>wl</code>から始まる: ワイヤレス</li>
<li><code>en</code>から始まる: 有線LAN</li>
</ul>
<p>という命名規則になっています．また<code>p6</code>や<code>s0</code>といった数値はPCIバス番号とスロット番号に対応しています</p>
<div class="no-border-top-table">
<table class="caption-top table">
<thead>
<tr class="header">
<th>部分</th>
<th>意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>wl</code></td>
<td>ワイヤレス（Wireless LAN）デバイス</td>
</tr>
<tr class="even">
<td><code>p13</code></td>
<td>PCI バス番号（このデバイスが接続されているバスの位置）</td>
</tr>
<tr class="odd">
<td><code>s0</code></td>
<td>スロット番号（同じバス内でのスロット位置）</td>
</tr>
</tbody>
</table>
</div>
</div>
<hr>
</section>
</section>
<section id="appendix-icmp" class="level2">
<h2 class="anchored" data-anchor-id="appendix-icmp">Appendix: ICMP</h2>
<p>IPはUDP(トランスポート層プロトコル)と同じコネクションレス型の通信を行うため，データが相手に届いたかどうかについては感知しません． IPデータグラムの通信状況を確認するためのネットワーク層プロトコルとして，ICMP(Internet Control Message Protocol)という仕組みが考案されました．</p>
<p>主に<code>ping</code>コマンドや<code>traceroute</code>コマンドで使用されます．</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>ICMPはあくまでIPの補助
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>ICMPメッセージは単独で送られることはなく，IPのヘッダが付与されて送られる</li>
<li>あくまでも「IPを助けるプロトコル」</li>
<li>IPデータグラムは，IPヘッダがついたデータ（トランスポート層でのセグメントに対応）のこと．</li>
</ul>
</div>
</div>
<p><span class="mini-section">ICMPヘッダ</span></p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">block-beta
  columns 3
  A["&lt;strong&gt;タイプ(8bit)&lt;/strong&gt;&lt;br&gt;メッセージの種類を表す"]:1
  B["&lt;strong&gt;コード(8bit)&lt;/strong&gt;&lt;br&gt;エラー原因などを示す"]:1
  C["&lt;strong&gt;チェックサム(16 bit)&lt;/strong&gt;&lt;br&gt;データが無事かどうかを確認"]:2
  
  style A fill:#fff,stroke:#000,stroke-width:2px,font-size:1.5em
  style B fill:#fff,stroke:#000,stroke-width:2px,font-size:1.5em
  style C fill:#fff,stroke:#000,stroke-width:2px,font-size:1.5em
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p><span class="mini-section">主なタイプ一覧</span></p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 15%">
<col style="width: 15%">
<col style="width: 25%">
<col style="width: 45%">
</colgroup>
<thead>
<tr class="header">
<th>ICMP Type</th>
<th>NICMPv6 Type</th>
<th>種類</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>129</td>
<td>Echo Reply</td>
<td>メッセージが無事に届きました</td>
</tr>
<tr class="even">
<td>3</td>
<td>1</td>
<td>Destination Unreachable</td>
<td>宛先に到達できませんでした</td>
</tr>
<tr class="odd">
<td>5</td>
<td>137</td>
<td>Redirect</td>
<td>ルーティング経路の変更通知</td>
</tr>
<tr class="even">
<td>8</td>
<td>128</td>
<td>Echo Request</td>
<td>このメッセージが届いたら，返事をください</td>
</tr>
<tr class="odd">
<td>11</td>
<td>3</td>
<td>Time Exceeded</td>
<td>TTLやフラグメント再構築時間超過</td>
</tr>
</tbody>
</table>
</div>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">sequenceDiagram
    participant PC as 自端末 (Type 8)
    participant Router as ルーター
    participant Target as 宛先ホスト (Type 0)

    %% ICMP Echo Request
    PC -&gt;&gt; Router: ICMP Echo Request (Type 8)
    Router -&gt;&gt; Target: ICMP Echo Request (Type 8)

    %% ICMP Echo Reply
    Target --&gt;&gt; Router: ICMP Echo Reply (Type 0)
    Router --&gt;&gt; PC: ICMP Echo Reply (Type 0)

</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</section>
<section id="appendix-pppoe方式" class="level2">
<h2 class="anchored" data-anchor-id="appendix-pppoe方式">Appendix: PPPoE方式</h2>
<p>IPv4ではPPPoE接続方式が使用されています．一方，IPv6ではPPPoE接続方式に加えて，IPoE方式が利用できます．ここでは従来のPPPoE方式を解説します．</p>
<div id="def-" class="custom_problem blog-custom-border theorem definition">
<p><span class="theorem-title"><strong>Definition 2</strong></span> <span class="def-title">Point-to-Point Protocol(PPP)</span></p>
<ul>
<li>2点間で1対1の通信を行ためのデータリンク層プロトコル</li>
<li>データをPPPフレームにカプセル化して伝送</li>
<li>1対1の通信なのでMACアドレスは基本的には使わない</li>
</ul>
</div>
<div id="fig-plot" class="center quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-plot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">sequenceDiagram
    participant A as Computer A
    participant B as Computer B

    A -&gt;&gt; B: 通信をしたいときは，&lt;br&gt;通信要求を相手に送信
    B -&gt;&gt; A: 接続する資格を持ったユーザーか確認&lt;br&gt;(ユーザー認証)
    B -&gt;&gt; A: 通信条件について，相談
    B -&gt;&gt; A: 通信を開始

    %% 接続
    Note over A,B: 接続が確立した状態
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-plot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2
</figcaption>
</figure>
</div>
<p><span class="mini-section">PPPフレーム</span></p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">block-beta
  columns 2
  A["&lt;strong&gt;開始符号(8bit)&lt;/strong&gt;&lt;br&gt;01111110が入る"]:1
  B["&lt;strong&gt;アドレス(8bit)&lt;/strong&gt;&lt;br&gt;固定値(11111111)が入る"]:1
  C["&lt;strong&gt;制御部(8 bit)&lt;/strong&gt;&lt;br&gt;伝送を制御するための情報"]:1
  D["&lt;strong&gt;プロトコル部(8 bit)&lt;/strong&gt;&lt;br&gt;上位層のプロトコルを指定"]:1
  E["&lt;strong&gt;データ&lt;/strong&gt;&lt;br&gt;カプセル化されたIPヘッダ/TCPヘッダ/アプリケーションヘッダ/データが入る"]:2
  F["&lt;strong&gt;FCS(Frane Check Sequence) (32bit)&lt;/strong&gt;&lt;br&gt;フレームが壊れていないかどうかを調べる値"]:2
  G["&lt;strong&gt;終了符号(8bit)&lt;/strong&gt;&lt;br&gt;01111110が入る"]:2

  style A fill:#fff,stroke:#000,stroke-width:2px,font-size:1.5em
  style B fill:#fff,stroke:#000,stroke-width:2px,font-size:1.5em
  style C fill:#fff,stroke:#000,stroke-width:2px,font-size:1.5em
  style D fill:#fff,stroke:#000,stroke-width:2px,font-size:1.5em
  style E fill:#fff,stroke:#000,stroke-width:2px,font-size:1.5em
  style F fill:#fff,stroke:#000,stroke-width:2px,font-size:1.5em
  style G fill:#fff,stroke:#000,stroke-width:2px,font-size:1.5em
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<div id="def-" class="custom_problem blog-custom-border theorem definition">
<p><span class="theorem-title"><strong>Definition 3</strong></span> <span class="def-title">PPPoE</span></p>
<ul>
<li>イーサネットフレーム上にPPPフレームをカプセル化するための通信プロトコル</li>
<li>PPPoEを用いることで，イーサネット上にある2台のコンピューター間で認証を行える</li>
<li>光回線を使ってアクセスサーバー経由でインターネットに接続するときに使う</li>
</ul>
</div>
<p>PPPoEは，PPPの昨日をEthernet上で利用するためのプロトコルです．PPPoEはLAN上においてもユーザ認証が可能で，IPアドレスの割当も可能という特徴があります．</p>
<p><span class="mini-section">PPPoEフレーム</span></p>
<p>PPPoEフレームは，Ethernetフレームに包まれて運ばれていきます．PPPoEフレームの構成は以下</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">block-beta
  columns 4
  A["version(4 bit)&lt;br&gt;PPPoEのバージョン情報"]:1
  B["タイプ(4 bit)&lt;br&gt;PPPoEのタイプ情報"]:1
  C["コードビット(8 bit)&lt;br&gt;PPPoEのパケットの種類"]:2
  D["Session ID(16 bit)&lt;br&gt;PPPoEを使った通信を行うための固有値"]:4
  E["データ長(16 bit)&lt;br&gt;最大64KB"]:4
  F["データ&lt;br&gt;PPPヘッダが入る"]:4
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p><span class="mini-section">IP通信確立までのステップ</span></p>
<p>PPPoE接続を行ってIP通信ができるようになるまでには，DiscoveryステージとPPPセッションステージの2つのステップを踏む必要があります．</p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 27%">
<col style="width: 72%">
</colgroup>
<thead>
<tr class="header">
<th>ステージ</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Discoveryステージ</strong></td>
<td>最初にPPPoEセッションをはるまで(=PPPoEセッションIDの割り当てを行うまで)</td>
</tr>
<tr class="even">
<td><strong>PPPセッションステージ</strong></td>
<td>PPP通信による認証実施ステージ(IPアドレス割当まで)</td>
</tr>
</tbody>
</table>
</div>
<p>PPPoE接続が上手くいかない場合，一般的には「PPPセッションステージ」での認証トラブルが多いです．</p>
<div id="fig-plot-ppp" class="center quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-plot-ppp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">sequenceDiagram
    participant C as PPPoEクライアント (PC)
    participant S as PPPoEサーバー (ISP AC)
    participant R as RADIUSサーバー
    participant G as 接続先 (google.com)

    %% --- Discovery Stage ---
    C -&gt;&gt; S: PADI (接続要求ブロードキャスト)
    S -&gt;&gt; C: PADO (サービス提供応答)
    C -&gt;&gt; S: PADR (AC選択 → 接続要求)
    S -&gt;&gt; C: PADS (セッション確立・Session ID付与)

    Note over C,S: PPPoE セッション確立

    %% --- PPP Session Stage (LCP + 認証) ---
    C -&gt;&gt; S: LCPネゴシエーション
    S -&gt;&gt; C: 認証要求 (PAP/CHAP)
    C -&gt;&gt; S: 認証応答

    %% --- 認証処理 (RADIUS連携) ---
    S -&gt;&gt; R: Access-Request (ユーザー名/パスワード)
    R -&gt;&gt; S: Access-Accept (認証成功, 属性情報[IP割当等])

    S -&gt;&gt; C: 認証成功通知 + IPアドレス割当

    Note over C,S: PPP セッション確立 (グローバルIP付与)

    %% --- IP通信 Stage ---
    C -&gt;&gt; G: HTTPリクエスト (例: https://google.com)
    G -&gt;&gt; C: HTTPレスポンス (Googleページ返却)

</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-plot-ppp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3
</figcaption>
</figure>
</div>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://atmarkit.itmedia.co.jp/ait/articles/1709/14/news018.html">【 ping 】コマンド／【 ping6 】コマンド――通信相手にパケットを送って応答を調べる</a></li>
<li><a href="https://superuser.com/questions/1053003/what-is-the-difference-between-eth1-and-eno1">StackExchange &gt; what is the difference between eth1 and eno1?</a></li>
<li><a href="https://ip6.me/">ip6.me</a></li>
</ul>


</section>

 ]]></description>
  <category>network</category>
  <guid>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-26-network-connection-trouble/</guid>
  <pubDate>Fri, 26 Sep 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>QuartoコンテンツをTailnetで公開する</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-23-quarto-preview-with-tailscale/</link>
  <description><![CDATA[ 






<div class="callout callout-style-default callout-note no-icon callout-titled" style="font-size:1.1em">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>📘 解説内容
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><code>quarto preview</code> をバックグラウンドプロセスとして実行する方法</li>
<li><code>quarto preview</code> の内容をtailnet内で公開する方法</li>
</ul>
</div>
</div>
<section id="quarto-preview-as-background-process" class="level2">
<h2 class="anchored" data-anchor-id="quarto-preview-as-background-process">Quarto Preview as background process</h2>
<p>バックグラウンドで<code>quarto preview</code>を実行する場合は以下のコマンドとなります</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nohup</span> quarto preview <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ~/.var/quarto.log  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;</span></span></code></pre></div></div>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 75%">
</colgroup>
<thead>
<tr class="header">
<th>要素</th>
<th>意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>nohup</code></td>
<td>ターミナルを閉じてもプロセスを終了させない</td>
</tr>
<tr class="even">
<td><code>quarto preview</code></td>
<td>Quarto プロジェクトをプレビューするコマンド</td>
</tr>
<tr class="odd">
<td><code>&gt;</code></td>
<td>標準出力 (stdout) のリダイレクト</td>
</tr>
<tr class="even">
<td><code>~/.var/quarto.log</code></td>
<td>ログ出力先ファイル</td>
</tr>
<tr class="odd">
<td><code>2&gt;&amp;1</code></td>
<td>標準エラー (stderr) を標準出力に結合(=stdout と stderr を同じファイルにまとめる)</td>
</tr>
<tr class="even">
<td><code>&amp;</code></td>
<td>コマンドをバックグラウンドで実行</td>
</tr>
</tbody>
</table>
</div>
<section id="バックグラウンドプロセスをkillする" class="level3">
<h3 class="anchored" data-anchor-id="バックグラウンドプロセスをkillする">バックグラウンドプロセスをkillする</h3>
<div class="reveal_vspace" style="--vspace-height: 0.5em;"></div>
<p><span class="mini-section">① 起動シェルと同じシェルでkillする場合</span></p>
<p>バックグラウンドジョブを起動したシェルと同じシェルでジョブをkillしたい場合は <code>jobs</code> コマンドで該当ジョブを検索することができます</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> jobs</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[1]</span>  + running    nohup quarto preview <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ~/.var/quarto.log <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div></div>
<p>このプロセスをkillする場合は</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> kill %1</span></code></pre></div></div>
<div class="reveal_vspace" style="--vspace-height: 1em;"></div>
<p><span class="mini-section">② 別のシェルでkillする場合</span></p>
<p><code>ps aux</code>で該当プロセスを検索して，<code>kill</code>という手順になりjます．実行すると</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> ps aux <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quarto"</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kirby+</span> 1710278  0.0  0.0   9940  3608 pts/8    SN   19:57   0:00 bash /usr/local/bin/quarto preview</span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kirby+</span> 1710301 14.3  0.5 46064208 164504 pts/8 SNl  19:57   0:02 /opt/quarto/bin/tools/x86_64/deno run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--unstable-ffi</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--unstable-kv</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-config</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-lock</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cached-only</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--allow-all</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-check</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--v8-flags</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>--enable-experimental-regexp-engine,--max-old-space-size=8192,--max-heap-size=8192 /opt/quarto/bin/quarto.js preview</span></code></pre></div></div>
<p>となりますが，このとき <code>kill</code> するのは後者となります．つまり，</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> kill 1710301</span></code></pre></div></div>
<p><code>nohup quarto preview &gt; ~/.var/quarto.log  2&gt;&amp;1 &amp;</code> を実施すると</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[1]</span> 1710278</span></code></pre></div></div>
<p>のようにジョブ番号に対応したPIDが表示されますが，この番号は <code>quarto preview</code> ラッパーのPIDであって，実際に止めるべきは <code>/opt/quarto/bin/tools/x86_64/deno</code> の方となります．</p>
</section>
</section>
<section id="tailscale-serve-を使ったローカルサービス公開" class="level2">
<h2 class="anchored" data-anchor-id="tailscale-serve-を使ったローカルサービス公開">Tailscale Serve を使ったローカルサービス公開</h2>
<p><code>tailscale serve</code> を用いることでlocalhostで動いているサービスを自分の Tailnet内（Tailscale VPN 内）のみでアクセスできるように公開できます． Tailscale アカウントで認証した端末だけアクセス可能なので，セキュアなサービス公開となります．</p>
<p><strong> ▶&nbsp; 実行例</strong></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ポート4200のサービスを公開</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> sudo tailscale serve 4200</span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Available</span> within your tailnet:</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">https://xxxxxx.tailxxxxx.ts.net/</span></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--</span> proxy http://127.0.0.1:4200</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Press</span> Ctrl+C to exit.</span></code></pre></div></div>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 35%">
<col style="width: 65%">
</colgroup>
<thead>
<tr class="header">
<th>項目</th>
<th>意味</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>tailscale serve 4200</code></td>
<td>ローカルマシンの <code>127.0.0.1:4200</code> で動いているサービスを Tailscale 経由で公開するコマンド．</td>
</tr>
<tr class="even">
<td><code>https://xxxxxx.tailxxxxx.ts.net/</code></td>
<td>Tailscale が自動で割り当てた対象端末専用のサブドメイン．Tailnet 内の認証済みデバイスからのみアクセス可能．</td>
</tr>
</tbody>
</table>
</div>
<section id="serving-in-background" class="level3">
<h3 class="anchored" data-anchor-id="serving-in-background">Serving in Background</h3>
<p>backgroundプロセスでserviceをtailnet内で公開したい場合は <code>--bg</code> フラグを付与して<code>tailscale serve</code>を実行します．</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 現在の公開状況を確認</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> tailscale serve status</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ポート4200のサービスを公開</span></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> tailscale serve <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bg</span> 4200</span></code></pre></div></div>
<p>公開を停止したい場合は</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> tailscale serve off</span></code></pre></div></div>


</section>
</section>

 ]]></description>
  <category>quarto</category>
  <guid>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-23-quarto-preview-with-tailscale/</guid>
  <pubDate>Tue, 23 Sep 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Sony WH-1000XM4をUbuntu 24.04 LTSで使う</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-18-wh1000xm4-setup/</link>
  <description><![CDATA[ 






<section id="goals" class="level2">
<h2 class="anchored" data-anchor-id="goals">🎯 Goals</h2>
<ul>
<li>Ubuntu 24.04 LTSに対するLDAC利用可能な状態でのWH-1000XM4接続設定</li>
<li>EasyEffectsを用いたWH-1000XM4用Equalizerの設定</li>
</ul>
<p><span class="mini-section">Package Requirements</span></p>
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th>カテゴリ</th>
<th>パッケージ</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Bluetooth LDAC</strong></td>
<td><code>libldacbt-abr-dev</code></td>
<td>LDAC の ABR (Adaptive Bitrate) ライブラリ（開発用）</td>
</tr>
<tr class="even">
<td></td>
<td><code>libldacbt-enc-dev</code></td>
<td>LDAC エンコーダライブラリ（開発用）</td>
</tr>
<tr class="odd">
<td><strong>Bluetooth 管理</strong></td>
<td><code>blueman</code></td>
<td>Bluetooth デバイス管理用 GUI</td>
</tr>
<tr class="even">
<td><strong>オーディオ基盤</strong></td>
<td><code>pipewire</code></td>
<td>オーディオサーバ（PulseAudio 互換）</td>
</tr>
<tr class="odd">
<td></td>
<td><code>pipewire-pulse</code></td>
<td>PulseAudio アプリ互換サーバ</td>
</tr>
<tr class="even">
<td></td>
<td><code>wireplumber</code></td>
<td>PipeWire のsession / policy manager</td>
</tr>
<tr class="odd">
<td><strong>音質補正</strong></td>
<td><code>easyeffects</code></td>
<td>音響補正ツール(Equalizerなど)</td>
</tr>
</tbody>
</table>
<p>今回はPipewire環境での接続設定となります．</p>
</section>
<section id="実行環境" class="level2">
<h2 class="anchored" data-anchor-id="実行環境">💻 実行環境</h2>
<section id="ubuntu" class="level3">
<h3 class="anchored" data-anchor-id="ubuntu">Ubuntu</h3>
<p><span class="mini-section">Distribution</span></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> lsb_release <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-a</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">No</span> LSB modules are available.</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Distributor</span> ID: Ubuntu</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Description:</span>    Ubuntu 24.04.3 LTS</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Release:</span>    24.04</span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Codename:</span>   noble</span></code></pre></div></div>
<p><span class="mini-section">Linux kernel</span></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> uname <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-srpo</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Linux</span> 6.14.0-29-generic x86_64 GNU/Linux</span></code></pre></div></div>
</section>
<section id="sony-wh-1000xm4のスペック" class="level3">
<h3 class="anchored" data-anchor-id="sony-wh-1000xm4のスペック">🎧 Sony WH-1000XM4のスペック</h3>
<p><span class="mini-section">ワイヤレス機能</span></p>
<table class="caption-top table">
<colgroup>
<col style="width: 30%">
<col style="width: 69%">
</colgroup>
<thead>
<tr class="header">
<th>項目</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bluetoothバージョン</td>
<td>Ver.5.0 / Class 1</td>
</tr>
<tr class="even">
<td>連続再生時間</td>
<td>最大30時間（NC ON時） / 最大38時間（NC OFF時）</td>
</tr>
<tr class="odd">
<td>充電時間</td>
<td>約3時間</td>
</tr>
<tr class="even">
<td>対応コーデック</td>
<td>SBC / AAC / LDAC</td>
</tr>
<tr class="odd">
<td>NFC</td>
<td>○</td>
</tr>
<tr class="even">
<td>TWS Plus対応</td>
<td>☓</td>
</tr>
<tr class="odd">
<td>マルチペアリング対応</td>
<td>○</td>
</tr>
<tr class="even">
<td>マルチポイント対応</td>
<td>○</td>
</tr>
</tbody>
</table>
<p><span class="mini-section">機能</span></p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>項目</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>重量</td>
<td>254g</td>
</tr>
<tr class="even">
<td>ノイズキャンセリング</td>
<td>○</td>
</tr>
<tr class="odd">
<td>ハイレゾ</td>
<td>○</td>
</tr>
<tr class="even">
<td>マイク</td>
<td>○</td>
</tr>
<tr class="odd">
<td>外音取り込み</td>
<td>○</td>
</tr>
<tr class="even">
<td>音質調整</td>
<td>○</td>
</tr>
<tr class="odd">
<td>防水・防塵性能</td>
<td>☓</td>
</tr>
<tr class="even">
<td>リモコン操作</td>
<td>○</td>
</tr>
<tr class="odd">
<td>折りたたみ</td>
<td>○</td>
</tr>
<tr class="even">
<td>サラウンド</td>
<td>☓</td>
</tr>
<tr class="odd">
<td>AIアシスタント搭載</td>
<td>Google アシスタント / Amazon Alexa</td>
</tr>
<tr class="even">
<td>AIアシスタント呼び出し機能</td>
<td>○</td>
</tr>
</tbody>
</table>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Caution</span>マルチポイント接続の注意点
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>WH-1000XM4ではマルチポイント接続設定OnにするとLDACが使用できなくなります</li>
<li>WH-1000XM5以降ではこの点は改善されています</li>
</ul>
</div>
</div>
<p><span class="mini-section">LDACとは？</span></p>
<p>LDACとはSony が開発した Bluetoothオーディオコーデックです．Bluetoothのコーデックとは，スマホや音楽再生プレイヤーなどのデバイスからワイヤレスイヤホンやヘッドホンなどに無線で音楽のデータを送る際の符号化の規格です． 圧縮の規格でもあるので元の音楽データを圧縮エンコードしBluetoothで飛ばし，受信デバイスのイヤホンなどでデコードすることで音楽の再生をしています．そのため，コーデックの違いにより，音質や遅延に違いが出ます．</p>
<table class="caption-top table">
<colgroup>
<col style="width: 14%">
<col style="width: 85%">
</colgroup>
<thead>
<tr class="header">
<th>特性項目</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>コーデック名</td>
<td><strong>LDAC</strong></td>
</tr>
<tr class="even">
<td>特徴</td>
<td>ハイレゾ対応の最高音質 Bluetooth コーデック（Sony 開発）</td>
</tr>
<tr class="odd">
<td>主な採用機器</td>
<td>ハイレゾ対応 Android / iOS / Windows / Mac / Linux (PipeWire)</td>
</tr>
<tr class="even">
<td>サンプリング周波数</td>
<td>最大 <strong>96 kHz</strong></td>
</tr>
<tr class="odd">
<td>量子化ビット数</td>
<td>最大 <strong>24 bit</strong></td>
</tr>
<tr class="even">
<td>ビットレートモード</td>
<td><strong>330 kbps / 660 kbps / 990 kbps</strong> の 3 段階（ABRで自動調整可）</td>
</tr>
<tr class="odd">
<td>遅延</td>
<td>SBC / AAC より大きめ（高音質優先のため）</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="wh-1000xm4接続設定" class="level2">
<h2 class="anchored" data-anchor-id="wh-1000xm4接続設定">🔨 WH-1000XM4接続設定</h2>
<div class="cell" data-layout-align="default">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">---</span>
<span id="cb3-2">config:</span>
<span id="cb3-3">  theme: redux</span>
<span id="cb3-4">  themeVariables:</span>
<span id="cb3-5">    fontFamily: '"Meiryo"'</span>
<span id="cb3-6">    fontSize: 1.1em</span>
<span id="cb3-7">    lineHeight: 1.4</span>
<span id="cb3-8">---</span>
<span id="cb3-9">timeline</span>
<span id="cb3-10">    title WH-1000XM4接続設定手順</span>
<span id="cb3-11">    section ① Bluetooth 接続確認</span>
<span id="cb3-12">        Bluetooth Manager&lt;br&gt;のインストール</span>
<span id="cb3-13">            : Blueman&lt;br&gt;のインストール</span>
<span id="cb3-14">        LDAC サポート確認</span>
<span id="cb3-15">            : LDAC encoding toolのインストール</span>
<span id="cb3-16">            : Adaptive bit rate tooのインストール</span>
<span id="cb3-17">    section ② Config調整</span>
<span id="cb3-18">        Pipewire設定</span>
<span id="cb3-19">            : sampling frequencyの設定</span>
<span id="cb3-20">        Wireplumber設定</span>
<span id="cb3-21">            : LDAC encoding qualityの設定</span>
<span id="cb3-22">    section ③ WH-1000MX4動作確認</span>
<span id="cb3-23">        Bluetooth ペアリング : Bluemanで WH-1000XM4 を接続</span>
<span id="cb3-24">        接続確認</span>
<span id="cb3-25">            : 周波数確認</span>
<span id="cb3-26">            : Codec確認</span>
<span id="cb3-27">            : LDAC bit rate確認</span></code></pre></div></div>
</details>
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">---
config:
  theme: redux
  themeVariables:
    fontFamily: '"Meiryo"'
    fontSize: 1.1em
    lineHeight: 1.4
---
timeline
    title WH-1000XM4接続設定手順
    section ① Bluetooth 接続確認
        Bluetooth Manager&lt;br&gt;のインストール
            : Blueman&lt;br&gt;のインストール
        LDAC サポート確認
            : LDAC encoding toolのインストール
            : Adaptive bit rate tooのインストール
    section ② Config調整
        Pipewire設定
            : sampling frequencyの設定
        Wireplumber設定
            : LDAC encoding qualityの設定
    section ③ WH-1000MX4動作確認
        Bluetooth ペアリング : Bluemanで WH-1000XM4 を接続
        接続確認
            : 周波数確認
            : Codec確認
            : LDAC bit rate確認

</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p><span class="mini-section">Bluetooth Managerのインストール</span></p>
<p>まずBluetooth デバイス管理ツール Blueman をインストールします． Ubuntu 24.04 LTSにはデフォルトでBluetooth Managerが入っているので「接続して音を出す」だけならばインストール不要です．</p>
<p>一方，接続プロファイルやcodecの選択といった制御がしやすいので今回導入します．</p>
<pre class="{bash}"><code>sudo apt install blueman</code></pre>
<p><span class="mini-section">LDAC codecの設定</span></p>
<p>Ubuntu 24.04 のデフォルトの Bluetooth ManagerだとLDACは使用できないので，以下のパッケージをインストールします</p>
<ul>
<li><code>libldacbt-enc-dev</code>: LDACエンコーディング処理用パッケージ</li>
<li><code>libldacbt-abr-dev</code>: Adaptive Bit Rateに対応するための開発ライブラリ</li>
</ul>
<p><code>-dev</code> suffixが無いものでも良いような気がしますが，今後ビルドとかするかもなので大は小を兼ねるとして開発用ライブラリをインストール． インストールコマンドは以下</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install libldacbt-abr-dev libldacbt-enc-dev</span></code></pre></div></div>
<p><span class="mini-section">Bluetooth接続確認</span></p>
<p>Bluetooth Managerを起動して，WH-1000XM4をペアリング接続します．このとき，LDAC codecを指定するのを忘れずに</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-18-wh1000xm4-setup/connection.png" class="img-fluid figure-img"></p>
<figcaption>Bluetooth初期接続</figcaption>
</figure>
</div>
<p>次に <code>pactl list sinks</code> コマンドを用いて接続状態を確認してみます．</p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 74%">
</colgroup>
<thead>
<tr class="header">
<th>構成要素</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>pactl</strong></td>
<td>PulseAudio の制御ツール．サウンドデバイスの状態取得や操作のコマンド．</td>
</tr>
<tr class="even">
<td><strong>list sinks</strong></td>
<td>出力デバイス（<code>sink</code>＝スピーカーやBluetoothイヤホンなど）の一覧を表示するサブコマンド</td>
</tr>
</tbody>
</table>
</div>
<p>Bluetoothデバイスは <code>Name: bluez</code> というsink名になります．これらを踏まえて状態を確認してみます</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> pactl list sinks <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> 20 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name: bluez'</span></span>
<span id="cb6-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Name:</span> bluez_output.xx_xx_xx_xx_xx_xx.1</span>
<span id="cb6-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Description:</span> WH-1000XM4</span>
<span id="cb6-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Driver:</span> PipeWire</span>
<span id="cb6-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Sample</span> Specification: float32le 2ch 48000Hz</span>
<span id="cb6-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Channel</span> Map: front-left,front-right</span>
<span id="cb6-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Owner</span> Module: 4294967295</span>
<span id="cb6-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mute:</span> no</span>
<span id="cb6-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Volume:</span> front-left: 28382 /  43% / <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-21.81</span> dB,   front-right: 28382 /  43% / <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-21.81</span> dB</span>
<span id="cb6-10">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">balance</span> 0.00</span>
<span id="cb6-11">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Base</span> Volume: 65536 / 100% / 0.00 dB</span>
<span id="cb6-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Monitor</span> Source: bluez_output.xx_xx_xx_xx_xx_xx.1.monitor</span>
<span id="cb6-13">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Latency:</span> 0 usec, configured 0 usec</span>
<span id="cb6-14">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Flags:</span> HARDWARE HW_VOLUME_CTRL DECIBEL_VOLUME LATENCY </span>
<span id="cb6-15">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Properties:</span></span>
<span id="cb6-16">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">api.bluez5.address</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xx:xx:xx:xx:xx:xx"</span></span>
<span id="cb6-17">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">api.bluez5.codec</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ldac"</span></span>
<span id="cb6-18">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">api.bluez5.profile</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a2dp-sink"</span></span>
<span id="cb6-19">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">api.bluez5.transport</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb6-20">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">card.profile.device</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span></span>
<span id="cb6-21">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">device.id</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"179"</span></span>
<span id="cb6-22">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">device.routes</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span></span></code></pre></div></div>
<p>ここから，Bluetooth コーデックとサンプリングレートの確認ができます．</p>
<p>以下のようにcodecは問題なくLDACの認識となってます</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  api.bluez5.codec </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "ldac"</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  api.bluez5.profile </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "a2dp-sink"</span></span></code></pre></div></div>
<p>一方，samplking frequencyが</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb8-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    Sample Specification: float32le 2ch 48000Hz</span></span></code></pre></div></div>
<p>となっています．LDACは最大96kHz対応できるはずなので，PipeWire のサンプリング周波数を設定します．</p>
<p><span class="mini-section">sampling frequencyの設定</span></p>
<p><code>/usr/share/pipewire/pipewire.conf</code> に設定ファイルがあるのでこれを修正します．</p>
<ul>
<li><code>default.clock.rate</code>: フォルトのサンプリング周波数(Hz)</li>
<li><code>default.clock.allowed-rates</code>: PipeWire が切り替えを許可するサンプルレートのリスト</li>
</ul>
<p>以上2つの項目を修正します．</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb9-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">default.clock.rate          </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">96000</span></span>
<span id="cb9-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">default.clock.allowed-rates </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> [ 48000, 96000 ]</span></span></code></pre></div></div>
<p>という形に変更します．<code>/usr/share/pipewire/pipewire.conf</code> は <code>root</code> ownerのファイルなので，修正するときは</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> vim /usr/share/pipewire/pipewire.conf</span></code></pre></div></div>
<p>で編集します．</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb11-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb11-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">context.properties </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> {</span></span>
<span id="cb11-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Configure properties in the system.</span></span>
<span id="cb11-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#library.name.system                   = support/libspa-support</span></span>
<span id="cb11-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#context.data-loop.library.name.system = support/libspa-support</span></span>
<span id="cb11-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#support.dbus                          = true</span></span>
<span id="cb11-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#link.max-buffers                      = 64</span></span>
<span id="cb11-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    link.max-buffers                       </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 16                       # version &lt; 3 clients can't handle more</span></span>
<span id="cb11-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#mem.warn-mlock                        = false</span></span>
<span id="cb11-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#mem.allow-mlock                       = true</span></span>
<span id="cb11-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#mem.mlock-all                         = false</span></span>
<span id="cb11-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#clock.power-of-two-quantum            = true</span></span>
<span id="cb11-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#log.level                             = 2</span></span>
<span id="cb11-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#cpu.zero.denormals                    = false</span></span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    core.daemon </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> true              # listening for socket connections</span></span>
<span id="cb11-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    core.name   </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> pipewire-0        # core name and socket name</span></span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Properties for the DSP configuration.</span></span>
<span id="cb11-20"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    default.clock.rate          </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">96000</span></span>
<span id="cb11-21"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    default.clock.allowed-rates </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> [ 48000, 96000 ]</span></span>
<span id="cb11-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    default.clock.quantum       </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb11-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    default.clock.min-quantum   </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb11-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    default.clock.max-quantum   </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span></span>
<span id="cb11-25"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    default.clock.quantum-limit </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8192</span></span>
<span id="cb11-26"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    default.clock.quantum-floor </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb11-27"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#default.video.width         = 640</span></span>
<span id="cb11-28"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#default.video.height        = 480</span></span>
<span id="cb11-29"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#default.video.rate.num      = 25</span></span>
<span id="cb11-30"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#default.video.rate.denom    = 1</span></span>
<span id="cb11-31"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb11-32"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#settings.check-quantum      = false</span></span>
<span id="cb11-33"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#settings.check-rate         = false</span></span>
<span id="cb11-34"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb11-35"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These overrides are only applied when running in a vm.</span></span>
<span id="cb11-36"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    vm.overrides </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> {</span></span>
<span id="cb11-37"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">        default.clock.min-quantum </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb11-38"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    }</span></span>
<span id="cb11-39"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span></span></code></pre></div></div>
<p>編集後にサービスを再起動して設定を読み込ませます．</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span> restart pipewire pipewire-pulse wireplumber</span></code></pre></div></div>
<p>もし接続が安定していればsampling frequencyを確認すると96kHzになっているはずです</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> pactl list sinks <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> 20 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name: bluez'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample Specification:"</span></span>
<span id="cb13-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Sample</span> Specification: float32le 2ch 96000Hz</span></code></pre></div></div>
<p>ただし，かならず96kHzとはなりません．あくまで最大96kHzであって，接続状態に応じて 48kHz になったります．</p>
<p><span class="mini-section">LDAC encoding qualityの設定</span></p>
<p>Bit rateは，動画の1秒あたりのデータ量を示す値です． bps（bits per second）と表記され，1Mbpsに設定されている場合，1秒あたりデータ量が0.125MB（1byte＝8bit）の動画ということになります． ビットレートが高い動画ほど，データ量が多く高画質です．</p>
<p>LDACのbit rateを高品質モードで安定させたい場合は，WirePlumber の Bluetooth 設定ファイル <code>/usr/share/wireplumber/bluetooth.lua.d/50-bluez-config.lua</code> を編集します． <code>bluez5.a2dp.ldac.quality</code> というフィールドがLDAC のエンコード品質を設定するオプションです．</p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 10%">
<col style="width: 63%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>値</th>
<th>説明</th>
<th>ビットレート</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>auto</code></td>
<td>適応ビットレート（Adaptive Bitrate），デフォルト</td>
<td>変動</td>
</tr>
<tr class="even">
<td><code>hq</code></td>
<td>高品質モード</td>
<td>990 / 909 kbps</td>
</tr>
<tr class="odd">
<td><code>sq</code></td>
<td>標準品質モード</td>
<td>660 / 606 kbps</td>
</tr>
<tr class="even">
<td><code>mq</code></td>
<td>モバイル用低ビットレートモード</td>
<td>330 / 303 kbps</td>
</tr>
</tbody>
</table>
</div>
<p><code>hq</code> を設定すれば，理論上は最大 96 kHz のサンプルレートをフル品質で利用できるはずです．</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode lua code-with-copy"><code class="sourceCode lua"><span id="cb14-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">matches</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-2">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Matches all sources.</span></span>
<span id="cb14-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node.name"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matches"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bluez_input.*"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb14-5">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb14-6">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Matches all sinks.</span></span>
<span id="cb14-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node.name"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matches"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bluez_output.*"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb14-9">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb14-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span></code></pre></div></div>
<p>上記のセクションで <code>["bluez5.a2dp.ldac.quality"] = "hq",  -- LDAC HQ モード</code> という設定をします．このセクションは</p>
<ul>
<li><code>"bluez_input.*"</code>: すべての Bluetooth 入力ノード（マイクなど）</li>
<li><code>"bluez_output.*"</code>: すべての Bluetooth 出力ノード（ヘッドホンなど）</li>
</ul>
<p>正規表現で上記にマッチするすべてのノードに <code>apply_properties</code> を適用するという内容になります．従って，以下のような設定になります</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode lua code-with-copy"><code class="sourceCode lua"><span id="cb15-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb15-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">matches</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-4">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Matches all sources.</span></span>
<span id="cb15-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node.name"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matches"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bluez_input.*"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-7">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-8">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Matches all sinks.</span></span>
<span id="cb15-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"node.name"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matches"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bluez_output.*"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-11">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">apply_properties</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-14">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--["node.nick"] = "My Node",</span></span>
<span id="cb15-15">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--["priority.driver"] = 100,</span></span>
<span id="cb15-16">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--["priority.session"] = 100,</span></span>
<span id="cb15-17">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--["node.pause-on-idle"] = false,</span></span>
<span id="cb15-18">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--["resample.quality"] = 4,</span></span>
<span id="cb15-19">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--["channelmix.normalize"] = false,</span></span>
<span id="cb15-20">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--["channelmix.mix-lfe"] = false,</span></span>
<span id="cb15-21">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--["session.suspend-timeout-seconds"] = 5,  -- 0 disables suspend</span></span>
<span id="cb15-22">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--["monitor.channel-volumes"] = false,</span></span>
<span id="cb15-23"></span>
<span id="cb15-24">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Media source role, "input" or "playback"</span></span>
<span id="cb15-25">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Defaults to "playback", playing stream to speakers</span></span>
<span id="cb15-26">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Set to "input" to use as an input for apps</span></span>
<span id="cb15-27">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--["bluez5.media-source-role"] = "input",</span></span>
<span id="cb15-28">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bluez5.a2dp.ldac.quality"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hq"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- LDAC HQ モード</span></span>
<span id="cb15-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-30">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span></code></pre></div></div>
<p>上記実行後再びサービスを再起動しときます．</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">systemctl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span> restart pipewire pipewire-pulse wireplumber</span></code></pre></div></div>
<p>すると以下のような接続状態になるはずです</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> pactl list sinks <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> 20 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name: bluez'</span>                             </span>
<span id="cb17-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Name:</span> bluez_output.xx_xx_xx_xx_xx_xx.1</span>
<span id="cb17-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Description:</span> WH-1000XM4</span>
<span id="cb17-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Driver:</span> PipeWire</span>
<span id="cb17-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Sample</span> Specification: float32le 2ch 96000Hz</span>
<span id="cb17-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Channel</span> Map: front-left,front-right</span>
<span id="cb17-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Owner</span> Module: 4294967295</span>
<span id="cb17-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Mute:</span> no</span>
<span id="cb17-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Volume:</span> front-left: 19609 /  30% / <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-31.44</span> dB,   front-right: 19609 /  30% / <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-31.44</span> dB</span>
<span id="cb17-10">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">balance</span> 0.00</span>
<span id="cb17-11">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Base</span> Volume: 65536 / 100% / 0.00 dB</span>
<span id="cb17-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Monitor</span> Source: bluez_output.xx_xx_xx_xx_xx_xx.1.monitor</span>
<span id="cb17-13">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Latency:</span> 0 usec, configured 0 usec</span>
<span id="cb17-14">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Flags:</span> HARDWARE HW_VOLUME_CTRL DECIBEL_VOLUME LATENCY </span>
<span id="cb17-15">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Properties:</span></span>
<span id="cb17-16">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">allowed-rates</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table: 0xxxxxxxxxxxxx"</span></span>
<span id="cb17-17">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">api.bluez5.address</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xx:xx:xx:xx:xx:xx"</span></span>
<span id="cb17-18">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">api.bluez5.codec</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ldac"</span></span>
<span id="cb17-19">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">api.bluez5.profile</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a2dp-sink"</span></span>
<span id="cb17-20">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">api.bluez5.transport</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb17-21">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bluez5.a2dp.ldac.quality</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hq"</span></span>
<span id="cb17-22">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">card.profile.device</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span></span></code></pre></div></div>
<p>以上で設定は完了です．</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>周波数は96kHzの方が本当に良いのか？
</div>
</div>
<div class="callout-body-container callout-body">
<p>48kHzに比べ96kHzは転送可能データ量は倍増しますが，その分Bluetooth 帯域の負荷が高くなります．そのため，音途切れが出やすくなります． 家や障害物の少ない環境なら良いとは思いますが，外出のときに使う場合は96kHzにこだわる必要はないと思います．また，そもそも論としてあくまでLDACは音楽を聞くためのcodecであって，通話とかのときは使えません．</p>
</div>
</div>
<section id="その他フィールドについて" class="level3">
<h3 class="anchored" data-anchor-id="その他フィールドについて">その他フィールドについて</h3>
<p><span class="mini-section">Owner Module</span></p>
<p><code>Owner Module</code>は，音源（Sink）や音声ノードを 所有している PipeWire モジュール の IDをしめすフィールドです．</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb18-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Owner Module: 4294967295</span></span></code></pre></div></div>
<p>となってますが</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A4,294,967,295%20=%202%5E%7B32%7D%20-%201%0A"></p>
<p>であることから特別な意味がありそうなことが推察できます．実際に，PipeWire / PulseAudio では 「所有者なし」 を表すフラグ的な値として扱われてます．</p>
<p><span class="mini-section">PulseAudio / PipeWire における音量の内部表現</span></p>
<p><code>Base Volume: 65536 / 100% / 0.00 dB</code> という行があります．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A65,536%20=%202%5E%7B16%7D%0A"></p>
<p>で音量の最大値を示しています．<a href="https://gitlab.freedesktop.org/pipewire/pipewire/-/blob/master/spa/plugins/alsa/acp/volume.h">PipeWire/pipewire Repository &gt; volume.h source</a>の実装を確認してみると</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">typedef</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint32_t</span> pa_volume_t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define PA_VOLUME_MUTED </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">pa_volume_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">U</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define PA_VOLUME_NORM </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">pa_volume_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x10000</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">U</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define PA_VOLUME_MAX </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">pa_volume_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>UINT32_MAX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div></div>
<p>となっており，音量は 32bit unsigned intとして扱われてますが，</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb20-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define PA_VOLUME_NORM </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">pa_volume_t</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x10000</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">U</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div></div>
<p>で16bit 正規化 (<code>0x10000</code>) が基準となっていることも読み取れます．</p>
</section>
</section>
<section id="easyeffectsの導入" class="level2">
<h2 class="anchored" data-anchor-id="easyeffectsの導入">🎚️ EasyEffectsの導入</h2>
<p>ヘッドホンは各製品ごとに個性が強く，同じ音源でも聞こえかたが異なります． 具体的には，ヘッドホンはその再生周波数特性が各製品ごとに異なり，その特性に応じて「ドンシャリ傾向」「かまぼこ傾向」「フラット傾向」の再生音となります．</p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 12%">
<col style="width: 53%">
<col style="width: 34%">
</colgroup>
<thead>
<tr class="header">
<th>音傾向</th>
<th>特徴</th>
<th>向いている音楽ジャンル・用途</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>ドンシャリ</strong></td>
<td>低音と高音が強調される．低音が「ドンドン」，高音が「シャリシャリ」する派手な音．</td>
<td>ロック，EDM</td>
</tr>
<tr class="even">
<td><strong>かまぼこ</strong></td>
<td>中音域が際立ち，低音・高音は抑えめ．ボーカルやメロディが前に出やすい．</td>
<td>アコースティック，ボーカル重視の楽曲，バラード</td>
</tr>
<tr class="odd">
<td><strong>フラット</strong></td>
<td>周波数特性が均一に近く，原音忠実性が高い．録音やモニタリング用途に理想的．</td>
<td>クラシック，ジャズ，音源分析</td>
</tr>
</tbody>
</table>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-18-wh1000xm4-setup/frequency.png" class="img-fluid figure-img"></p>
<figcaption>source: audio-technica &gt; ヘッドホン・イヤホンを識る</figcaption>
</figure>
</div>
<p>無理に調整する必要はないですが，Linux環境でEqualizer調整したい場合はPipewire環境でも動作する<span class="regmonkey-bold">EasyEffects</span>がおすすめです．</p>
<p><span class="mini-section">Equalizerとは？</span></p>
<p>イコライザーは音質傾向をリケーブルのように物理的にではなく，ソフトウェアで間接的に音質を変える手法です．</p>
<ul>
<li>音楽リスニングで好みの音質に調整</li>
<li>ヘッドホンでバーチャルサラウンド化</li>
</ul>
<p>という目的のために諒されます．Equalizer を使うと，各周波数帯（低音領域・中音領域・高温領域）の音量を個別に増減できます．</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-18-wh1000xm4-setup/easyeffects.png" class="img-fluid figure-img"></p>
<figcaption>Equalizer by EasyEffects</figcaption>
</figure>
</div>
<p><span class="mini-section">Easy Effectsのインストール</span></p>
<p>apt packageで入れる場合は以下のコマンドでインストールします</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apt package</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install easyeffects</span></code></pre></div></div>
<p><span class="mini-section">Equalizer設定</span></p>
<p>基本的には自分が理想とする音質に合わせて周波数ごとのゲインを調整します． 自分は<a href="https://autoeq.app/">AutoEQ</a>の周波数補正プリセットをベースラインとして少し自分好みに変更しました．</p>
<p>select headphonesのところに，<code>Sony WH-1000XM4 (ANC Off)</code>を入力すると以下のようなグラフがでてきます</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-18-wh1000xm4-setup/autoeq.png" class="img-fluid figure-img"></p>
<figcaption>AutoEq</figcaption>
</figure>
</div>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 80%">
</colgroup>
<thead>
<tr class="header">
<th>用語</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>RAW</td>
<td>元のヘッドホン・スピーカーの周波数特性（補正前）</td>
</tr>
<tr class="even">
<td>TARGET</td>
<td>理想の周波数特性（目標カーブ）</td>
</tr>
<tr class="odd">
<td>EQUALIZED</td>
<td>EQ 補正を適用した後の特性（RAW → TARGET に近づけた状態）</td>
</tr>
</tbody>
</table>
</div>
<p>31-band Graphic Eqをコピペして，ちょっと自分好みに編集します．その後以下の形式でtxtファイルを保存します．</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb22-1">Preamp: 0db</span>
<span id="cb22-2">Filter 1: ON PK Fc 20 Hz Gain 0 dB Q 4.36</span>
<span id="cb22-3">Filter 2: ON PK Fc 25 Hz Gain 0 dB Q 4.36</span>
<span id="cb22-4">Filter 3: ON PK Fc 32 Hz Gain 0 dB Q 4.36</span>
<span id="cb22-5">Filter 4: ON PK Fc 40 Hz Gain 0 dB Q 4.36</span>
<span id="cb22-6">Filter 5: ON PK Fc 50 Hz Gain 0 dB Q 4.36</span>
<span id="cb22-7">Filter 6: ON PK Fc 63 Hz Gain 0 dB Q 4.36</span>
<span id="cb22-8">Filter 7: ON PK Fc 80 Hz Gain -0.2 dB Q 4.36</span>
<span id="cb22-9">Filter 8: ON PK Fc 101 Hz Gain 1.1 dB Q 4.36</span>
<span id="cb22-10">Filter 9: ON PK Fc 127 Hz Gain 0 dB Q 4.36</span>
<span id="cb22-11">Filter 10: ON PK Fc 160 Hz Gain 0 dB Q 4.36</span>
<span id="cb22-12">Filter 11: ON PK Fc 202 Hz Gain 0 dB Q 4.36</span>
<span id="cb22-13">Filter 12: ON PK Fc 254 Hz Gain -0.9 dB Q 4.36</span>
<span id="cb22-14">Filter 13: ON PK Fc 320 Hz Gain 0.7 dB Q 4.36</span>
<span id="cb22-15">Filter 14: ON PK Fc 403 Hz Gain 2.2 dB Q 4.36</span>
<span id="cb22-16">Filter 15: ON PK Fc 508 Hz Gain 0.3 dB Q 4.36</span>
<span id="cb22-17">Filter 16: ON PK Fc 640 Hz Gain 3 dB Q 4.36</span>
<span id="cb22-18">Filter 17: ON PK Fc 806 Hz Gain 2.3 dB Q 4.36</span>
<span id="cb22-19">Filter 18: ON PK Fc 1016 Hz Gain 0.8 dB Q 4.36</span>
<span id="cb22-20">Filter 19: ON PK Fc 1280 Hz Gain 1 dB Q 4.36</span>
<span id="cb22-21">Filter 20: ON PK Fc 1613 Hz Gain -1.1 dB Q 4.36</span>
<span id="cb22-22">Filter 21: ON PK Fc 2032 Hz Gain 0.5 dB Q 4.36</span>
<span id="cb22-23">Filter 22: ON PK Fc 2560 Hz Gain -1.1 dB Q 4.36</span>
<span id="cb22-24">Filter 23: ON PK Fc 3225 Hz Gain -0.7 dB Q 4.36</span>
<span id="cb22-25">Filter 24: ON PK Fc 4064 Hz Gain 2.2 dB Q 4.36</span>
<span id="cb22-26">Filter 25: ON PK Fc 5120 Hz Gain 1.7 dB Q 4.36</span>
<span id="cb22-27">Filter 26: ON PK Fc 6451 Hz Gain 0.2 dB Q 4.36</span>
<span id="cb22-28">Filter 27: ON PK Fc 8127 Hz Gain -3 dB Q 4.36</span>
<span id="cb22-29">Filter 28: ON PK Fc 10240 Hz Gain -0.4 dB Q 4.36</span>
<span id="cb22-30">Filter 29: ON PK Fc 12902 Hz Gain 2 dB Q 4.36</span>
<span id="cb22-31">Filter 30: ON PK Fc 16255 Hz Gain 4.7 dB Q 4.36</span>
<span id="cb22-32">Filter 31: ON PK Fc 20480 Hz Gain 10.7 dB Q 4.36</span></code></pre></div></div>
<p>それをImport PresetのAPOから読み込ませれば完了です．気に入らなければtoggleでon/offできるのもEasyEffectsの良いところです．</p>
<p><span class="mini-section">利用してるときにトラブルが発生した場合</span></p>
<p>EasyEffectsを利用しているとき，たまに音声出力やEQ処理でフリーズしたりします． 自分が直面したケースだとPipeWire や Bluetooth 接続自体の問題ではなく，EasyEffects の GUI やプラグインが原因だったので， 実行中の EasyEffects プロセスを強制終了する形で対処しています．コマンドは以下</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">killall</span> easyeffects</span></code></pre></div></div>
</section>
<section id="appendix-1-bluetooth" class="level2">
<h2 class="anchored" data-anchor-id="appendix-1-bluetooth">Appendix 1: Bluetooth</h2>
<div id="def-" class="custom_problem blog-custom-border theorem definition">
<p><span class="theorem-title"><strong>Definition 1</strong></span> <span class="def-title">Bluetooth</span></p>
<ul>
<li>2.54GHz帯の電波を使って通信する無線通信規格</li>
<li>赤外線(IrDA)と異なり，インファーフェース部分を大勝利きに向ける必要はない</li>
<li>Wi-Fiのように高速通信ではないが，消費電力が少なく小型の機器に向いている</li>
</ul>
</div>
<p>Bluetooth製品の規格で重要なのが「Version」「Class」「Profile」の三点．</p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 75%">
</colgroup>
<thead>
<tr class="header">
<th>項目</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Version</td>
<td>通信方式や通信速度を規定したもの</td>
</tr>
<tr class="even">
<td>Class</td>
<td>電波強度と最大通信距離を表す</td>
</tr>
<tr class="odd">
<td>Profile</td>
<td>Bluetoothでやり取りするために通信ルール．音声ステレオ通信ならば「A2DP」，マウスやキーボードなどの入力装置ならば「HID」</td>
</tr>
</tbody>
</table>
</div>
<div id="def-" class="custom_problem blog-custom-border theorem definition">
<p><span class="theorem-title"><strong>Definition 2</strong></span> <span class="def-title">Bluetooth Class</span></p>
<ul>
<li>Bluetoothのクラスとは，電波の最大出力や到達距離を規定した名称</li>
<li>最大通信距離によって「クラス1」，「クラス2」，「クラス3」の3つの種類に分けられています．</li>
</ul>
</div>
<div class="no-border-top-table">
<table class="caption-top table">
<thead>
<tr class="header">
<th>クラスの種類</th>
<th>最大出力</th>
<th>通信最大距離</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>クラス1</td>
<td>100mW</td>
<td>約100m</td>
</tr>
<tr class="even">
<td>クラス2</td>
<td>2.5mW</td>
<td>約10m</td>
</tr>
<tr class="odd">
<td>クラス3</td>
<td>1mW</td>
<td>約1m</td>
</tr>
</tbody>
</table>
</div>
<p>なお日本国内では「クラス1」といえど10mWが限界のため最大値の1/10が最大出力です．</p>
</section>
<section id="appendix-2-0x10000u-のprefixとsuffix" class="level2">
<h2 class="anchored" data-anchor-id="appendix-2-0x10000u-のprefixとsuffix">Appendix 2: <code>0x10000U</code> のprefixとsuffix</h2>
<p><code>0x10000U</code> には <code>0x</code> というprefixと <code>U</code> というsuffixが付いてます．</p>
<ul>
<li><code>0x</code>: 続くdigitsが16進数(hexadecimal number)であることを表す</li>
<li><code>U</code>: <code>unsigned</code>を表す．つまり今回は unsigned integer</li>
</ul>
<p>従って，<code>0x10000U</code> は</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A65,536%20=%201%20%5Ctimes%2016%5E4%20+%200%20%5Ctimes%2016%5E3%20+%200%20%5Ctimes%2016%5E2%20+%200%20%5Ctimes%2016%5E1%20%20+%200%20%5Ctimes%2016%5E0%0A"></p>
<p>となります．</p>
<p><span class="mini-section">C, C++で使用されるsuffix例</span></p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 15%">
<col style="width: 11%">
<col style="width: 72%">
</colgroup>
<thead>
<tr class="header">
<th>value</th>
<th>suffix</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>123</code></td>
<td></td>
<td>デフォルトの整数型（通常 <code>int</code>）</td>
</tr>
<tr class="even">
<td><code>123u</code></td>
<td><code>u</code></td>
<td><code>unsigned int</code>（符号なし整数）</td>
</tr>
<tr class="odd">
<td><code>123l</code></td>
<td><code>l</code></td>
<td><code>long</code>（符号付き長整数，環境依存で32bit）</td>
</tr>
<tr class="even">
<td><code>123L</code></td>
<td><code>L</code></td>
<td><code>long</code>（符号付き長整数）</td>
</tr>
<tr class="odd">
<td><code>123uL</code></td>
<td><code>uL</code></td>
<td><code>unsigned long</code>（符号なし長整数）</td>
</tr>
<tr class="even">
<td><code>123LL</code></td>
<td><code>LL</code></td>
<td><code>long long</code>（符号付き64bit整数）</td>
</tr>
<tr class="odd">
<td><code>123uLL</code></td>
<td><code>uLL</code></td>
<td><code>unsigned long long</code>（符号なし64bit整数）</td>
</tr>
</tbody>
</table>
</div>
<pre class="{zsh}"><code>% gcc check_numeric_type.c -o test &amp;&amp; ./test
Type                 Bytes  Min                    Max                   
int                  4      -2147483648            2147483647            
short                2      -32768                 32767                 
long                 8      -9223372036854775808   9223372036854775807   
unsigned short       2      0                      65535                 
unsigned long        8      0                      18446744073709551615  
long long            8      -9223372036854775808   9223372036854775807   
unsigned long long   8      0                      18446744073709551615  
float                4      -3.402823e+38          3.402823e+38          
double               8      -1.797693e+308         1.797693e+308         
long double          16     -1.189731e+4932        1.189731e+4932 </code></pre>
<p>つまり，<code>long long</code> は 8 bytes(=64 bits)であることがわかります．</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://autoeq.app/">AutoEQ</a></li>
<li><a href="https://www.audio-technica.co.jp/headphone/navi/whatis/06.php">audio-technica &gt; ヘッドホン・イヤホンを識る</a></li>
<li><a href="https://pipewire.pages.freedesktop.org/wireplumber/daemon/configuration/bluetooth.html">WirePlumber setting</a></li>
<li><a href="https://gitlab.freedesktop.org/pipewire/pipewire/-/blob/master/spa/plugins/alsa/acp/volume.h">PipeWire/pipewire Repository &gt; volume.h source</a></li>
<li><a href="https://ryonakagami.github.io/2021/04/23/ubuntu-sony-bluetooth-setting/">Ryo’s Tech Blog &gt; Sony WF-1000XM3 Bluetoothの設定</a></li>
</ul>


</section>

 ]]></description>
  <category>bluetooth</category>
  <guid>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-18-wh1000xm4-setup/</guid>
  <pubDate>Thu, 18 Sep 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>VDIとは？</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-17-VDI/</link>
  <description><![CDATA[ 






<section id="vdiとは" class="level2">
<h2 class="anchored" data-anchor-id="vdiとは">VDIとは？</h2>
<div id="def-" class="custom_problem blog-custom-border theorem definition">
<p><span class="theorem-title"><strong>Definition 1</strong></span> <span class="def-title">VDI(Virtual Desktop Infrastructure)</span></p>
<ul>
<li>仮想環境技術を用いて，デスクトップ環境をサーバー上で構築・集中管理し，ユーザーがリモートからアクセスできるようにする仕組み．</li>
<li>サーバー上でユーザーごとに仮想デスクトップ（VM）を提供されるので，OSやアプリも個別に分離されている</li>
</ul>
</div>
<div id="fig-plot" class="center quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-plot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TB
    %% VDI型環境
    subgraph VDI[VDI環境]
    direction LR
      %% サーバー側
      subgraph Server[サーバー]
          direction LR
          HW[ハードウェア]
          HV[ハイパーバイザ]
          VM1[VM 1: OS + アプリ]
          VM2[VM 2: OS + アプリ]
          VM3[VM 3: OS + アプリ]
          
          HW --&gt; HV
          HV --&gt; VM1
          HV --&gt; VM2
          HV --&gt; VM3
      end

      %% クライアント側
      Client1[端末 1]
      Client2[端末 2]
      Client3[端末 3]
      
      VM1 --&gt;|画面転送| Client1
      VM2 --&gt;|画面転送| Client2
      VM3 --&gt;|画面転送| Client3
    end
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-plot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: VDI環境
</figcaption>
</figure>
</div>
<section id="デスクトップ仮想化の種類" class="level3">
<h3 class="anchored" data-anchor-id="デスクトップ仮想化の種類">デスクトップ仮想化の種類</h3>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 29%">
<col style="width: 20%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th>種類</th>
<th>概要</th>
<th>特徴</th>
<th>利点</th>
<th>注意点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>サーバーベース型</strong></td>
<td>複数ユーザーが1台のサーバーOS環境を共有</td>
<td>OSは1種類，セッションを共有</td>
<td>導入コスト低，サーバー資源効率的</td>
<td>個別カスタマイズ不可，安定性やセキュリティの制約</td>
</tr>
<tr class="even">
<td><strong>VDI</strong></td>
<td>サーバー上でユーザーごとに独立した仮想マシンを提供</td>
<td>個別OS環境，画面転送型</td>
<td>個別カスタマイズ可能，柔軟でセキュア</td>
<td>サーバー・ストレージ負荷高，導入コスト高</td>
</tr>
<tr class="odd">
<td><strong>ブレードPC型</strong></td>
<td>サーバーラック内に物理PCを設置し，ネットワーク経由で利用</td>
<td>フル物理PC環境をリモート利用</td>
<td>高性能アプリ向き，互換性問題少</td>
<td>ハードウェアコスト高，管理・保守が物理的に大変</td>
</tr>
<tr class="even">
<td><strong>パーソナルクラウド型<br>（DaaS: Desktop as a Service）</strong></td>
<td>クラウド上で提供される仮想デスクトップ</td>
<td>ユーザーごとに独立OS，クラウド管理</td>
<td>初期投資少，スケーラブル，場所を選ばず利用可能</td>
<td>ネットワーク依存，継続コストがかかる</td>
</tr>
<tr class="odd">
<td><strong>アプリケーション仮想化</strong></td>
<td>OSは端末に残し，アプリだけ仮想化して配信</td>
<td>アプリ単位で配信・管理</td>
<td>OSに依存せずアプリ更新容易</td>
<td>OSやアプリ間互換性に注意</td>
</tr>
</tbody>
</table>
</div>
<div id="fig-plot" class="center quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-plot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TB
    %% ブレードPC型環境
    subgraph Blade[ブレードPC環境]
    direction LR
      %% サーバー側（物理PC）
      subgraph BladeServer[ブレードPCラック]
          direction LR
          PC1[PC 1]
          PC2[PC 2]
          PC3[PC 3]
      end

      %% クライアント側
      Client1[端末 1]
      Client2[端末 2]
      Client3[端末 3]
      
      PC1 --&gt;|画面転送| Client1
      PC2 --&gt;|画面転送| Client2
      PC3 --&gt;|画面転送| Client3
    end
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-plot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: ブレードPC環境
</figcaption>
</figure>
</div>
<div id="fig-plot" class="center quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-plot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TB
    %% サーバーベース型環境
    subgraph RDS[サーバーベース型環境]
    direction LR
      %% サーバー側
      subgraph Server[サーバー]
          direction LR
          HW[ハードウェア]
          OS[OS]
          App[アプリ]
      end

      %% クライアント側
      Client1[端末 1]
      Client2[端末 2]
      Client3[端末 3]
      
      Server --&gt;|画面転送（セッション共有）| Client1
      Server --&gt;|画面転送（セッション共有）| Client2
      Server --&gt;|画面転送（セッション共有）| Client3
    end
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-plot-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: サーバーベース型環境
</figcaption>
</figure>
</div>
<div id="fig-daas" class="center quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-daas-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TB
    %% パーソナルクラウド型環境
    subgraph DaaS[パーソナルクラウド型環境]
    direction LR
      %% クラウド側サーバー
      subgraph Cloud[クラウドサーバー]
          direction LR
          HW[ハードウェア]
          HV[ハイパーバイザ]
          VM1[VM 1: OS + アプリ]
          VM2[VM 2: OS + アプリ]
      end

      %% クライアント側
      Client1[端末 1]
      Client2[端末 2]

      VM1 --&gt;|画面転送 + データ保護| Client1
      VM2 --&gt;|画面転送 + データ保護| Client2
    end
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-daas-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: パーソナルクラウド型（DaaS）環境
</figcaption>
</figure>
</div>
<div id="fig-appvirt" class="center quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-appvirt-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph TB
    %% アプリケーション仮想化
    subgraph AppVirt[アプリケーション仮想化]
    direction LR
      %% サーバー側
      subgraph Server[サーバー]
          direction LR
          HW[ハードウェア]
          AppServer[アプリケーションサーバー]
      end

      %% クライアント側
      Client1[端末 1]
      Client2[端末 2]

      AppServer --&gt;|アプリ配信 + データ保護| Client1
      AppServer --&gt;|アプリ配信 + データ保護| Client2
    end
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-appvirt-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: アプリケーション仮想化環境
</figcaption>
</figure>
</div>
</section>
<section id="vdiの特徴" class="level3">
<h3 class="anchored" data-anchor-id="vdiの特徴">VDIの特徴</h3>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>(1) 集中管理
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>OSやアプリケーションをサーバー上で集中管理するため，ソフトウェアの更新やパッチ適用を一元的に行える</li>
<li>アクセス権限や暗号化を一元管理できる</li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>(2) 画面転送型アーキテクチャ
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>実際の処理はサーバー上で行われ，端末には画面情報だけが転送される</li>
<li>クライアント側の性能に大きく依存せず，高速な端末が不要</li>
<li>端末が変わっても同じ仮想デスクトップ環境が使える</li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>(3) セキュリティの強化
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>データはサーバーに集中保存され，端末側には残らないため情報漏洩リスクが低い</li>
<li>端末の紛失・盗難による情報漏洩の防止が期待できる</li>
</ul>
</div>
</div>
</section>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=Jw2w6aYRKqo">【5分で学べる】VDIとは？VDI導入による効果 | 情報処理安全確保支援士（登録セキスペ）</a></li>
</ul>


</section>

 ]]></description>
  <category>環境構築</category>
  <guid>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-17-VDI/</guid>
  <pubDate>Wed, 17 Sep 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>代表的なカーネル関数</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-12-kernel-function/</link>
  <description><![CDATA[ 






<section id="代表的なカーネル" class="level2">
<h2 class="anchored" data-anchor-id="代表的なカーネル">代表的なカーネル</h2>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>カーネル関数例
</div>
</div>
<div class="callout-body-container callout-body">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Ctext%7BGaussian%20kernel:%20%7D%20&amp;%20k(u)%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%7D%5Cexp%5Cleft(-%5Cfrac%7Bu%5E2%7D%7B2%7D%5Cright)%5C%5C%0A%5Ctext%7BEpanechnikov%20kernel:%20%7D%20&amp;%20k(u)%20=%20%5Cfrac%7B3%7D%7B4%7D(1%20-%20u%5E2)%5Cmathbf%20I%5C%7B%7Cu%7C%20%5Cleq%201%5C%7D%20=%20%5Cfrac%7B3%7D%7B4%7D%5Cmax%5C%7B1%20-%20u%5E2,%200%5C%7D%5C%5C%0A%5Ctext%7BBiweight%20kernel:%20%7D%20&amp;%20k(u)%20=%20%5Cfrac%7B15%7D%7B16%7D(1%20-%20u%5E2)%5E2%5Cmathbf%20I%5C%7B%7Cu%7C%20%5Cleq%201%5C%7D%5C%5C%0A%5Ctext%7BUniform%20kernel:%20%7D%20&amp;%20k(u)%20=%20%5Cfrac%7B1%7D%7B2%7D%5Cmathbf%20I%5C%7B%7Cu%7C%20%5Cleq%201%5C%7D%5C%5C%5B5pt%5D%0A%5Ctext%7BTriangular%20kernel:%20%7D%20&amp;%20k(u)%20=%20(1%20-%20%7Cu%7C)%5Cmathbf%20I%5C%7B%7Cu%7C%20%5Cleq%201%5C%7D%0A%5Cend%7Balign%7D%0A"></p>
</div>
</div>
<p>上記のカーネル関数は以下のような特徴があります</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?K(u)"> is symmetric</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cint%20k(u)du%20=%201">: KDEで推定された関数が密度関数であるための必要条件</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Clim_%7Bu%5Cto%5Cinfty%7Dk(u)%20=%20%5Clim_%7Bu%5Cto-%5Cinfty%7Dk(u)%20=%200"></li>
</ul>
<section id="カーネル関数別の密度関数推定結果の可視化" class="level3">
<h3 class="anchored" data-anchor-id="カーネル関数別の密度関数推定結果の可視化">カーネル関数別の密度関数推定結果の可視化</h3>
<p>カーネル密度関数推定量を</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%20f(x)%20=%20%5Cfrac%7B1%7D%7Bnh%7D%5Csum_%7Bi=1%7D%5En%20k%5Cleft(%5Cfrac%7BX_i%20-%20x%7D%7Bh%7D%5Cright)%0A"></p>
<p>として，それぞれのカーネル関数を用いた推定結果を以下可視化します．</p>
<div id="07ddc746" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.neighbors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KernelDensity</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># okabe-ito color</span></span>
<span id="cb1-7">color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E69F00"</span>,</span>
<span id="cb1-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#56B4E9"</span>,</span>
<span id="cb1-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#009E73"</span>,</span>
<span id="cb1-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#F0E442"</span>,</span>
<span id="cb1-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0072B2"</span>,</span>
<span id="cb1-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#D55E00"</span>,</span>
<span id="cb1-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#CC79A7"</span>,</span>
<span id="cb1-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>,</span>
<span id="cb1-16">]</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gaussian kernel function</span></span>
<span id="cb1-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gaussian_kernel(u):</span>
<span id="cb1-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> epanechnikov_kernel(u):</span>
<span id="cb1-25">    const <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> const <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb1-27"></span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> biweight_kernel(u):</span>
<span id="cb1-30">    const <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb1-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> const <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb1-32"></span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> uniform_kernel(u):</span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb1-36"></span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> triangular_kernel(u):</span>
<span id="cb1-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(u)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb1-40"></span>
<span id="cb1-41"></span>
<span id="cb1-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># KDE</span></span>
<span id="cb1-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> kde(x, data, bandwidth, kernel_func):</span>
<span id="cb1-44">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)</span>
<span id="cb1-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> bandwidth)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(kernel_func((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> bandwidth))</span>
<span id="cb1-46"></span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load Old Faithful dataset (from seaborn)</span></span>
<span id="cb1-49">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geyser"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modern version of faithful dataset</span></span>
<span id="cb1-50">waiting <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"waiting"</span>].dropna().values</span>
<span id="cb1-51"></span>
<span id="cb1-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot kernels</span></span>
<span id="cb1-53">u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb1-54">x_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-55">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb1-56"></span>
<span id="cb1-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gaussian</span></span>
<span id="cb1-58">kde_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: kde(x, waiting, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, gaussian_kernel), x_plot))</span>
<span id="cb1-59">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(u, gaussian_kernel(u), color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-60">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-61">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gaussian Kernel"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-62">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(x_plot, kde_vals, color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-63">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-64">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geyser$waiting"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-65">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gaussian KDE with bandwidth: 0.5"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-66"></span>
<span id="cb1-67"></span>
<span id="cb1-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># epanechnikov</span></span>
<span id="cb1-69">kde_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: kde(x, waiting, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, epanechnikov_kernel), x_plot))</span>
<span id="cb1-70">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(u, epanechnikov_kernel(u), color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-71">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-72">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epanechnikov Kernel"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-73">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(x_plot, kde_vals, color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-74">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-75">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geyser$waiting"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-76">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epanechnikov KDE with bandwidth: 2"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-77"></span>
<span id="cb1-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Biweight</span></span>
<span id="cb1-79">kde_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: kde(x, waiting, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, biweight_kernel), x_plot))</span>
<span id="cb1-80">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(u, biweight_kernel(u), color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-81">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-82">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Biweight Kernel"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-83">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(x_plot, kde_vals, color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-84">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-85">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geyser$waiting"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-86">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Biweight KDE with bandwidth: 2"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-87"></span>
<span id="cb1-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Uniform</span></span>
<span id="cb1-89">kde_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: kde(x, waiting, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, uniform_kernel), x_plot))</span>
<span id="cb1-90">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(u, uniform_kernel(u), color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-91">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-92">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform Kernel"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-93">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(x_plot, kde_vals, color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-94">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-95">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geyser$waiting"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-96">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uniform KDE with bandwidth: 0.5"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-97"></span>
<span id="cb1-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Triangular</span></span>
<span id="cb1-99">kde_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: kde(x, waiting, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, triangular_kernel), x_plot))</span>
<span id="cb1-100">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(u, triangular_kernel(u), color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-101">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-102">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Triangular Kernel"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-103">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(x_plot, kde_vals, color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-104">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-105">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geyser$waiting"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-106">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Triangular KDE with bandwidth: 1.0"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb1-107"></span>
<span id="cb1-108">plt.show()</span></code></pre></div></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-12-kernel-function/index_files/figure-html/cell-2-output-1.png" width="1269" height="2302" class="figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>統計</category>
  <guid>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-12-kernel-function/</guid>
  <pubDate>Fri, 12 Sep 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Sambaの設定とiPad連携</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-05-samba/</link>
  <description><![CDATA[ 






<section id="sambaでできること" class="level2">
<h2 class="anchored" data-anchor-id="sambaでできること">Sambaでできること</h2>
<div id="def-" class="custom_problem blog-custom-border theorem definition">
<p><span class="theorem-title"><strong>Definition 1</strong></span> <span class="def-title">Samba</span></p>
<ul>
<li>LinuxホストをMicrosoftネットワークに参加できるようにするソフトウェア</li>
</ul>
</div>
<p>Sambaを使うことで，次のような機能が実現できます．</p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th>カテゴリ</th>
<th>機能</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>ファイル共有</strong></td>
<td>ディレクトリ共有</td>
<td>Windows から Linux/Unix のディレクトリにアクセス可能．読み取り専用／書き込み可の権限設定が可能・</td>
</tr>
<tr class="even">
<td></td>
<td>ファイルアクセス制御</td>
<td>ユーザー・グループごとのアクセス権を設定可能。</td>
</tr>
<tr class="odd">
<td><strong>プリンタ共有</strong></td>
<td>プリンタ共有</td>
<td>Linux/Unix に接続されたプリンタを Windows から利用可能．</td>
</tr>
<tr class="even">
<td></td>
<td>複数ユーザー対応</td>
<td>複数ユーザーでの共有プリンタ環境を構築可能．</td>
</tr>
<tr class="odd">
<td></td>
<td>プリンタドライバーの配布</td>
<td>Samba サーバに Windows 用プリンタドライバーを置いておくと，クライアント側で共有プリンタに接続するだけで自動インストールできる</td>
</tr>
<tr class="even">
<td><strong>ADメンバーサーバー</strong></td>
<td>ドメイン参加</td>
<td>Active Directoryを構成するメンバーサーバーになることが可能</td>
</tr>
<tr class="odd">
<td></td>
<td>ドメインコントローラ</td>
<td>Samba を AD 互換ドメインコントローラとして利用可能．ユーザー認証・グループ管理・ポリシー管理が可能．</td>
</tr>
<tr class="even">
<td></td>
<td>Kerberos 認証対応</td>
<td>シングルサインオン（SSO）で共有アクセスが可能</td>
</tr>
<tr class="odd">
<td><strong>バックアップ・サーバ</strong></td>
<td>ファイルサーバ機能</td>
<td>ネットワーク経由でバックアップやファイル共有が可能．</td>
</tr>
<tr class="even">
<td></td>
<td>自動バックアップ</td>
<td>rsync や cron と組み合わせて自動バックアップが可能．</td>
</tr>
<tr class="odd">
<td><strong>ホームディレクトリ提供</strong></td>
<td>ユーザーごとのホームディレクトリ</td>
<td>Windows ユーザーごとに自動マウント可能．</td>
</tr>
<tr class="even">
<td><strong>アクセスログ・監査</strong></td>
<td>ログ取得</td>
<td>どのユーザーがいつアクセスしたかのログを取得可能。監査やセキュリティ対策に活用可能。</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="sambaのインストール" class="level2">
<h2 class="anchored" data-anchor-id="sambaのインストール">Sambaのインストール</h2>
<p>apt経由で <code>samba</code> パッケージをインストールします</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> sudo apt install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> samba</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version check</span></span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> samba <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Version</span> 4.19.5-Ubuntu</span></code></pre></div></div>
<p><code>samba</code> は，ファイルサーバー，プリントサーバー，ユーザー管理を担うsmbdデーモン，名前解決を担うnmbdデーモンから構成されます． ファイヤーウォールを使っている場合は，Sambaを利用できるように次のような設定をします</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> sudo ufw allow samba</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rule</span> added</span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rule</span> added <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(v6)</span></span></code></pre></div></div>
<p>tailscaleを導入している場合は，tailscaleについてのファイヤーウォールを実施するだけでOKです．</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> sudo ufw allow in on tailscale0</span></code></pre></div></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Samba運用上の注意
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Samba サーバーは基本的に <span class="regmonkey-bold">LAN 内での運用</span>を前提(=企業や家庭内ネットワークなど，閉じたネットワークでの利用が基本)</li>
<li><span class="regmonkey-bold">インターネットサーバー上での動作は推奨されない</span></li>
<li>ADが使えるとはいえ，Windows Serverで実現できるすべての機能が実装されているわけではない</li>
</ul>
</div>
</div>
<p><span class="mini-section">各デーモンに対応する <code>systemctl</code> サービス</span></p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 29%">
<col style="width: 46%">
<col style="width: 23%">
</colgroup>
<thead>
<tr class="header">
<th>構成要素</th>
<th>担当機能</th>
<th>systemctl サービス名</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>smbd</strong></td>
<td>ファイル共有・プリント共有・ユーザー認証</td>
<td><code>smbd</code></td>
</tr>
<tr class="even">
<td><strong>nmbd</strong></td>
<td>名前解決</td>
<td><code>nmbd</code></td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="sambaの制御" class="level2">
<h2 class="anchored" data-anchor-id="sambaの制御">Sambaの制御</h2>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 40%">
<col style="width: 40%">
</colgroup>
<thead>
<tr class="header">
<th>サービス / デーモン</th>
<th>役割</th>
<th>コマンド</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>smbd</code></td>
<td>ファイル共有・プリンタ共有・ユーザー認証</td>
<td>起動: <code>sudo systemctl start smbd</code></td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>停止: <code>sudo systemctl stop smbd</code></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td>再起動: <code>sudo systemctl restart smbd</code></td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>自動起動有効: <code>sudo systemctl enable smbd</code></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td>自動起動無効: <code>sudo systemctl disable smbd</code></td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>状態確認: <code>sudo systemctl status smbd</code></td>
</tr>
<tr class="odd">
<td><code>nmbd</code></td>
<td>名前解決</td>
<td>起動: <code>sudo systemctl start nmbd</code></td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>停止: <code>sudo systemctl stop nmbd</code></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td>再起動: <code>sudo systemctl restart nmbd</code></td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>自動起動有効: <code>sudo systemctl enable nmbd</code></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td>自動起動無効: <code>sudo systemctl disable nmbd</code></td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>状態確認: <code>sudo systemctl status nmbd</code></td>
</tr>
<tr class="odd">
<td><code>samba</code></td>
<td>Samba AD DC サービス（AD ドメインコントローラ運用時）</td>
<td>起動: <code>sudo systemctl start samba</code></td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>停止: <code>sudo systemctl stop samba</code></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td>再起動: <code>sudo systemctl restart samba</code></td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>自動起動有効: <code>sudo systemctl enable samba</code></td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td>自動起動無効: <code>sudo systemctl disable samba</code></td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>状態確認: <code>sudo systemctl status samba</code></td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="sambaの設定" class="level2">
<h2 class="anchored" data-anchor-id="sambaの設定">Sambaの設定</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Samba設定の基本
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Sambaの主な設定は <code>/etc/samba/smb.conf</code> に記述する</li>
<li><code>smb.conf</code> は大きく分けて <code>[Global Settings]</code> と <code>[Share Definitions]</code> の２つから構成される</li>
<li><code>[Global Settings]</code>: Sambaサーバーの全般的な設定をする部分．この部分を変更した場合はSambaサーバーの再起動が必要</li>
<li><code>[Share Definitions]</code>: ファイル共有やプリンター共有を設定する部分</li>
</ul>
</div>
</div>
<p><code>/etc/samba/smb.conf</code> を編集するときは <code>sudo cp -a smb.conf smb.conf.default</code> なり <code>.bak</code> 拡張子を用いてバックアップをしておくと安全です．</p>
<p><span class="mini-section"><code>smb.conf</code> Syntax</span></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">parameter </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> value</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># commentout line begins with # or ;</span></span></code></pre></div></div>
<p><span class="mini-section"><code>global</code>の設定項目</span></p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 35%">
<col style="width: 40%">
</colgroup>
<thead>
<tr class="header">
<th>項目</th>
<th>説明</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>workgroup</code></td>
<td>Windows ネットワーク上のワークグループ名を指定</td>
<td><code>WORKGROUP</code></td>
</tr>
<tr class="even">
<td><code>server string</code></td>
<td>サーバーの説明文（ネットワークブラウザに表示される）</td>
<td><code>Samba Server</code></td>
</tr>
<tr class="odd">
<td><code>log file</code></td>
<td>ログファイルの出力場所</td>
<td><code>/var/log/samba/log.%m</code></td>
</tr>
<tr class="even">
<td><code>max log size</code></td>
<td>ログファイルの最大サイズ (KB)</td>
<td><code>1000</code></td>
</tr>
<tr class="odd">
<td><code>server role</code></td>
<td>サーバーの役割．ファイルサーバーとして使う場合は<code>standalone server</code></td>
<td><code>standalone server</code> / <code>member server</code> / <code>active directory domain controller</code></td>
</tr>
<tr class="even">
<td><code>passdb backend</code></td>
<td>ユーザー認証DBの指定</td>
<td><code>tdbsam / ldapsam</code></td>
</tr>
<tr class="odd">
<td><code>unix password sync</code></td>
<td>Sambaユーザーアカウントのpassword変更をLinuxユーザーアカウントのpasswordにも反映</td>
<td><code>yes</code> / <code>no</code></td>
</tr>
<tr class="even">
<td><code>passwd program</code></td>
<td>Samba がパスワード変更要求を受けた際に，実行するコマンドを指定する</td>
<td><code>/usr/bin/passwd %u</code></td>
</tr>
<tr class="odd">
<td><code>passwd chat</code></td>
<td><code>passwd program</code> とやり取りする際の「対話プロンプトと応答パターン」を定義する</td>
<td><code>*New*password* %n\n *Retype*new*password* %n\n *password*updated*successfully*</code></td>
</tr>
<tr class="even">
<td><code>pam password change</code></td>
<td>有効にすると，password変更に<code>passwd program</code> に指定したコマンドではなくPAMを利用する</td>
<td><code>yes</code> / <code>no</code></td>
</tr>
</tbody>
</table>
</div>
<p><span class="mini-section"><code>Share Deinition</code>の設定項目</span></p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 35%">
<col style="width: 40%">
</colgroup>
<thead>
<tr class="header">
<th>項目</th>
<th>説明</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>path</code></td>
<td>実際に公開するディレクトリの絶対パス</td>
<td><code>/srv/samba/public</code></td>
</tr>
<tr class="even">
<td><code>comment</code></td>
<td>ネットワークブラウザに表示される説明文</td>
<td><code>Public Share</code></td>
</tr>
<tr class="odd">
<td><code>browseable</code></td>
<td>ネットワークブラウザに表示するか</td>
<td><code>yes</code> / <code>no</code></td>
</tr>
<tr class="even">
<td><code>read only</code></td>
<td>読み取り専用にするか</td>
<td><code>yes</code> / <code>no</code></td>
</tr>
<tr class="odd">
<td><code>writable</code></td>
<td><code>read only</code> の逆指定（同義語）</td>
<td><code>yes</code></td>
</tr>
<tr class="even">
<td><code>guest ok</code></td>
<td>認証なしでアクセスできるか</td>
<td><code>yes</code> / <code>no</code></td>
</tr>
<tr class="odd">
<td><code>valid users</code></td>
<td>アクセスを許可するユーザー/グループ</td>
<td><code>%S</code> とすればhome directoryのユーザーのみが自身のhome directoryにアクセスできる</td>
</tr>
<tr class="even">
<td><code>invalid users</code></td>
<td>アクセスを拒否するユーザー/グループ</td>
<td><code>@nogroup user2</code></td>
</tr>
<tr class="odd">
<td><code>create mask</code></td>
<td>新規ファイル作成時のパーミッションマスク</td>
<td><code>0644</code></td>
</tr>
<tr class="even">
<td><code>directory mask</code></td>
<td>新規ディレクトリ作成時のパーミッションマスク</td>
<td><code>0755</code></td>
</tr>
<tr class="odd">
<td><code>public</code></td>
<td><code>guest ok</code> の別名</td>
<td><code>yes</code> / <code>no</code></td>
</tr>
<tr class="even">
<td><code>locking</code></td>
<td>ファイルロックの使用有無</td>
<td><code>yes</code></td>
</tr>
<tr class="odd">
<td><code>printable</code></td>
<td>プリンタ共有として扱うか</td>
<td><code>no</code>（通常のフォルダ共有なら）</td>
</tr>
</tbody>
</table>
</div>
<p><span class="mini-section">構文チェック</span></p>
<p><code>testparm</code> コマンドを用いることでconfigファイルの構文チェックをすることができます</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> testparm <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Load</span> smb config files from /etc/samba/smb.conf</span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loaded</span> services file OK.</span>
<span id="cb5-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span></code></pre></div></div>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 21%">
<col style="width: 36%">
<col style="width: 41%">
</colgroup>
<thead>
<tr class="header">
<th>オプション</th>
<th>説明</th>
<th>例 / 補足</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>-s</code></td>
<td><strong>短い形式で表示</strong>（冗長な情報を省略し、主要な設定のみを出力）</td>
<td><code>testparm -s</code></td>
</tr>
<tr class="even">
<td><code>-v</code></td>
<td><strong>詳細表示</strong>（全設定、コメントやデフォルト値も含む）</td>
<td><code>testparm -v</code></td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="共有の作成" class="level2">
<h2 class="anchored" data-anchor-id="共有の作成">共有の作成</h2>
<p>iPadからtailscale経由でアクセス可能な共有ディレクトリを指定したいと思います．</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[server-hdd]</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">comment </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 2TB sized hdd</span></span>
<span id="cb6-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">path </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> /media/kirby/DATA/</span></span>
<span id="cb6-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">browsable </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yes</span></span>
<span id="cb6-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">writable </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yes</span></span>
<span id="cb6-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">guest ok </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">no</span></span>
<span id="cb6-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">printable </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">no</span></span>
<span id="cb6-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">valid users </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> dedede kirby</span></span></code></pre></div></div>
<p>と指定すると <code>server-hdd</code> を共有名として <code>path</code> を公開することができます．設定が完了したら</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> sudo systemctl restart smbd</span></code></pre></div></div>
<p>を実施します．</p>
<p><span class="mini-section">iPadからのアクセス設定</span></p>
<p>Tailscaleをつないでいるならば自動的に名前解決してくれます．手順は以下です．</p>
<ol type="1">
<li>Tailscale管理画面から共有設定したサーバーの名前を調べる(例: <code>dsserver</code>)</li>
<li><code>ファイル</code> から右上の３点マークの設定を開く</li>
<li>「サーバーへ接続」を開き以下の書式で入力する</li>
</ol>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb8-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">smb://dsserver/</span></span></code></pre></div></div>
<p>その後，Sambaユーザー名とSambaパスワード等が要求されますが，それは <code>smb.conf</code> の設定に合わせて入力してください．</p>
<p><span class="mini-section">only readable errorが出る場合</span></p>
<p>原因としてストーレージのフォーマットにiOSが対応していないことが考えられます． iOSの標準ファイルシステムサポートは <code>APFS</code> / <code>HFS+</code> / <code>FAT32</code> / <code>exFAT</code> に限られ，<code>NTFS</code>は基本的には読み取り専用になってしまいます．</p>
<p>マウントしてもread-onlyの場合は，ファイルシステムのフォーマットを確認してみてください． もし，<code>NTFS</code>であるならば中身を退避して，サーバー側でフォーマットを以下のコマンドで書き換えてしまいます</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> sudo mkfs.exfat <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>任意の名前<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /dev/sda1</span></code></pre></div></div>
<p>その後，サーバー側で再度以下のコマンドでmountを実施し，sambaの設定をすればOKです</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> mount <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> exfat <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> uid=1000,gid=1000,fmask=000,dmask=000 /dev/sda1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>mount-point-path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div></div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Warning</span>exfatの問題点
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>モバイルを含む複数のOSでreadable and writableで使用するなら<code>exFAT</code> のほうが取り回しは効きます</li>
<li>一方，ジャーナル機能やファイル圧縮，暗号化への対応はされていないので，セキュリティ面を重視するならば利用は控えたほうが良いです</li>
</ul>
</div>
</div>
</section>
<section id="nautilusでsamba共有フォルダをmountする" class="level2">
<h2 class="anchored" data-anchor-id="nautilusでsamba共有フォルダをmountする">NautilusでSamba共有フォルダをmountする</h2>
<p>基本的にはiPadでの設定と同じ手順です</p>
<p><span class="mini-section">section</span></p>
<p>Tailscaleをつないでいるならば自動的に名前解決してくれます．手順は以下です．</p>
<ol type="1">
<li>Tailscale管理画面から共有設定したサーバーの名前を調べる(例: <code>dsserver</code>)</li>
<li>Nautilusを開く</li>
<li><code>+ Other Locations</code> をクリックし，以下の書式でconnection設定を行う</li>
</ol>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb11-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">smb://dsserver/</span></span></code></pre></div></div>
<p>その後，Sambaユーザー名とSambaパスワード等が要求されますが，それは <code>smb.conf</code> の設定に合わせて入力する．</p>
<section id="vscodeでフォルダの中身を編集する" class="level3">
<h3 class="anchored" data-anchor-id="vscodeでフォルダの中身を編集する">VSCodeでフォルダの中身を編集する</h3>
<p>一度，Nautilus経由でSamba共有フォルダへのアクセス設定すると，<code>GVfs</code> が <code>/run/user/&lt;userid&gt;/gvfs/</code> 以下に次のような仮想ディレクトリを作成します：</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb12-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">/run/user/1000/gvfs/smb-share:server</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;server-name&gt;,share=&lt;share-folder-name&gt;/</span></span></code></pre></div></div>
<p>これはFUSE(Filesystem in Userspace)経由のマウントなので，GVfsに非対応のコマンドラインツールでは直接編集できない場合があります． Samba共有フォルダを対象にCLI操作なり開発をしたい場合は <code>~/Desktop/</code> などの通常のマウントポイントにマウントするか <strong>シンボリックリンク（<code>ln -s</code>）</strong> で操作できるようにするという選択肢があります．</p>
<p>GVfsのマウントはセッションごとに作られるため，シンボリックリンクでは動作が不安定になる可能性がありますが，一時的なそうなの場合は十分です．</p>
<p><span class="mini-section">シンボリックリンクの作り方</span></p>
<p>デスクトップの <code>project</code> フォルダをクリックすると Samba 共有へ飛ぶようするには以下のスクリプトを実行します：</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ln</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> /run/user/1000/gvfs/smb-share:server=fileserver,share=project ~/Desktop/project</span></code></pre></div></div>
<p><span class="mini-section">cifs mountの実施</span></p>
<p>とあるPATH上に credential情報を格納したファイル(例: <code>.cifs-credentials</code>)を以下のように設定します</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb14-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">username</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">hoshino-kirby</span></span>
<span id="cb14-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">password</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">pupupuland</span></span></code></pre></div></div>
<p>上記はSambaで設定したユーザー情報です．これを<code>/etc/.cifs-credentials</code> に格納した場合， 以下のコマンドでSamba共有フォルダを通常のマウントポイント(例: <code>~/Desktop/sandbox/</code>)にマウントすることができます</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> sudo mount <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> cifs //<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>server-global-ip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>samba foldaname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ~/Desktop/sandbox/ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb15-2">-o credentials=/etc/.cifs-credentials,iocharset=utf8,uid=<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>uid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>,gid=<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>gid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>,vers=3.0</span></code></pre></div></div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Remarks
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><code>uid</code>と<code>gid</code>はクライアント側のvalueを入力します．確認したい場合は <code>id</code> コマンドを活用してください．</li>
<li><code>-13</code> エラーコードを履く場合，<code>sudo apt install cifs-utils</code> を実行してから再度試してください</li>
</ul>
</div>
</div>
</section>
</section>
<section id="appendix-microsoftネットワーク" class="level2">
<h2 class="anchored" data-anchor-id="appendix-microsoftネットワーク">Appendix: Microsoftネットワーク</h2>
<p>Microsoftネットワークは「ワークグループ」という基本単位でネットワークに参加するPCを論理的にまとめて管理しています． Windowsコンピューターでは，所属するワークグループ名を設定するだけで，そのワークグループへ参加することができます．</p>
<p><span class="mini-section">ワークグループの管理方式</span></p>
<p>ワークグループ自体は分散型管理が基本で，ユーザーアカウントやパスワードをそれぞれのコンピューターで管理します．もう一つの方法として， ドメインネットワークを利用したドメインコントローラーというサーバーによる集中管理する方法もあります．</p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 21%">
<col style="width: 42%">
<col style="width: 35%">
</colgroup>
<thead>
<tr class="header">
<th>項目</th>
<th>ワークグループ（分散型）</th>
<th>ドメイン（中央管理）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>管理方式</td>
<td>分散型</td>
<td>集中管理型</td>
</tr>
<tr class="even">
<td>ユーザー管理</td>
<td>各PCごと</td>
<td>ドメインコントローラー(DC)で一元管理</td>
</tr>
<tr class="odd">
<td>規模</td>
<td>小規模</td>
<td>中～大規模</td>
</tr>
<tr class="even">
<td>必要設備</td>
<td>PCのみ</td>
<td>DCサーバー必要</td>
</tr>
</tbody>
</table>
</div>
<p>ドメインネットワークを利用する場合は以下の手順で認証が行われます</p>
<ol type="1">
<li>ユーザーのPCがシステム起動するとき「ドメインログイン」を行い，その認証情報がDCに送られる</li>
<li>DCがユーザー名とパスワードを照合し，認証を行う</li>
<li>DCによる認証をパスすると，ドメインネットワークへのアクセスが許可される</li>
</ol>
<p>ドメインネットワークでは，一度認証をパスすれば，ドメイン内のサーバーへアクセスする際，個々に認証をする必要はありません．そのため，大規模なネットワークを運用する場合に便利な機能です．</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">%%{init: {"theme":"default"}}%%
architecture-beta
    group wg(cloud)[Workgroup]

    service pc1(server)[PC1] in wg
    service pc2(server)[PC2] in wg
    service pc3(server)[PC3] in wg
    service pc4(server)[PC4] in wg

    pc1:B -- T:pc2
    pc2:L -- R:pc3
    pc1:R -- L:pc3
    pc3:T -- B:pc4
    pc4:R -- L:pc1
    pc4:B -- T:pc2

    group domain(cloud)[Domain]

    service dc(database)[Domain Controller] in domain
    service dpc1(server)[PC5] in domain
    service dpc2(server)[PC6] in domain
    service dpc3(server)[PC7] in domain

    dpc1:B -- T:dc
    dpc2:L -- R:dc
    dpc3:T -- B:dc
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p><span class="mini-section">アクティブディレクトリ（Active Directory, AD）</span></p>
<div id="def-" class="custom_problem blog-custom-border theorem definition">
<p><span class="theorem-title"><strong>Definition 2</strong></span> <span class="def-title">アクティブディレクトリ</span></p>
<ul>
<li>ユーザーやグループなどのリソースを一元管理するディレクトリサービス</li>
<li>ディレクトリアクセスプロトコルとしてLDAPを利用</li>
<li>ホスト名の名前解決にDNSを利用</li>
<li>認証システムにKerberosを利用</li>
</ul>
</div>


</section>

 ]]></description>
  <category>環境構築</category>
  <category>Linux</category>
  <guid>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-05-samba/</guid>
  <pubDate>Fri, 05 Sep 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Thesis Statementの書き方</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-02-thesis-statement/</link>
  <description><![CDATA[ 






<section id="thesis-statementとは" class="level2">
<h2 class="anchored" data-anchor-id="thesis-statementとは">Thesis Statementとは？</h2>
<div id="def-" class="custom_problem blog-custom-border theorem definition">
<p><span class="theorem-title"><strong>Definition 1</strong></span> <span class="def-title">論文ステートメント(Thesis Statement)</span></p>
<ul>
<li>分析プロジェクトにおいて，ベースとなる主張(Argument)/立場(Position)を簡潔に示したもの</li>
<li>単なる事実の記述ではなく，反論可能（arguable / contestable）な主張であること</li>
</ul>
</div>
<p><span class="mini-section">Thesis Statement と 研究計画書 の違い</span></p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 10%">
<col style="width: 45%">
<col style="width: 45%">
</colgroup>
<thead>
<tr class="header">
<th>項目</th>
<th>Thesis Statement</th>
<th>研究計画書 (Research Proposal)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>目的</strong></td>
<td>分析プロジェクトにおける <strong>中心的な主張を提示</strong></td>
<td>研究を実施するための <strong>背景・目的・方法・意義を説明</strong></td>
</tr>
<tr class="even">
<td><strong>長さ</strong></td>
<td>1〜2文</td>
<td>数ページ〜十数ページ</td>
</tr>
<tr class="odd">
<td><strong>位置づけ</strong></td>
<td>論文本文の冒頭に配置し，論理展開の「背骨」になる</td>
<td>プロジェクトの開始前に提出される「実行計画書」</td>
</tr>
<tr class="even">
<td><strong>内容</strong></td>
<td>- テーマに対する立場（position）<br>- 主張の根拠の方向性（x, y, z）</td>
<td>- 研究背景・問題設定<br>- 先行研究レビュー<br>- 研究課題・仮説<br>- 方法・データ<br>- 期待される成果・貢献<br>- 研究スケジュール</td>
</tr>
<tr class="odd">
<td><strong>性質</strong></td>
<td>宣言的（「私はこう主張する」）</td>
<td>計画的（「私はこう研究する予定だ」）</td>
</tr>
</tbody>
</table>
</div>
<section id="thesis-statementの目的" class="level3">
<h3 class="anchored" data-anchor-id="thesis-statementの目的">Thesis Statementの目的</h3>
<ul>
<li>読者に対して「論文が何を主張するか」「なぜ重要か」を示す</li>
<li>論文や研究が何にフォーカスしているのかを示す</li>
<li>主張を証明するにあたって，研究がどのようなロジック・構成となるのかを示す</li>
</ul>
</section>
</section>
<section id="thesis-statementの書き方" class="level2">
<h2 class="anchored" data-anchor-id="thesis-statementの書き方">Thesis Statementの書き方</h2>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>(1) Research Questionから始める
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>まず，自分が明らかにしたい問い（Research Question）を定める</li>
<li>RQは「Yes/No」で答えられる形，あるいは「AとBの関係はどうか？」という形式が望ましい</li>
<li>なぜ定義したResearch Questionが重要なのか？どのような貢献があるのか？を記述する</li>
</ul>
</div>
</div>
<div id="exm-" class="custom_problem theorem example">
<p><span class="theorem-title"><strong>Example 1</strong></span> <span class="def-title">Research Question例</span></p>
<ul>
<li>例（経済学）: Does an increase in minimum wage reduce employment in the service sector?</li>
<li>例（ML）: Can Physics-Informed ML outperform black-box ML under small sample regimes?</li>
</ul>
</div>
<hr>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>(2) 立場（Position）を明確にする
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>その問いに対して自分はどの立場を取るのかを一文で表現する</li>
<li>「私の仮説は〜である」よりも，「〜である」と断定的に書く方がThesis Statementらしい</li>
<li>形式や文字数よりも 主張の明確さと論理的整合性が重要</li>
</ul>
</div>
</div>
<div id="exm-" class="custom_problem theorem example">
<p><span class="theorem-title"><strong>Example 2</strong></span> <span class="def-title">記述とポジショニングの違い</span></p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th>❌ Not a thesis（事実や説明だけ）</th>
<th>✅ Possible thesis（主張・立場がある）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>空は青い．</td>
<td>空が青く見えるのは，大気上層における光と化学的相互作用の複雑な影響によるものである．</td>
</tr>
<tr class="even">
<td>ハリー・ポッターはJ.K.ローリングによって書かれた本である．</td>
<td>『ハリー・ポッター』は，マグルと魔法界の関係性を通じて偏見の理解に影響を与え，一世代の価値観を形成した本である．</td>
</tr>
<tr class="odd">
<td>テリー・フォックスはカナダ史において重要な人物である．</td>
<td>テリー・フォックスは，他のどのカナダ人よりも医学研究に大きな影響を与えてきた．</td>
</tr>
</tbody>
</table>
</div>
</div>
<hr>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>(3) 主張の根拠の方向性を示す
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>「なぜその主張を支持できるのか」の論拠を簡潔に述べる</li>
<li>どのようなロジックを用いる予定なのか，読者にイメージを与える</li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>(4) Statementの記述タイミング
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Thesis Statement は柔軟で分析や思考の過程に合わせて発展させるもの</li>
<li>執筆中に修正しても構わない，むしろ推奨される</li>
</ul>
</div>
</div>
<section id="thesis-statement-チェックリスト" class="level3">
<h3 class="anchored" data-anchor-id="thesis-statement-チェックリスト">Thesis Statement チェックリスト</h3>
<ul class="task-list">
<li><label><input type="checkbox"><strong>1. Arguable（論争可能か）</strong> : 主張が単なる事実ではなく、読者が賛否を考えられる内容か</label></li>
<li><label><input type="checkbox"><strong>2. Specific（具体性）</strong> : 主張が抽象的すぎず、論文内で十分に証明可能な焦点を持っている</label></li>
<li><label><input type="checkbox"><strong>3. Constructs / Variables（構成要素の明確化）</strong> : 研究対象や変数、概念が明確に示されているか</label></li>
<li><label><input type="checkbox"><strong>4. Relationship / Claim（関係・主張の明確化）</strong> : 構成要素間の関係や立場が具体的に述べられているか</label></li>
<li><label><input type="checkbox"><strong>5. Scope（論文の範囲に適合しているか）</strong> : 論文の長さ・範囲内で十分に議論・証明可能か</label></li>
<li><label><input type="checkbox"><strong>6. Significance / “So what?”（意義が示されているか）</strong> : なぜこの主張が重要なのか、読者が関心を持つ理由が示されている</label></li>
<li><label><input type="checkbox"><strong>7. Roadmap（論文の展開を予告しているか）</strong> : サブポイントや分析の方向性が簡単に示されているか</label></li>
<li><label><input type="checkbox"><strong>8. Clarity / Precision（明確さと正確さ）</strong> : キーワード・動詞・文の構造が明確で理解しやすいか</label></li>
<li><label><input type="checkbox"><strong>9. Tentative / Flexible（暫定的に作成しているか）</strong> : 初稿で完璧でなくてもよい。執筆中に修正可能か</label></li>
<li><label><input type="checkbox"><strong>10. Length（長さの適切さ）</strong> : 1〜2文、または複雑な場合は段落で表現可能か</label></li>
</ul>
</section>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://www.lib.sfu.ca/about/branches-depts/slc/writing/argumentation/thesis-statements">Simon Fraser University &gt; Writing thesis statements</a></li>
</ul>


</section>

 ]]></description>
  <category>方法論</category>
  <guid>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-09-02-thesis-statement/</guid>
  <pubDate>Tue, 02 Sep 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Bias-Variance Tradeoff</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-08-27-bias-variance-tradeoff/</link>
  <description><![CDATA[ 






<section id="統計的推測とbias-variance-tradeoff" class="level2">
<h2 class="anchored" data-anchor-id="統計的推測とbias-variance-tradeoff">統計的推測とBias-Variance Tradeoff</h2>
<section id="bias-variance-mse-and-rmse" class="level3">
<h3 class="anchored" data-anchor-id="bias-variance-mse-and-rmse">Bias, variance, MSE and RMSE</h3>
<p>何かしらのパラメータ <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> の推定量の性質を考えるとき，基本的には推定誤差</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%5Ctheta%20-%20%5Ctheta%0A"></p>
<p>の分布についてまず考えます．この評価手法の１例としてRMSEが挙げられます．</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7BRMSE%7D%20=%20%5Csqrt%7B%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B(%5Chat%5Ctheta%20-%20%5Ctheta)%5E2%5D%7D%0A"></p>
<p>RMSEの単位は <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> の単位と同じなので，誤差のスケールを直感的に理解しやすいというメリットがあります．ただし，推定量の性質を考えるときはMSEのほうが取り回しが良いときが多いのでMSEの次に考えます．</p>
<div id="def-" class="custom_problem blog-custom-border theorem definition">
<p><span class="theorem-title"><strong>Definition 1</strong></span> <span class="def-title">MSE</span></p>
<div class="math-scroll">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Coperatorname%7BMSE%7D%0A%20%20&amp;=%20%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B(%5Chat%5Ctheta%20-%20%5Ctheta)%5E2%5D%20%5C%5C%0A%20%20&amp;=%20%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B(%5Chat%5Ctheta%20-%20%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B%5Chat%5Ctheta%5D%20+%20%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B%5Chat%5Ctheta%5D%20-%20%5Ctheta)%5E2%5D%20%5C%5C%0A%20%20&amp;=%20%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B(%5Chat%5Ctheta%20-%20%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B%5Chat%5Ctheta%5D)%5E2%5D%20+%20%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B(%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B%5Chat%5Ctheta%5D%20-%20%5Ctheta)%5E2%5D%20+%202%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B(%5Chat%5Ctheta%20-%20%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B%5Chat%5Ctheta%5D)(%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B%5Chat%5Ctheta%5D%20-%20%5Ctheta)%5D%20%5C%5C%0A%20%20&amp;=%20%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B(%5Chat%5Ctheta%20-%20%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B%5Chat%5Ctheta%5D)%5E2%5D%20+%20(%5Cmathbb%20E_%7B%5Cpmb%5Ctheta%7D%5B%5Chat%5Ctheta%5D%20-%20%5Ctheta)%5E2%20%5C%5C%0A%20%20&amp;=%20%5Coperatorname%7BVariance%7D%20+%20%5Coperatorname%7BBias%7D%5E2%0A%5Cend%7Balign%7D%0A"></p>
</div>
</div>
<p>上記の定義よりMSEは以下のように分解されます</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7BMSE%7D%20=%20%5Coperatorname%7BVariance%7D%20+%20%5Coperatorname%7BBias%7D%5E2%0A"></p>
<div id="exm-1" class="custom_problem theorem example">
<p><span class="theorem-title"><strong>Example 1</strong></span> <br></p>
<p><img src="https://latex.codecogs.com/png.latex?%5C%7BX_1,%20%5Ccdots,%20X_n%5C%7D"> がなにかしらの分布 <img src="https://latex.codecogs.com/png.latex?D(%5Cmu,%20%5Csigma)"> からのi.i.dサンプルだとします．なお，<img src="https://latex.codecogs.com/png.latex?%5Cmu%5Cneq%200">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E%5BX_i%5E4%5D%20%3C%20%5Cinfty"> とします．</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2"> の推定量の候補として</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma%5E2%20=%20%5Cmathbb%20E%5BX%5E2%5D%20-%20%5Cmathbb%20E%5BX%5D%5E2%0A"></p>
<p>であるので，</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Coverline%7BX%5E2%7D%20&amp;=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5En%20X_i%5E2%5C%5C%0A%5Coverline%7BX%7D%20&amp;=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5En%20X_i%5C%5C%0A%5Chat%5Csigma%5E2%20&amp;=%20%5Coverline%7BX%5E2%7D%20-%20%5Coverline%7BX%7D%5E2%0A%5Cend%7Balign%7D%0A"></p>
<p>このとき，</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cmathbb%20E%5B(%5Coverline%7BX%7D)%5E2%5D%0A%20%20&amp;=%20%5Coperatorname%7BVar%7D(%5Coverline%7BX%7D)%20+%20(%5Cmathbb%20E%5B%5Coverline%7BX%7D%5D)%5E2%5C%5C%0A%20%20&amp;=%20%5Cfrac%7B1%7D%7Bn%7D%5Csigma%5E2%20+%20%5Cmu%5E2%0A%5Cend%7Balign%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cmathbb%20E%5B%5Coverline%7BX%5E2%7D%5D%0A%20%20&amp;=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5En%5Cmathbb%20E%5BX_i%5E2%5D%5C%5C%0A%20%20&amp;=%20%5Csigma%5E2%20+%20%5Cmu%5E2%0A%5Cend%7Balign%7D%0A"></p>
<p>従って，<img src="https://latex.codecogs.com/png.latex?%5Chat%5Csigma%5E2"> のBiasは</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cmathbb%20E%5B%5Chat%5Csigma%5E2%5D%20-%20%5Csigma%5E2%0A%20%20&amp;=%20%5Cmathbb%20E%5B%5Coverline%7BX%5E2%7D%5D%20-%20%5Cmathbb%20E%5B(%5Coverline%7BX%7D)%5E2%5D%20-%20%5Csigma%5E2%5C%5C%0A%20%20&amp;=%20%5Csigma%5E2%20+%20%5Cmu%5E2%20-%20%5Cfrac%7B1%7D%7Bn%7D%5Csigma%5E2%20-%20%5Cmu%5E2%20%5Csigma%5E2%5C%5C%0A%20%20&amp;=%20-%20%5Cfrac%7B1%7D%7Bn%7D%5Csigma%5E2%0A%5Cend%7Balign%7D%0A"></p>
<p>一方，<img src="https://latex.codecogs.com/png.latex?%5Chat%5Csigma%5E2"> のVarianceは，Delta methodを用いた漸近近似により</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Coperatorname%7BVar%7D(%5Chat%5Csigma%5E2)%0A%20%20&amp;=%20%5Coperatorname%7BVar%7D(%5Coverline%7BX%5E2%7D)%20+%20%5Coperatorname%7BVar%7D(%5Coverline%7BX%7D%5E2)%5C%5C%0A%20%20&amp;%5Capprox%20%20%5Cfrac%7B1%7D%7Bn%7D%5Coperatorname%7BVar%7D(X_i%5E2)%20+%20(2%5Cmu)%5E2%5Cfrac%7B%5Csigma%5E2%7D%7Bn%7D%5C%5C%0A%20%20&amp;=%20%5Cmathcal%7BO%7D(n%5E%7B-1%7D)%0A%5Cend%7Balign%7D%0A"></p>
<div id="rem-" class="custom_problem blog-custom-border proof remark">
<p><span class="proof-title"><em>Remark 1</em>. </span><br></p>
<p>Large Samplesの場合は，</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BVariance%7D"> は <img src="https://latex.codecogs.com/png.latex?1/n"> の速さで小さくなる</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BBias%7D%5E2"> は <img src="https://latex.codecogs.com/png.latex?1/n%5E2"> の速さで小さくなる</li>
</ul>
<p>以上より <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BMSE%7D"> を最小化したい場合はvarianceの方を小さくするのが有効であることがわかる．</p>
</div>
</div>
<hr>
<div id="exm-" class="custom_problem theorem example">
<p><span class="theorem-title"><strong>Example 2</strong></span> <span class="def-title">MSEの比較</span></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5C%7BX_1,%20%5Ccdots,%20X_n%5C%7D%20%5Coverset%7B%5Cmathrm%7Biid%7D%7D%7B%5Csim%7D%20N(%5Cmu,%20%5Csigma%5E2)%20%5Clabel%7Beq-exm%7D%0A%5Cend%7Balign%7D%0A"></p>
<p>としたとき，<img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2"> のunbiased estimatorとして</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AS%5E2%20=%20%5Cfrac%7B1%7D%7Bn-1%7D%5Csum_%7Bi=1%7D%5En%20(X_i%20-%20%5Coverline%7BX%7D)%5E2%20%5Clabel%7Beq-exm-2%7D%0A"></p>
<p>が考えられます．このとき，かんたんな計算により Example&nbsp;1 の推定量との関係として</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AS%5E2%20=%20%5Cfrac%7Bn%7D%7Bn-1%7D%5Chat%5Csigma%5E2%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Beq-exm%7D"> と <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Beq-exm-2%7D"> より</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(n-1)%5Cfrac%7BS%5E2%7D%7B%5Csigma%5E2%7D%20%5Csim%20%5Coperatorname%7B%5Cchi%5E2%7D(n-1)%0A"></p>
<p>従って，</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7BVar%7D(S%5E2)=%5Cfrac%7B2%7D%7Bn-1%7D%5Csigma%5E4%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BMSE%7D(S%5E2)"> と <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BMSE%7D(%5Chat%5Csigma%5E2)"> を比較すると，</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Coperatorname%7BMSE%7D(%5Chat%5Csigma%5E2)%0A%20%20&amp;=%20%5Cmathbb%20E%5B(%5Chat%5Csigma%5E2%20-%20%5Csigma%5E2)%5E2%5D%5C%5C%0A%20%20&amp;=%20%5Cfrac%7B2(n-1)%7D%7Bn%5E2%7D%5Csigma%5E4%20+%20%5Cfrac%7B1%7D%7Bn%5E2%7D%5Csigma%5E4%5C%5C%0A%20%20&amp;=%20%5Cfrac%7B2n-1%7D%7Bn%5E2%7D%5Csigma%5E4%5C%5C%0A%20%20&amp;%3C%20%5Cfrac%7B2%7D%7Bn-1%7D%5Csigma%5E4%5C%5C%0A%20%20&amp;=%20%5Coperatorname%7BVar%7D(S%5E2)%5C%5C%0A%20%20&amp;=%20%5Coperatorname%7BMSE%7D(S%5E2)%0A%5Cend%7Balign%7D%0A"></p>
</div>
<hr>
</section>
</section>
<section id="cef-decomposition-property" class="level2">
<h2 class="anchored" data-anchor-id="cef-decomposition-property">CEF Decomposition Property</h2>
<div id="thm-" class="custom_problem blog-custom-border theorem">
<p><span class="theorem-title"><strong>Theorem 1</strong></span> <span class="def-title">CEF Decomposition Property</span></p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY_i%20=%20%5Cmathbb%20E%5BY_i%7CX_i%5D%20+%20%5Cepsilon_i%0A"></p>
<div class="roman-list">
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E%5B%5Cepsilon_i%20%7C%20X_i%5D%20=%200">: <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_i"> is mean independent of <img src="https://latex.codecogs.com/png.latex?X_i"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cepsilon_i"> is uncorrelated with any function of <img src="https://latex.codecogs.com/png.latex?X_i"></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Proof (i)
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cmathbb%20E%5B%5Cepsilon_i%20%7C%20X_i%5D%0A%20%20&amp;=%20%5Cmathbb%20E%5BY_i%20-%20%5Cmathbb%20E%5BY_i%7CX_i%5D%7CX_i%5D%5C%5C%5B3pt%5D%0A%20%20&amp;=%20%5Cmathbb%20E%5BY_i%7CX_i%5D%20-%20%5Cmathbb%20E%5BY_i%7CX_i%5D%5C%5C%5B3pt%5D%0A%20%20&amp;=%200%0A%5Cend%7Balign%7D%0A"></p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Proof (ii)
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p><img src="https://latex.codecogs.com/png.latex?b(X_i)"> を <img src="https://latex.codecogs.com/png.latex?X_i"> についての任意の関数とするとき</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cmathbb%20E%5Bb(X_i)%5Cepsilon%5D%0A%20%20&amp;=%20%5Cmathbb%20E%5B%5Cmathbb%20E%5Bb(X_i)%5Cepsilon%20%7C%20X_i%5D%5D%5C%5C%0A%20%20&amp;=%20%5Cmathbb%20E%5Bb(X_i)%5Cmathbb%20E%5B%5Cepsilon%20%7C%20X_i%5D%5D%5C%5C%0A%20%20&amp;=%200%0A%5Cend%7Balign%7D%0A"></p>
<p>従って，<img src="https://latex.codecogs.com/png.latex?X_i"> についての任意の関数と <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_i"> は無相関(uncorrelated, orthogonal)であることがわかる．</p>
</div>
</div>
</div>
<div id="thm-" class="custom_problem blog-custom-border theorem">
<p><span class="theorem-title"><strong>Theorem 2</strong></span> <span class="def-title">CEFとMSE</span></p>
<p><img src="https://latex.codecogs.com/png.latex?m(X_i)"> を <img src="https://latex.codecogs.com/png.latex?X_i"> の関数とするとき，</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E%5BY_i%20%7C%20X_i%5D%0A%20%20=%20%5Cunderset%7Bm(X_i)%7D%7B%5Carg%5Cmin%7D%5Cmathbb%20E%5B(Y_i%20-%20m(X_i))%5E2%5D%0A"></p>
<p>つまり，<img src="https://latex.codecogs.com/png.latex?%5Cmathbb%20E%5BY_i%20%7C%20X_i%5D"> は <img src="https://latex.codecogs.com/png.latex?X_i"> で条件づけた <img src="https://latex.codecogs.com/png.latex?Y_i"> の予測関数についてのMinimum Mean Squared Error(MMSE) である．</p>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Proof
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<div class="math-scroll">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A(Y_i%20-%20m(X_i))%5E2%0A%20%20&amp;=%20(Y_i%20-%20%5Cmathbb%20E%5BY_i%20%7C%20X_i%5D%20+%20%5Cmathbb%20E%5BY_i%20%7C%20X_i%5D%20-%20m(X_i))%5E2%5C%5C%0A%20%20&amp;=%20(Y_i%20-%20%5Cmathbb%20E%5BY_i%20%7C%20X_i%5D)%5E2%20+%202(Y_i%20-%20%5Cmathbb%20E%5BY_i%20%7C%20X_i%5D)(%5Cmathbb%20E%5BY_i%20%7C%20X_i%5D%20-%20m(X_i))%5E2%20+%20(%5Cmathbb%20E%5BY_i%20%7C%20X_i%5D%20-%20m(X_i))%5E2%5C%5C%0A%20%20&amp;=%20%5Cepsilon%5E2%20+%202%5Cepsilon(%5Cmathbb%20E%5BY_i%20%7C%20X_i%5D%20-%20m(X_i))%20+%20(%5Cmathbb%20E%5BY_i%20%7C%20X_i%5D%20-%20m(X_i))%5E2%0A%5Cend%7Balign%7D%0A"></p>
</div>
<p>期待値を取ると</p>
<div class="math-scroll">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%20E%5B(Y_i%20-%20m(X_i))%5E2%5D%20=%20%5Cmathbb%20E%5B%5Cepsilon_i%5E2%5D%20+%20%5Cmathbb%20E%5B(%5Cmathbb%20E%5BY_i%20%7C%20X_i%5D%20-%20m(X_i))%5E2%5D%0A"></p>
</div>
<p>従って，</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%5BY_i%20%7C%20X_i%5D%20=%20m(X_i)%0A"></p>
<p>のときMSEの意味で <img src="https://latex.codecogs.com/png.latex?E%5BY_i%20%7C%20X_i%5D"> が最小化関数であることがわかる．</p>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>統計</category>
  <guid>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-08-27-bias-variance-tradeoff/</guid>
  <pubDate>Wed, 27 Aug 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>シェルスクリプト用のUnit Testingフレームワーク: Bats</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-08-26-bats-core/</link>
  <description><![CDATA[ 






<section id="batsとは" class="level2">
<h2 class="anchored" data-anchor-id="batsとは">Batsとは？</h2>
<ul>
<li>Batsとは，TAP準拠のBash用テストフレームワーク</li>
<li>Bash 3.2以上をカバー</li>
</ul>
<section id="basic-bats-command-syntax" class="level3">
<h3 class="anchored" data-anchor-id="basic-bats-command-syntax">Basic Bats command syntax</h3>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run a single test file</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bats</span> test.bats</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run all tests in a directory</span></span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bats</span> test/</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run tests recursively</span></span>
<span id="cb1-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bats</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> test/</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run tests in parallel (requires GNU parallel)</span></span>
<span id="cb1-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bats</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--jobs</span> 4 test/</span></code></pre></div></div>
</section>
</section>
<section id="installation-via-git-submodule-add" class="level2">
<h2 class="anchored" data-anchor-id="installation-via-git-submodule-add">Installation via <code>git submodule add</code></h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Bats Version
</div>
</div>
<div class="callout-body-container callout-body">
<p>2025-08-28時点で下記の方法でインストールすると <code>Bats 1.12.0</code> がインストールされます</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> bats <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Bats</span> 1.12.0</span></code></pre></div></div>
</div>
</div>
<p>Repository Rootで以下のコマンドを実行します</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> submodule add https://github.com/bats-core/bats-core.git test/bats</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> submodule add https://github.com/bats-core/bats-support.git test/test_helper/bats-support</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> submodule add https://github.com/bats-core/bats-assert.git test/test_helper/bats-assert</span></code></pre></div></div>
<p>結果として以下のような構成になります</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">script/</span></span>
<span id="cb4-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bazaar_zen.sh</span></span>
<span id="cb4-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">test/</span></span>
<span id="cb4-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bats/</span>               <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>- submodule</span>
<span id="cb4-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">test_helper/</span></span>
<span id="cb4-7">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bats-support/</span>   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>- submodule</span>
<span id="cb4-8">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bats-assert/</span>    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>- submodule</span>
<span id="cb4-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">test.bats</span></span></code></pre></div></div>
<p>ユニットテスト用のファイルは上記の例では <code>test.bats</code> にあります． このファイルを編集することでユニットテストケースを設定していきます．</p>
<p><span class="mini-section">Optional: パラレル処理</span></p>
<p>Batsはデフォルトではシリアルにテストを実行していきますが，<code>--jobs</code> を指定することでパラレル処理も実行可能です． ただし，パラレル処理のときはテストの実行順番は保証されないことに注意が必要です．</p>
<p>この処理を実現するためには <a href="https://www.gnu.org/software/parallel/">GNU parallel</a> が必要です．</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> parallel</span></code></pre></div></div>
</section>
<section id="bats-unit-testing" class="level2">
<h2 class="anchored" data-anchor-id="bats-unit-testing">Bats Unit Testing</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Key Points
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>テストファイルのshebangは <code>#!/usr/bin/env bats</code> と設定すること</li>
<li>テストファイルは <code>.bats</code> 拡張子で終わること</li>
<li>テストが <code>return 0</code> で終了するとそのテストは成功と扱われる．それ以外(<code>return 1</code>)は失敗</li>
<li>test descriptionは絶対記載すること</li>
<li>ヘルパー関数を除いて，基本的には標準的なshell syntaxに従って記述すること</li>
<li>テスト用環境の構築と削除に対応する関数 <code>setup</code>, <code>teardown</code>は活用すること</li>
<li><code>setup</code>, <code>teardown</code>はテストの前に呼ばれる必要がある</li>
<li><code>$BATS_TEST_FILENAME</code>変数はテストファイル名を格納した変数</li>
</ul>
</div>
</div>
<p>例として，シェルスクリプトレポジトリに次のような <code>bazaar_zen.sh</code> があるとします</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-euo</span> pipefail</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># error if any arguments are passed</span></span>
<span id="cb6-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$#</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-ne</span> 0 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb6-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Usage: no arguments allowed"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-8">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb6-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;EOF</span></span>
<span id="cb6-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. Every good work of software starts by scratching a developer's personal itch.</span></span>
<span id="cb6-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. Good programmers know what to write. Great ones know what to rewrite (and reuse).</span></span>
<span id="cb6-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. Plan to throw one away; you will, anyhow.</span></span>
<span id="cb6-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">4. If you have the right attitude, interesting problems will find you.</span></span>
<span id="cb6-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">5. When you lose interest in a program, your last duty to it is to hand it off to a competent successor.</span></span>
<span id="cb6-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">6. Treating your users as co-developers is your least-hassle route to rapid code improvement and effective debugging.</span></span>
<span id="cb6-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">7. Release early. Release often. And listen to your customers.</span></span>
<span id="cb6-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">8. Given a large enough beta-tester and co-developer base, almost every problem will be characterized quickly and the fix obvious to someone.</span></span>
<span id="cb6-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">9. Smart data structures and dumb code works a lot better than the other way around.</span></span>
<span id="cb6-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">10. If you treat your beta-testers as if they're your most valuable resource, they will respond by becoming your most valuable resource.</span></span>
<span id="cb6-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">11. The next best thing to having good ideas is recognizing good ideas from your users. Sometimes the latter is better.</span></span>
<span id="cb6-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">12. Often, the most striking and innovative solutions come from realizing that your concept of the problem was wrong.</span></span>
<span id="cb6-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">13. Perfection (in design) is achieved not when there is nothing more to add, but rather when there is nothing more to take away.</span></span>
<span id="cb6-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">14. Any tool should be useful in the expected way, but a truly great tool lends itself to uses you never expected.</span></span>
<span id="cb6-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">15. When writing gateway software of any kind, take pains to disturb the data stream as little as possible and never throw away information unless the recipient forces you to!</span></span>
<span id="cb6-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">16. When your language is nowhere near Turing-complete, syntactic sugar can be your friend.</span></span>
<span id="cb6-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">17. A security system is only as secure as its secret. Beware of pseudo-secrets.</span></span>
<span id="cb6-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">18. To solve an interesting problem, start by finding a problem that is interesting to you.</span></span>
<span id="cb6-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">19. Provided the development coordinator has a communications medium at least as good as the Internet, and knows how to lead without coercion, many heads are inevitably better than one.</span></span>
<span id="cb6-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">EOF</span></span></code></pre></div></div>
<p>これは，プログラミング哲学を標準出力するだけのスクリプトです．</p>
<p><span class="mini-section">Unit Test方針</span></p>
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 6%">
<col style="width: 18%">
<col style="width: 34%">
<col style="width: 40%">
</colgroup>
<thead>
<tr class="header">
<th>Test No</th>
<th>確認観点</th>
<th>方法・コマンド例</th>
<th>意図・理由</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><strong>基本動作の確認</strong></td>
<td><code>run ./script.sh</code> → <code>status -eq 0</code></td>
<td>スクリプトが正常終了するか（最低限の「実行可能性」の担保）</td>
</tr>
<tr class="even">
<td>2</td>
<td><strong>行数の検証</strong></td>
<td><code>wc -l &lt;&lt;&lt; "$output"</code> → <code>-eq 19</code></td>
<td>出力が仕様通りの行数（19行）か確認し，欠落や余分な行がないことを保証</td>
</tr>
<tr class="odd">
<td>3</td>
<td><strong>先頭行の確認</strong></td>
<td><code>head -n 1 &lt;&lt;&lt; "$output"</code> → 部分一致</td>
<td>最初の行が期待通り始まっているかを確認し，仕様崩れを防止</td>
</tr>
<tr class="even">
<td>4</td>
<td><strong>末尾行の確認</strong></td>
<td><code>tail -n 1 &lt;&lt;&lt; "$output"</code> → 部分一致</td>
<td>最後の行が期待通り終わっているかを確認し，途中での欠落や追加を防止</td>
</tr>
<tr class="odd">
<td>5</td>
<td><strong>引数エラーの確認</strong></td>
<td><code>run ./script.sh unexpected_arg</code> → <code>status -ne 0</code></td>
<td>不正な引数が与えられたときにエラー終了することを確認し，誤用を防止</td>
</tr>
</tbody>
</table>
</div>
<p><span class="mini-section">Unit Testの実装</span></p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Key Points
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><code>setup()</code> にて，各テストケースに共通の設定を実施．今回は，スクリプトのPATHを通したのみ</li>
<li><code>@test</code> グループの記述が個別のテストケースに相当</li>
</ul>
</div>
</div>
<p>テストファイル <code>test_bazaar_zen.bats</code> の実装場所は以下を想定しています</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">repository root</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">├── script</span></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">│   └── bazaar_zen.sh</span></span>
<span id="cb7-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">└── test</span></span>
<span id="cb7-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    ├── bats</span></span>
<span id="cb7-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    ├── test_for_script</span></span>
<span id="cb7-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    │   └── test_bazaar_zen.bats</span></span>
<span id="cb7-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">    └── test_helper</span></span></code></pre></div></div>
<p>この構成の下，テストファイルを以下のように定義します</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bats</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">setup() {</span></span>
<span id="cb8-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  load '../test_helper/bats-support/load'</span></span>
<span id="cb8-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  load '../test_helper/bats-assert/load'</span></span>
<span id="cb8-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the containing directory of this file</span></span>
<span id="cb8-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use $BATS_TEST_FILENAME instead of ${BASH_SOURCE[0]} or $0,</span></span>
<span id="cb8-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as those will point to the bats executable's location or the preprocessed file respectively</span></span>
<span id="cb8-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  DIR</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$(cd "$(dirname "$BATS_TEST_FILENAME")" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pwd)"</span></span>
<span id="cb8-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb8-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make executables in script/ visible to PATH</span></span>
<span id="cb8-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  OLD_PATH</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$PATH</span></span>
<span id="cb8-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  PATH</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$DIR/../../script:$PATH"</span></span>
<span id="cb8-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">teardown() {</span></span>
<span id="cb8-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PATHを元に戻す</span></span>
<span id="cb8-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  PATH</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$OLD_PATH</span></span>
<span id="cb8-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-20"></span>
<span id="cb8-21"></span>
<span id="cb8-22"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">@test "bazaar_zen.sh runs successfully" {</span></span>
<span id="cb8-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  run bazaar_zen.sh</span></span>
<span id="cb8-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  assert_success</span></span>
<span id="cb8-25"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-26"></span>
<span id="cb8-27"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">@test "outputs 19 lines" {</span></span>
<span id="cb8-28"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  run bazaar_zen.sh</span></span>
<span id="cb8-29"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  line_count</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$(echo "$output" | wc -l)</span></span>
<span id="cb8-30"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[ "$line_count" -eq 19 ]</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> || { </span></span>
<span id="cb8-31"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">      echo "FAILED: Expected 19 lines but got $line_count" &gt;&amp;2</span></span>
<span id="cb8-32"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">      return 1</span></span>
<span id="cb8-33"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  }</span></span>
<span id="cb8-34"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-35"></span>
<span id="cb8-36"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">@test "first line is correct" {</span></span>
<span id="cb8-37"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  run bazaar_zen.sh</span></span>
<span id="cb8-38"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  assert_line --index 0 --partial "1. Every good work of software starts"</span></span>
<span id="cb8-39"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-40"></span>
<span id="cb8-41"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">@test "last line is correct" {</span></span>
<span id="cb8-42"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  run bazaar_zen.sh</span></span>
<span id="cb8-43"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  assert_line --index -1 --partial "many heads are inevitably better than one"</span></span>
<span id="cb8-44"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-45"></span>
<span id="cb8-46"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">@test "rules.sh fails with unexpected args" {</span></span>
<span id="cb8-47"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  run bazaar_zen.sh unexpected_arg</span></span>
<span id="cb8-48"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  assert_failure</span></span>
<span id="cb8-49"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  assert_output --partial "Usage: no arguments allowed"</span></span>
<span id="cb8-50"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<p><span class="mini-section">Unit testの実行</span></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> bats test/test_for_script</span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">test_bazaar_zen.bats</span></span>
<span id="cb9-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">✓</span> bazaar_zen.sh runs successfully</span>
<span id="cb9-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">✓</span> outputs 19 lines</span>
<span id="cb9-5"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">✓</span> first line is correct</span>
<span id="cb9-6"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">✓</span> last line is correct</span></code></pre></div></div>
<p>一つ以上のテストがFAILEDの場合は以下のような出力になります</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%</span> bats test/test_for_script</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">test_bazaar_zen.bats</span></span>
<span id="cb10-3"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">✓</span> bazaar-zen runs successfully</span>
<span id="cb10-4"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">✗</span> outputs 19 lines</span>
<span id="cb10-5">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">test</span> file test/test_for_script/test_bazaar-zen.bats, line 33<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb10-6">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' failed</span></span>
<span id="cb10-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   FAILED: Expected 19 lines but got 18</span></span>
<span id="cb10-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ✓ first line is correct</span></span>
<span id="cb10-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ✓ last line is correct</span></span>
<span id="cb10-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ✓ rules.sh fails with unexpected args</span></span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">5 tests, 1 failure</span></span></code></pre></div></div>
<section id="setup-関数とteardown関数" class="level3">
<h3 class="anchored" data-anchor-id="setup-関数とteardown関数"><code>setup</code> 関数と<code>teardown</code>関数</h3>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>目的
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><code>assert_success</code>などのヘルパー関数のload</li>
<li>テストしたいシェルスクリプト <code>bazaar_zen.sh</code> へのPATHをbatsテスト環境用に定義する</li>
<li>テスト終了後に環境用に定義した設定を破棄する</li>
</ul>
</div>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb11-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">setup() {</span></span>
<span id="cb11-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  load '../test_helper/bats-support/load'</span></span>
<span id="cb11-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  load '../test_helper/bats-assert/load'</span></span>
<span id="cb11-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the containing directory of this file</span></span>
<span id="cb11-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use $BATS_TEST_FILENAME instead of ${BASH_SOURCE[0]} or $0,</span></span>
<span id="cb11-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as those will point to the bats executable's location or the preprocessed file respectively</span></span>
<span id="cb11-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  DIR</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$(cd "$(dirname "$BATS_TEST_FILENAME")" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pwd)"</span></span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make executables in script/ visible to PATH</span></span>
<span id="cb11-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  OLD_PATH</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$PATH</span></span>
<span id="cb11-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  PATH</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$DIR/../../script:$PATH"</span></span>
<span id="cb11-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">teardown() {</span></span>
<span id="cb11-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PATHを元に戻す</span></span>
<span id="cb11-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  PATH</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$OLD_PATH</span></span>
<span id="cb11-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<p>すべての関数が終わったタイミングで，その実行ステータスに関わらず<code>teardown</code>関数は実行されます．</p>
</section>
<section id="各テストケース" class="level3">
<h3 class="anchored" data-anchor-id="各テストケース">各テストケース</h3>
<p><span class="mini-section">1: スクリプトが正常終了するか（最低限の「実行可能性」の担保）</span></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb12-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">@test "bazaar-zen runs successfully" {</span></span>
<span id="cb12-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  run bazaar_zen.sh</span></span>
<span id="cb12-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  assert_success</span></span>
<span id="cb12-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<ul>
<li><code>@test</code> 以下の<code>"bazaar-zen runs successfully"</code> がtest description</li>
<li><code>assert_success</code>は<code>run</code>コマンドが成功したときのステータスが<code>0</code>かどうかを検証</li>
</ul>
<p><span class="mini-section">2: 出力が仕様通りの行数（19行）か確認し，欠落や余分な行がないことを保証</span></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb13-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">@test "outputs 19 lines" {</span></span>
<span id="cb13-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  run bazaar_zen.sh_</span></span>
<span id="cb13-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  line_count</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$(echo "$output" | wc -l)</span></span>
<span id="cb13-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[ "$line_count" -eq 19 ]</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> || { </span></span>
<span id="cb13-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">      echo "FAILED: Expected 19 lines but got $line_count" &gt;&amp;2</span></span>
<span id="cb13-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">      return 1</span></span>
<span id="cb13-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  }</span></span>
<span id="cb13-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<ul>
<li><code>run command</code>の実行結果は <code>$output</code> 変数に格納されます</li>
<li><code>$output</code>に対して，通常のshell操作で露わに変数を作り，その変数をベースにテストを実行することができます</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span><code>run</code> コマンドに生成される変数
</div>
</div>
<div class="callout-body-container callout-body">
<div class="no-border-top-table">
<table class="caption-top table">
<colgroup>
<col style="width: 7%">
<col style="width: 37%">
<col style="width: 54%">
</colgroup>
<thead>
<tr class="header">
<th>変数名</th>
<th>説明</th>
<th>例・用途</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>$status</code></td>
<td>実行したコマンドの <strong>終了ステータス</strong>（整数）</td>
<td><code>assert_success</code> → <code>$status -eq 0</code> の確認に利用</td>
</tr>
<tr class="even">
<td><code>$output</code></td>
<td>実行したコマンドの <strong>標準出力＋標準エラー出力</strong>を文字列で保持</td>
<td>出力全体を一括で検証するときに使用（例：<code>assert_output "OK"</code>）</td>
</tr>
<tr class="odd">
<td><code>$lines</code></td>
<td><code>$output</code> を <strong>改行ごとに分割した配列</strong></td>
<td>個別行を確認するときに使用（例：<code>assert_equal "${lines[0]}" "header"</code>）</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><span class="mini-section">3: 先頭行の確認</span></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb14-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">@test "first line is correct" {</span></span>
<span id="cb14-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  run bazaar_zen.sh</span></span>
<span id="cb14-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  assert_line --index 0 --partial "1. Every good work of software starts"</span></span>
<span id="cb14-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<ul>
<li><code>assert_line --index 0</code>で<code>$output</code>変数の1行目について，<code>assert</code>検証が実行できる</li>
<li><code>--partial</code>は部分一致の意味</li>
</ul>
<p><span class="mini-section">4: 末尾行の確認</span></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb15-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">@test "last line is correct" {</span></span>
<span id="cb15-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  run bazaar_zen.sh</span></span>
<span id="cb15-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  assert_line --index -1 --partial "many heads are inevitably better than one"</span></span>
<span id="cb15-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<ul>
<li><code>assert_line --index -1</code>で<code>$output</code>変数の最終行目について，<code>assert</code>検証が実行できる</li>
</ul>
<p><span class="mini-section">5: 引数エラーの確認</span></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb16-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">@test "rules.sh fails with unexpected args" {</span></span>
<span id="cb16-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  run bazaar_zen.sh unexpected_arg</span></span>
<span id="cb16-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  assert_failure</span></span>
<span id="cb16-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  assert_output --partial "Usage: no arguments allowed"</span></span>
<span id="cb16-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<ul>
<li><code>assert_failure</code> で<code>$status</code>が<code>0</code>意外であるかどうかを検証</li>
<li><code>assert_output</code>は<code>$output</code>変数全体について，<code>assert</code>検証</li>
</ul>
</section>
</section>
<section id="個人用セットアップ" class="level2">
<h2 class="anchored" data-anchor-id="個人用セットアップ">個人用セットアップ</h2>
<p><span class="mini-section">Aliasの設定</span></p>
<p>基本的に<code>git submodule</code>経由で使用することを想定しているので，<code>.zshrc</code> に以下のようなAliasを設定します</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode zsh code-with-copy"><code class="sourceCode zsh"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">alias</span> bats=<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$(git rev-parse --show-toplevel)/test/bats/bin/bats'</span></span></code></pre></div></div>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://bats-core.readthedocs.io/en/stable/index.html">bats-core</a></li>
</ul>


</section>

 ]]></description>
  <category>環境構築</category>
  <category>shell</category>
  <guid>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-08-26-bats-core/</guid>
  <pubDate>Tue, 26 Aug 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Columnar Storageの特徴</title>
  <dc:creator>Ryo Nakagami</dc:creator>
  <link>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-08-25-columnar-storage/</link>
  <description><![CDATA[ 






<section id="columnar-storageの特徴" class="level2">
<h2 class="anchored" data-anchor-id="columnar-storageの特徴">Columnar Storageの特徴</h2>
<div id="def-" class="custom_problem blog-custom-border theorem definition">
<p><span class="theorem-title"><strong>Definition 1</strong></span> <span class="def-title">Columnar Storage</span></p>
<ul>
<li>1つのレコードをcolumn valuesグループ毎に分割し，それぞれを異なるストレージ領域に格納する技術</li>
<li>従来のデータベースは通常，レコード全体を1つのストレージ領域に格納する</li>
<li>ファイルフォーマットまで着目すると，column-based formatの例としてParquetがある</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-08-25-columnar-storage/columnar-storage.png" class="img-fluid figure-img"></p>
<figcaption>Columnar storage image</figcaption>
</figure>
</div>
</div>
<p><span class="mini-section">Columnar Storageの特徴</span></p>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>1: 通信量の最小化
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>クエリ実行時に，必要な列の値だけがスキャンされ，転送される</li>
<li><code>SELECT title FROM foo</code>は，<code>title</code> 列の値だけにアクセスする</li>
<li><code>SELECT * FROM foo</code> だと結局ずべてのストーレージ領域に対してアクセスしてしまい，columnar-storageのメリットが活かせなくなる</li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>2: 高い圧縮率
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>従来のrow-based storageはおおよそ 1:3 の圧縮に対して，Column storageは 1:10 の圧縮率を達成できるとされる(see <a href="http://cs-www.cs.yale.edu/homes/dna/talks/Column_Store_Tutorial_VLDB09.pdf">here</a>)</li>
<li>Columnには似通った値が並ぶため傾向があるため（特に列のcardinalityが低い場合），row-based storageよりも高い圧縮率を得やすい</li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-important no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Important</span>3: 更新処理の非効率性
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>既存レコードの更新に弱く，1つのレコードを更新する場合でも列ごとに分割して保存されているため，複数のストレージ領域へアクセスする必要がある</li>
<li>row-based storageだとrowが１つのストレージ領域へ保存されるので，更新時のアクセスは１つのストレージ領域で済む</li>
</ul>
</div>
</div>
<div id="exm-" class="custom_problem theorem example">
<p><span class="theorem-title"><strong>Example 1</strong></span> <span class="def-title">columnar storage vs row-based storage</span></p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">SNO  PRICE CITY    SNAME</span></span>
<span id="cb1-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">---  ------ ----    -----</span></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">S1       20 London  Smith</span></span>
<span id="cb1-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">S2       10 Paris   Jones</span></span>
<span id="cb1-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">S3       30 Paris   Blake</span></span>
<span id="cb1-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">S4       20 London  Clark</span></span>
<span id="cb1-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">S5       30 Athens  Adams</span></span></code></pre></div></div>
<p>というような <code>FOO</code> テーブルを考えます．シンプルなColumnar storageの場合，以下のように<code>;</code>で区切られたグループ毎にストーレージ領域に保存します</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">S1S2S3S4S5;2010302030;LondonParisParisLondonAthens;SmithJonesBlakeClarkAdams </span></span></code></pre></div></div>
<p>一方，row-based storageの場合</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">S120LondonSmith;S210ParisJones;S330ParisBlake;S420LondonClark;S530AthensAdams</span></span></code></pre></div></div>
<p>それぞれのstorageパターンに対して</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> CITY, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(PRICE) </span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> FOO </span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> CITY;</span></code></pre></div></div>
<p>というクエリを実行すると</p>
<ul>
<li>Row-based storage: 全列(=不要列（SNO, SNAME）もI/O)を毎回読み込んでから，PRICE と CITY を抽出して集計</li>
<li>Columnar storage: 必要な列だけ読み込む．集計系クエリで圧倒的に速い</li>
</ul>
</div>
<hr>
<div id="exm-" class="custom_problem theorem example">
<p><span class="theorem-title"><strong>Example 2</strong></span> <span class="def-title">row-based storageの方が効率が良い場合</span></p>
<p>次のようなSELECT文ではrow-based storageの方が効率的な可能性があります</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> SomeTable</span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> col_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>;</span></code></pre></div></div>
<p><code>col_a = 'A'</code> の条件によってレコード数を大きく絞り込めたとしても，columnar storageの場合は結局 <code>SELECT *</code> によってすべての列にアクセスする必要があります． <code>col_1</code> がインデックスを持つ場合だと，インデックス探索で <code>col_1 = 'A'</code> の行位置を即座に特定してから必要なストーレージ領域のみ読み込めば良いので，効率的なスキャンが期待できます．</p>
</div>
<hr>
</section>
<section id="columnar-storageとlimit句" class="level2">
<h2 class="anchored" data-anchor-id="columnar-storageとlimit句">Columnar storageと<code>LIMIT</code>句</h2>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">table</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LIMIT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>;</span></code></pre></div></div>
<p>と実行するとColumnar storage型のBigQueryでもPostgreSQLでも，返す行は最大 10 行と結果の行数を制限するという意味では同じです． ただし，クエリ実行計画まで着目するとその挙動に差異があります．</p>
<p><span class="mini-section">BigQueryの場合</span></p>
<ul>
<li><code>LIMIT</code>はクエリで返す行数を制限する句</li>
<li><code>LIMIT</code>は「処理するデータ量」を制限するものではなく，最終的に返す行数を制御するだけ</li>
<li>そのため，<code>SELECT *</code> に <code>LIMIT</code> を付けても，テーブル全体が読み取られるため課金対象の量を減らすことはできない</li>
<li>結果件数だけ制御するだけで，処理量や課金は減らない</li>
</ul>
<p><span class="mini-section">PostgreSQLの場合</span></p>
<ul>
<li>Postgresは，row-basedデータベースで基本的に必要な行だけ返す</li>
<li><code>LIMIT</code>を付けると，クエリプランナーは「どのくらい行を読むか」を考慮するため，実際の処理コストは下がることが多い</li>
<li>結果件数だけでなく，実行計画にも効いて実際の処理量削減につながる余地がある</li>
</ul>
</section>
<section id="rerferences" class="level2">
<h2 class="anchored" data-anchor-id="rerferences">Rerferences</h2>
<ul>
<li><a href="http://cs-www.cs.yale.edu/homes/dna/talks/Column_Store_Tutorial_VLDB09.pdf">Column-Oriented Database Systems, Stavros Harizopoulos, Daniel Abadi, Peter Boncz, VLDB 2009 Tutorial</a></li>
<li><a href="https://cloud.google.com/bigquery/docs/best-practices-performance-compute?hl=ja">BigQuery &gt; Documentation &gt; クエリ計算を最適化する</a></li>
</ul>


</section>

 ]]></description>
  <category>SQL</category>
  <guid>https://ryonakagami.github.io/regmonkey-datascience-blog/posts/2025-08-25-columnar-storage/</guid>
  <pubDate>Mon, 25 Aug 2025 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
