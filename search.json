[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Regmonkey datascience blog",
    "section": "",
    "text": "All\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nCategories\n\n\nReading Time\n\n\n\n\n\n\n2025-02-19\n\n\nGroup毎に定義されたラグ変数の作成\n\n\npython\n\n\n9 min\n\n\n\n\n2025-02-14\n\n\n本日の詰将棋: Quiz 1~5\n\n\n詰将棋\n\n\n1 min\n\n\n\n\n2025-02-03\n\n\n関数の連続性\n\n\n解析\n\n\n7 min\n\n\n\n\n2025-02-02\n\n\n有限個の多項式のテイラー展開\n\n\n解析\n\n\n4 min\n\n\n\n\n2025-02-01\n\n\n18世紀までの関数論とテイラー展開\n\n\n解析\n\n\n5 min\n\n\n\n\n2025-01-30\n\n\n微分方程式を用いたToy models\n\n\n微分方程式\n\n\n5 min\n\n\n\n\n2025-01-29\n\n\nフーリエ級数と積分理論再考\n\n\nフーリエ変換\n\n\n4 min\n\n\n\n\n2025-01-28\n\n\n数理モデルの作り方\n\n\n方法論\n\n\n1 min\n\n\n\n\n2025-01-27\n\n\n指数関数の微分\n\n\n解析\n\n\n2 min\n\n\n\n\n2025-01-08\n\n\nBigQuery: TIME型カラムを指定したレベルで丸めて集計する\n\n\nsql\n\n\n2 min\n\n\n\n\n2024-12-17\n\n\nFirefoxを用いたsocks5 proxyブラウザアクセス設定\n\n\nfirefox, network\n\n\n2 min\n\n\n\n\n2024-12-16\n\n\nmacOSへのssh接続\n\n\nssh\n\n\n1 min\n\n\n\n\n2024-12-11\n\n\nCloud StorageからExternal Tableの作成\n\n\nBigQuery\n\n\n2 min\n\n\n\n\n2024-12-07\n\n\nIPアドレス 0.0.0.0\n\n\nnetwork, quarto\n\n\n3 min\n\n\n\n\n\nNo matching items\n\n\n  \n\n\n\n\nDatascience\n\n前処理\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nCategories\n\n\nReading Time\n\n\n\n\n\n\n2025-02-19\n\n\nGroup毎に定義されたラグ変数の作成\n\n\npython\n\n\n9 min\n\n\n\n\n\nNo matching items\n\n\n\n\n\n数学\n\nGeneral\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nCategories\n\n\nReading Time\n\n\n\n\n\n\n2025-02-02\n\n\n有限個の多項式のテイラー展開\n\n\n解析\n\n\n4 min\n\n\n\n\n2025-01-30\n\n\n微分方程式を用いたToy models\n\n\n微分方程式\n\n\n5 min\n\n\n\n\n2025-01-28\n\n\n数理モデルの作り方\n\n\n方法論\n\n\n1 min\n\n\n\n\n2025-01-27\n\n\n指数関数の微分\n\n\n解析\n\n\n2 min\n\n\n\n\n\nNo matching items\n\n\n\n\n集合と位相 Series\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nCategories\n\n\nReading Time\n\n\n\n\n\n\n2025-02-03\n\n\n関数の連続性\n\n\n解析\n\n\n7 min\n\n\n\n\n2025-02-01\n\n\n18世紀までの関数論とテイラー展開\n\n\n解析\n\n\n5 min\n\n\n\n\n2025-01-29\n\n\nフーリエ級数と積分理論再考\n\n\nフーリエ変換\n\n\n4 min\n\n\n\n\n\nNo matching items\n\n\n\n\n\n将棋\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nCategories\n\n\nReading Time\n\n\n\n\n\n\n2025-02-14\n\n\n本日の詰将棋: Quiz 1~5\n\n\n詰将棋\n\n\n1 min\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2025-01-29-set-and-topology-series/index.html",
    "href": "posts/2025-01-29-set-and-topology-series/index.html",
    "title": "フーリエ級数と積分理論再考",
    "section": "",
    "text": "フーリエが熱伝導方程式の解をどのように求めたのか？\nどのような流れで積分の定義の再考につながったのか？\n\nを紹介します．"
  },
  {
    "objectID": "posts/2025-01-29-set-and-topology-series/index.html#このノートのスコープ",
    "href": "posts/2025-01-29-set-and-topology-series/index.html#このノートのスコープ",
    "title": "フーリエ級数と積分理論再考",
    "section": "",
    "text": "フーリエが熱伝導方程式の解をどのように求めたのか？\nどのような流れで積分の定義の再考につながったのか？\n\nを紹介します．"
  },
  {
    "objectID": "posts/2025-01-29-set-and-topology-series/index.html#熱伝導方程式",
    "href": "posts/2025-01-29-set-and-topology-series/index.html#熱伝導方程式",
    "title": "フーリエ級数と積分理論再考",
    "section": "熱伝導方程式",
    "text": "熱伝導方程式\n物体内に温度勾配が存在すると，高温部から低温部へ熱伝導（Heat conduction）により熱エネルギーが伝わります．\n\n\n\n\n\n\nFigure 1: 長さ\\(\\pi\\)の密度が一様な棒\n\n\n\nFigure 1 のような細長い密度が一定の棒が与えられたとします．\n\n左端を 0 として，ある点の位置を左端からの距離 \\(x\\) で表す\nある点 \\(x\\) における時刻 \\(t\\) での温度を \\(T(x, t)\\) で表す\n単位断面積を単位時間に通過する熱エネルギーを \\(q(x, t)\\) とする(=熱流密度)\n\nフーリエの法則より，熱流密度 \\(q(x, t)\\) は温度勾配 \\(\\displaystyle{\\frac{\\partial T(x, t)}{\\partial x}}\\) に比例するので\n\\[\nq(x, t) = -\\lambda \\frac{\\partial T(x, t)}{\\partial x} \\label{eq-fourier-law}\n\\]\n\n\\(\\lambda  &gt; 0\\): 熱伝導率，RHSに符号マイナスがついているのは，高温から低音へ熱が流れることを表してる\n熱伝導率: 物質によって定まる物性値, 熱伝導率が大きいと熱エネルギーがよく伝わり，熱伝導率が小さいと熱エネルギーを伝えにくい\n\n\\(\\eqref{eq-fourier-law}\\) で表される熱の流入から，比熱 \\(c &gt; 0\\), 密度 \\(\\rho  &gt; 0\\) を用いると温度変化 \\(\\Delta T(x, t)\\) は熱の流入と流出２要素から以下のように表されます\n\\[\n\\begin{align}\n\\Delta T(x, t) &= \\frac{1}{c\\rho\\Delta x}(q(x, t) - q(x + \\Delta x, t))\\Delta t\\\\\n\\Rightarrow \\frac{\\Delta T(x, t)}{\\Delta t} &= \\frac{1}{c\\rho\\Delta x}(q(x, t) - q(x + \\Delta x, t))\n\\end{align}\n\\]\nここで，\\(\\Delta t\\to 0, \\Delta x\\to 0\\) とすると\n\\[\n\\frac{\\partial T(x, t)}{\\partial t} = -\\frac{1}{c\\rho}\\frac{\\partial q(x, t)}{\\partial x} \\label{eq-heat-balance}\n\\]\n\\(\\eqref{eq-fourier-law}\\), \\(\\eqref{eq-heat-balance}\\) より\n\\[\n\\begin{align}\n\\frac{\\partial T(x, t)}{\\partial t}\n    &= -\\frac{1}{c\\rho}\\frac{\\partial}{\\partial x}\\left(-\\lambda \\frac{\\partial T(x, t)}{\\partial x} \\right)\\\\\n    &= \\frac{\\lambda}{c\\rho}\\frac{\\partial^2 T(x, t)}{\\partial x^2} \\label{eq-hce}\n\\end{align}\n\\tag{1}\\]\nこれを熱伝導方程式と呼びます．\\(\\displaystyle\\frac{\\lambda}{c\\rho}\\) は温度伝導率（温度拡散率）と呼ばれます．\n\n\n\n\n\n\n🍵 Green Tea Break: 比熱\n\n\n\n\n比熱とは 1kg の物質の温度を 1K （＝1℃）上げるのに必要な熱量のこと\n「温まりやすさ」 「冷めにくさ」 を表す物理量と理解できる\n\n例えば，水1kgの場合，1K 上げるのに必要な熱量は4186J"
  },
  {
    "objectID": "posts/2025-01-29-set-and-topology-series/index.html#熱伝導方程式とフーリエ級数",
    "href": "posts/2025-01-29-set-and-topology-series/index.html#熱伝導方程式とフーリエ級数",
    "title": "フーリエ級数と積分理論再考",
    "section": "熱伝導方程式とフーリエ級数",
    "text": "熱伝導方程式とフーリエ級数\n\n方程式: 熱伝導方程式\n境界条件: 棒の両端の温度を 0 に保つ\n初期条件: 初期状態(\\(t=0\\))における位置 \\(x\\) の温度が \\(f(x)\\) で与えられている\n\nという設定の下，温度 \\(T\\) の時間変化を求める問題を考えます．\n ▶  境界条件\n\\[\nT(0, t) = T(\\pi, t) = 0 \\qquad (t\\geq 0) \\label{eq-boundary}\n\\]\n ▶  初期条件\n\\[\nT(x, 0) = f(x) \\qquad (0 \\leq x \\leq \\pi) \\label{eq-init}\n\\]\n\n ▶  重ね合わせの原理\n熱伝導方程式は次のような性質があります\n\n\\(T_1, T_2\\) が \\(\\eqref{eq-hce}\\), \\(\\eqref{eq-boundary}\\) を満たすとき，\\(T_1 + T_2\\) も\\(\\eqref{eq-hce}\\), \\(\\eqref{eq-boundary}\\) を満たす\n\\(T\\) が \\(\\eqref{eq-hce}\\), \\(\\eqref{eq-boundary}\\) を満たすとき，その任意の定数倍 \\(kT\\) も\\(\\eqref{eq-hce}\\), \\(\\eqref{eq-boundary}\\) を満たす\n\nこれを重ね合わせの原理と呼びます．\n\n温度 \\(T\\) の時間変化を求める問題を解くにあたって，フーリエは重ね合わせの原理を活用して\n\n\\(\\eqref{eq-hce}\\), \\(\\eqref{eq-boundary}\\) を満たす関数の条件のうち，なるべく簡単な形のものを求める\n得られた簡単な形の関数を足し合わせることで，初期条件 \\(\\eqref{eq-init}\\) を満たす関数を作る\n\nという二段構えで解くことを考えました．簡単な形の関数としてフーリエが考えたのは変数分離型の関数です．\n\n変数分離\n変数分離型関数とは，位置 \\(x\\) 飲みの関数 \\(v(x)\\) と時刻 \\(t\\) のみの関数 \\(w(t)\\) の積\n\\[\nT(x, t) = v(x)w(t)\n\\]\nの形で表させる関数のことです．変数分離型を仮定すると熱伝導方程式は常微分方程式を用いて以下のように表せます\n\\[\n\\begin{align}\n\\frac{c\\rho}{\\lambda}\\frac{w^\\prime(t)}{w(t)} = \\frac{v^{\\prime\\prime}(x)}{v(x)}\n\\end{align}\n\\]\nLHSは\\(t\\)のみの関数，RHSは\\(x\\)飲みの関数であるので，方程式が恒等的に成り立つためには，両辺は定数でなければなりません．定数を \\(k\\) と表すと\n\\[\n\\begin{align}\nw^\\prime(t) &= k Aw(t)\\\\\nv^{\\prime\\prime}(t) &= k v(x)\n\\end{align}\n\\]\nなお \\(A = \\displaystyle\\frac{\\lambda}{c\\rho}\\) としています．\n ▶  \\(w(t)\\) について解く\n\\[\n\\begin{align}\n\\frac{dw(t)}{w(t)} &= k A dt\\\\\n\\int \\frac{dw(t)}{w(t)}dt &= \\int k A dt \\label{eq-cond}\\\\\n\\log(\\vert w(t)\\vert) &= k A t + C \\qquad (C\\text{: constant})\\\\\nw(t) &= \\alpha \\exp(k At)\\qquad (\\alpha = \\exp(C))\n\\end{align}\n\\]\n従って，\n\\[\n\\begin{align}\nw(t) = \\left\\{\\begin{array}{c}\n\\alpha\\exp(kAt) & (k \\neq 0)\\\\\n\\alpha & (k = 0)\n\\end{array}\\right.\n\\end{align}\n\\]\n ▶  \\(v(x)\\) について解く\n2次線形微分方程式において，\\(p, q\\) が定数のとき\n\\[\ny^{\\prime\\prime} + py^{\\prime} + q = 0\n\\]\nの一般解は特定方程式 \\(a^2 + pa + q =0\\) の解によって以下のように定まります\ncase 1: ２つの実数解 \\(\\hat a_1, \\hat a_2\\) を持つ場合\n\\[\ny = A\\exp(\\hat a_1 x) + B\\exp(\\hat a_2 x)\n\\]\ncase 2: ２つの虚数解 \\(\\hat a \\pm \\hat b i\\) を持つ場合\n\\[\ny = \\exp(\\hat a x)(A\\cos(\\hat b x) + B \\sin(\\hat b x))\n\\]\ncase 3: 重解 \\(\\hat a\\) を持つ場合\n\\[\ny = (Ax + B)\\exp(\\hat a x)\n\\]\n以上より，\n\\[\n\\begin{align}\nv(x) = \\left\\{\\begin{array}{c}\n\\beta \\exp(\\sqrt{k}x) + \\gamma \\exp(-\\sqrt{k}x) & \\text{if } k &gt; 0\\\\\n\\beta x + \\gamma & \\text{if } k = 0 \\\\\n\\beta\\cos(\\sqrt{\\vert k\\vert}x) + \\gamma\\sin(\\sqrt{\\vert k\\vert}x) & \\text{if } k &lt;0\n\\end{array}\\right.\n\\end{align}\n\\]\n境界条件および初期条件を満たすように係数 \\(\\alpha, \\beta, \\gamma\\) を定めれば，解が求まることになります．\n\n\nフーリエ級数の登場\n ▶  \\(k &gt; 0\\) のケース\n\\(\\eqref{eq-cond}\\) より，時間の経過とともに温度が無限大に大きくなることはないので \\(k&gt; 0\\) はありえないことが直感的に分かりますが，\\(k&gt; 0\\) と仮定したとき 境界条件を満たす \\(\\alpha, \\beta, \\gamma\\) が存在しないことを確認します．\n\\[\n\\begin{align}\nw(t) &= \\alpha\\exp(kAt) \\\\\nv(x) &= \\beta \\exp(\\sqrt{k}x) + \\gamma \\exp(-\\sqrt{k}x)\n\\end{align}\n\\]\n境界条件より\n\\[\n\\begin{align}\nv(0) &= \\beta + \\gamma = 0\\\\\nv(\\pi) &= \\beta\\exp(\\sqrt{k}\\pi) + \\gamma\\exp(-\\sqrt{k}\\pi) = 0\n\\end{align}\n\\]\nここから\n\\[\n\\beta(\\exp(\\sqrt{k}\\pi) - \\exp(-\\sqrt{k}\\pi)) = 0\n\\]\n従って，\n\\[\n\\begin{align}\n&\\beta = \\gamma = 0\\\\\n\\Rightarrow& v(x) =  0\n\\end{align}\n\\]\nこれは \\(f(x) = 0 \\ \\ \\forall x \\in [0, \\pi]\\) 以外の場合は初期条件を満たすことがない．\n ▶  \\(k = 0\\) のケース\n\\[\n\\begin{align}\nw(t) &= \\alpha\\\\\nv(x) &= \\beta x + \\gamma\n\\end{align}\n\\]\n境界条件を満たすためには \\(\\beta = \\gamma = 0\\) が必要になるが，\\(f(x) = 0 \\ \\ \\forall x \\in [0, \\pi]\\) 以外の場合は初期条件を満たすことがない．\n ▶  \\(k &lt; 0\\) のケース\n\\[\n\\begin{align}\nw(t) &= \\alpha\\exp(kAt) \\\\\nv(x) &= \\beta\\cos(\\sqrt{\\vert k\\vert}x) + \\gamma\\sin(\\sqrt{\\vert k\\vert}x)\n\\end{align}\n\\]\n境界条件より\n\\[\n\\begin{align}\n\\beta &= 0\\\\\n\\gamma\\sin(\\sqrt{\\vert k\\vert}\\pi) &= 0\n\\end{align}\n\\]\n\\(\\gamma= 0\\) だと初期条件を満たすことができないので，\\(\\gamma \\neq 0\\). このとき，\\(\\sqrt{\\vert k\\vert} \\in \\mathbb Z\\) が解の必要条件となることが分かる． ここで，\\(k = -n^2\\) と書き直すと\n\\[\n\\begin{align}\nT(x, t) = \\alpha\\exp(-n^2At) \\cdot \\gamma\\sin(n\\pi) \\label{eq-sol-candidate}\n\\end{align}\n\\]\nが境界条件を満たす変数分離型の解となるとこが分かります．重ね合わせの原理より \\(\\eqref{eq-sol-candidate}\\) の定数倍も境界条件と熱伝導方程式を満たす関数となります．\n重ね合わせの原理より \\(1 \\leq n \\leq N\\) の範囲で\n\\[\n\\sum_{n=1}^N a_n \\alpha\\exp(-n^2At) \\cdot \\gamma\\sin(n\\pi)\n\\]\nも境界条件と熱伝導方程式を満たす関数となります．ここでフーリエは次のような主張をしました：\n\n\\[\n\\sum_{n=1}^\\infty a_n \\alpha\\exp(-n^2At) \\cdot \\gamma\\sin(n\\pi)\n\\]\nも境界条件と熱伝導方程式を満たす関数となりえる\n\nここから初期条件を満たす関数を求めたいので, \\(t=0\\) とすると\n\\[\nf(x) = \\sum_{n=1}^\\infty b_n \\sin(n\\pi)\n\\]\nが成り立つように \\(\\{b_n\\}_{n=1}^\\infty\\) を定めれば良いとなります．このとき，正弦関数の積の積分公式\n\\[\n\\begin{align}\n\\int^{\\pi}_0\\sin nx \\sin mx dx =\\begin{cases}\n\\displaystyle 0 & (m\\neq n)\\\\[4pt]\n\\displaystyle \\frac{\\pi}{2} & (m = n)\n\\end{cases}\n\\end{align}\n\\]\n従って，\n\\[\n\\begin{align}\n\\int^{\\pi}_0f(x)\\sin mx\\ dx\n& = \\int^\\pi_0 \\sum_{n=1}^\\infty b_n \\sin(n\\pi) \\sin(m\\pi) dx\\\\\n&= \\sum_{n=1}^\\infty \\int^\\pi_0b_n \\sin(n\\pi) \\sin(m\\pi) dx\\\\\n&= \\frac{\\pi}{2}b_m\n\\end{align}\n\\]\nとなり，\n\\[\nb_n = \\frac{2}{\\pi}\\int^{\\pi}_0f(x)\\sin nx \\ dx\n\\]\nこのように求めた級数関数が変数分離型を仮定したときの熱伝導方程式の解となりうるとフーリエは主張しました． これがフーリエ級数の誕生です.\n\n\nフーリエ級数の問題点と積分理論再考へ\nフーリエ級数が登場初期には以下のような批判にさらされました:\n\nフーリエ級数が収束する保証はどこにあるのか？\n\\(0\\)から\\(\\pi\\)までの特定の一個の\\(x\\)について\\(f(x)\\)の値を変更しても積分の値には影響しないので異なる関数が同じフーリエ級数で表現されてしまうのではないか？\n無限級数の項別積分(無限和と積分の順序交換)ができる保証はどこにあるのか？\n\n無限和と積分の順序交換の批判とは，仮に熱分布関数\\(T(x, t)\\)がフーリエ級数の形式で表せることができたとしても\n\\[\n\\begin{align*}\n&\\int^\\pi_{-\\pi}\\sum_{k=1}^\\infty (a_k \\cos kx + b_k \\sin kx)\\cos nx\\ dx \\\\\n&=\\sum_{k=1}^\\infty \\left(a_k \\int^\\pi_{-\\pi}\\cos kx \\cos nx\\ dx + b_k \\int^\\pi_{-\\pi}\\sin kx \\cos nx\\ dx\\right)\n\\end{align*}\n\\]\nができる保証がないというものです. これはフーリエ級数のそれ自体の問題というよりかは\n\nどんな関数が積分可能か？\nどのようなときに項別積分ができるのか？\n\nという積分の定義・理論の問題です．フーリエの時代では積分の理論が十分なものではなく，微分の逆として積分が捉えられており，上記の問題に答えることができませんでした． 以上が，熱の変化という自然科学現象の解明のため提案されたフーリエ級数が数学理論，特に積分理論の再整備の必要性を促した流れとなります．"
  },
  {
    "objectID": "posts/2025-01-29-set-and-topology-series/index.html#appendix-正弦関数の積の積分公式の証明",
    "href": "posts/2025-01-29-set-and-topology-series/index.html#appendix-正弦関数の積の積分公式の証明",
    "title": "フーリエ級数と積分理論再考",
    "section": "Appendix: 正弦関数の積の積分公式の証明",
    "text": "Appendix: 正弦関数の積の積分公式の証明\n\n\nExercise 1 \n\\(n,k\\)をそれぞれ自然数としたとき\n\\[\n\\begin{align}\n\\int^{\\pi}_0\\sin nx \\sin kx dx =\\begin{cases}\n\\displaystyle 0 & (k\\neq n)\\\\[4pt]\n\\displaystyle \\frac{\\pi}{2} & (k = n)\n\\end{cases}\n\\end{align}\n\\]\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n積和の公式より\n\\[\n\\sin \\alpha\\sin \\beta=-\\frac{1}{2} \\left\\{\\cos(\\alpha+\\beta)-\\cos(\\alpha-\\beta)\\right\\}\n\\]\nこの積和の公式を用いると\n\\[\n\\begin{align}\n&\\int^{\\pi}_0\\sin nx \\sin kx\\ dx \\\\\n&= -\\frac{1}{2}\\int^{\\pi}_0 \\left\\{\\cos(n+k)x-\\cos(n-k)x\\right\\} dx \\\\\n&= -\\frac{1}{2}\\left\\{\\int^{\\pi}_0\\cos(n+k)x\\ dx- \\int^{\\pi}_0\\cos(n-k)x\\ dx\\right\\}\n\\end{align}\n\\]\nつぎに以下のケースを考えます\n\n\\(n=k\\)のとき\n\\(n\\neq k\\)のとき\n\n\n\\(n=k\\)のとき\n\n\\[\n-\\frac{1}{2}\\left\\{\\int^{\\pi}_0\\cos(n+k)x\\ dx- \\int^{\\pi}_0\\cos(n-k)x\\ dx\\right\\}\n\\]\nの第二項は\\(\\pi\\)となる一方, 第一項は\n\\[\n\\begin{align}\n\\int^{\\pi}_0\\cos(n+k)x dx &= -\\left[\\sin(n+k)x\\right]^{\\pi}_0\\\\\n&= 0\n\\end{align}\n\\]\n従って,\n\\[\n-\\frac{1}{2}\\left\\{\\int^{\\pi}_0\\cos(n+k)x\\ dx- \\int^{\\pi}_0\\cos(n-k)x\\ dx\\right\\} = \\frac{\\pi}{2}\n\\]\n\n\\(n\\neq k\\)のとき\n\n\\[\n\\begin{align}\n\\int^{\\pi}_0\\cos(n-k)x\\ dx &= -\\left[\\sin(n-k)x\\right]^{\\pi}_0 = 0\\\\[3pt]\n\\int^{\\pi}_0\\cos(n+k)x\\ dx &= -\\left[\\sin(n+k)x\\right]^{\\pi}_0 = 0\n\\end{align}\n\\]\nより\n\\[\n-\\frac{1}{2}\\left\\{\\int^{\\pi}_0\\cos(n+k)x\\ dx- \\int^{\\pi}_0\\cos(n-k)x\\ dx\\right\\} = 0\n\\]"
  },
  {
    "objectID": "posts/2025-01-28-mathmatical-modelling/index.html",
    "href": "posts/2025-01-28-mathmatical-modelling/index.html",
    "title": "数理モデルの作り方",
    "section": "",
    "text": "モデリングとは，現実の事象を説明するために実施するプロセスです．モデリングを通じて，これまで未知であった自然現象を解明したり，または解明を通じて将来の予測や，モデルに基づく意思決定を行ったりします．\nモデリングの流れとしては，\n\n単純化した仮定をたくさん立てる\n重要な変数が何であるのか明らかにする\n変数間の関係性について何かしらの仮定を考える\n\nこれらのステップを行いながら，現実の問題を数理モデルの問題に置き換えます．その後，適切な手法を用いて，モデルを解きます．解が出てきたならば，\n\nその解を現実の問題の文脈に翻訳し解釈\nモデルの解が現実のデータと一致しているかの妥当性検証\n\nを行いモデルを評価します．もしモデルの妥当性に疑念が認められたならば，仮定や変数の見直しなど定式化をやり直します．もしモデルが現実の事象に対して良い適合を示していたならば，意思決定目的関数に従ってモデル予測に基づく決定を行います．この一連の流れを表したのが (Figure 1) となります．\n\n\n\n\n\n\n\n\nflowchart BT\n    problem_setup[\"1: 解きたい現象の選択\"]\n    assumption[\"2: 仮説 & 仮定立案\"]\n    define_objective[\"3: 数理問題のモデル定式化\"]\n    solve[\"4: 数理問題を解く\"]\n    analysis[\"5: 解の意味を解釈する\"]\n    validation[\"6: モデル妥当性検証\"]\n    decision[\"7: モデルを用いた意思決定\"]\n    \n\n    subgraph problem-framing-phase[\"**phase 1: モデル定式化**\"]\n        direction TB\n        problem_setup --&gt; assumption\n        assumption --&gt; define_objective\n    end\n\n    subgraph analysis-phase[\"**phase 2: モデルを解く**\"]\n        direction LR\n        solve --&gt; analysis\n        analysis --&gt; validation\n    end\n\n    subgraph decision-phase[\"**phase 3: 意思決定**\"]\n        decision\n    end\n\n    analysis-phase --仮定/変数/モデル&lt;br&gt;の見直し--&gt; problem-framing-phase\n    problem-framing-phase ----&gt; analysis-phase\n    analysis-phase ----&gt; decision-phase\n\n\n\n\n\n\n\n\nFigure 1\n\n\n\n注意点として，なにを解きたいか？・知りたいか？がすでに決定されている状況からモデリングへというステップに入ります．なにを解くべきか？は意思決定問題の定式化や文脈に依存します．「解くべきもの・解く価値のあるもの」の議論を実施した上で，モデリングという過程に入ることを意識することが重要です．"
  },
  {
    "objectID": "posts/2025-01-28-mathmatical-modelling/index.html#モデリングのステップ",
    "href": "posts/2025-01-28-mathmatical-modelling/index.html#モデリングのステップ",
    "title": "数理モデルの作り方",
    "section": "",
    "text": "モデリングとは，現実の事象を説明するために実施するプロセスです．モデリングを通じて，これまで未知であった自然現象を解明したり，または解明を通じて将来の予測や，モデルに基づく意思決定を行ったりします．\nモデリングの流れとしては，\n\n単純化した仮定をたくさん立てる\n重要な変数が何であるのか明らかにする\n変数間の関係性について何かしらの仮定を考える\n\nこれらのステップを行いながら，現実の問題を数理モデルの問題に置き換えます．その後，適切な手法を用いて，モデルを解きます．解が出てきたならば，\n\nその解を現実の問題の文脈に翻訳し解釈\nモデルの解が現実のデータと一致しているかの妥当性検証\n\nを行いモデルを評価します．もしモデルの妥当性に疑念が認められたならば，仮定や変数の見直しなど定式化をやり直します．もしモデルが現実の事象に対して良い適合を示していたならば，意思決定目的関数に従ってモデル予測に基づく決定を行います．この一連の流れを表したのが (Figure 1) となります．\n\n\n\n\n\n\n\n\nflowchart BT\n    problem_setup[\"1: 解きたい現象の選択\"]\n    assumption[\"2: 仮説 & 仮定立案\"]\n    define_objective[\"3: 数理問題のモデル定式化\"]\n    solve[\"4: 数理問題を解く\"]\n    analysis[\"5: 解の意味を解釈する\"]\n    validation[\"6: モデル妥当性検証\"]\n    decision[\"7: モデルを用いた意思決定\"]\n    \n\n    subgraph problem-framing-phase[\"**phase 1: モデル定式化**\"]\n        direction TB\n        problem_setup --&gt; assumption\n        assumption --&gt; define_objective\n    end\n\n    subgraph analysis-phase[\"**phase 2: モデルを解く**\"]\n        direction LR\n        solve --&gt; analysis\n        analysis --&gt; validation\n    end\n\n    subgraph decision-phase[\"**phase 3: 意思決定**\"]\n        decision\n    end\n\n    analysis-phase --仮定/変数/モデル&lt;br&gt;の見直し--&gt; problem-framing-phase\n    problem-framing-phase ----&gt; analysis-phase\n    analysis-phase ----&gt; decision-phase\n\n\n\n\n\n\n\n\nFigure 1\n\n\n\n注意点として，なにを解きたいか？・知りたいか？がすでに決定されている状況からモデリングへというステップに入ります．なにを解くべきか？は意思決定問題の定式化や文脈に依存します．「解くべきもの・解く価値のあるもの」の議論を実施した上で，モデリングという過程に入ることを意識することが重要です．"
  },
  {
    "objectID": "posts/2025-02-19-make-lag-variable/index.html",
    "href": "posts/2025-02-19-make-lag-variable/index.html",
    "title": "Group毎に定義されたラグ変数の作成",
    "section": "",
    "text": "次のようなpandas.DataFrameを考えます\n\n\nCode\nimport pandas as pd\nimport polars as pl\n\ndf = pd.DataFrame(\n    {\n        \"entity_col\": [\"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\"],\n        \"state\": [1, 0, 1, 1, 1, 0, 0, 0, 0, 1],\n        \"time_col\": pd.to_datetime([\n            \"2021-01-02\",\n            \"2021-01-03\",\n            \"2021-01-04\",\n            \"2021-01-01\",\n            \"2021-01-03\",\n            \"2021-01-04\",\n            \"2021-02-02\",\n            \"2021-02-03\",\n            \"2021-02-10\",\n            \"2021-01-02\",\n        ]),\n        \"temp\": [1, 2, 11, 13, 12, 14, 10, 9, 8, 0],\n    }\n)\n\ndf\n\n\n\n\n\n\n\n\n\nentity_col\nstate\ntime_col\ntemp\n\n\n\n\n0\nA\n1\n2021-01-02\n1\n\n\n1\nA\n0\n2021-01-03\n2\n\n\n2\nA\n1\n2021-01-04\n11\n\n\n3\nA\n1\n2021-01-01\n13\n\n\n4\nA\n1\n2021-01-03\n12\n\n\n5\nA\n0\n2021-01-04\n14\n\n\n6\nB\n0\n2021-02-02\n10\n\n\n7\nB\n0\n2021-02-03\n9\n\n\n8\nB\n0\n2021-02-10\n8\n\n\n9\nC\n1\n2021-01-02\n0\n\n\n\n\n\n\n\n\n📘 実施したい処理 \n\n(entity_col, state)でGroup Keysとして，各Group内部で time_col の順番に応じて tempカラムについてラグ変数を作成したい\nラグ変数の名前は Defaultでは f\"{target_column}_1lag, 指定があった場合はそれに倣うとする\n\n\n\n\n\nfrom typing import Optional\n\n\ndef generate_lag_variable_with_group_key(\n    df: pd.DataFrame | pl.DataFrame,\n    target_column: str,\n    sort_key: list[str],\n    group_key: list[str],\n    lag_size: int,\n    ascending: list[bool] | bool = True,\n    lagged_col_name: Optional[str] = None,\n) -&gt; pd.DataFrame | pl.DataFrame:\n    \"\"\"\n    Generate a lagged variable in a DataFrame with a specified group key.\n\n    This function creates a new column in the DataFrame that contains\n    the lagged values of an existing column, grouped by specified keys.\n    It supports both pandas and polars DataFrames.\n\n    Parameters:\n        df (pd.DataFrame | pl.DataFrame):\n            The input DataFrame, either pandas or polars.\n\n        col (str):\n            The name of the column to generate the lagged variable from.\n\n        sort_key (list[str]):\n            The list of columns to sort the DataFrame by before generating the lagged variable.\n\n        group_key (list[str]):\n            The list of columns to group the DataFrame by before generating the lagged variable.\n\n        lag_size (int):\n            The number of periods to lag the variable.\n\n        ascending (list[bool] | bool, optional):\n            The sort order for each column in sort_key. Defaults to True.\n\n        lagged_col_name (Optional[str], optional):\n            The name of the new lagged column. If None, defaults to \"{col}_{lag_size}lag\".\n\n    Returns:\n        pd.DataFrame | pl.DataFrame: The DataFrame with the new lagged variable column.\n\n    Raises:\n        TypeError: If the input DataFrame is neither pandas.DataFrame nor polars.DataFrame.\n    \"\"\"\n\n    # set up common variables\n    if lagged_col_name is None:\n        lagged_col_name = f\"{target_column}_{lag_size}lag\"\n\n    result_sort_key = group_key + sort_key\n\n    if isinstance(df, pd.DataFrame):\n        # Sort the dataframe by the specified sort key\n        df_sorted = df.sort_values(by=sort_key, ascending=ascending)\n\n        # Generate the lagged variable\n        df_sorted[lagged_col_name] = df_sorted.groupby(group_key)[target_column].shift(\n            lag_size\n        )\n\n        # Sort the dataframe by the group key and sort key\n        result_sort_key = group_key + sort_key\n        df_result = df_sorted.sort_values(by=result_sort_key).reset_index(drop=True)\n\n    elif isinstance(df, pl.DataFrame):\n        if isinstance(ascending, list):\n            order_reverse = [not x for x in ascending]\n        else:\n            order_reverse = not ascending\n\n        df_sorted = df.sort(sort_key, descending=order_reverse)\n        df_sorted = df_sorted.with_columns(\n            pl.col(target_column)\n            .shift(lag_size)\n            .over(group_key)\n            .alias(lagged_col_name)\n        )\n        df_result = df_sorted.sort(result_sort_key)\n\n    else:\n        raise TypeError(\n            f\"type(df) is {type(df)}: df should be pandas.DataFrame or polars.DataFrame\"\n        )\n\n    return df_result\n\n\n\n\n ▶  pandas.DataFrame\n\ngenerate_lag_variable_with_group_key(\n    df=df,\n    target_column=\"temp\",\n    sort_key=[\"time_col\"],\n    group_key=[\"entity_col\", \"state\"],\n    lag_size=1,\n    ascending= [True]\n)\n\n\n\n\n\n\n\n\nentity_col\nstate\ntime_col\ntemp\ntemp_1lag\n\n\n\n\n0\nA\n0\n2021-01-03\n2\nNaN\n\n\n1\nA\n0\n2021-01-04\n14\n2.0\n\n\n2\nA\n1\n2021-01-01\n13\nNaN\n\n\n3\nA\n1\n2021-01-02\n1\n13.0\n\n\n4\nA\n1\n2021-01-03\n12\n1.0\n\n\n5\nA\n1\n2021-01-04\n11\n12.0\n\n\n6\nB\n0\n2021-02-02\n10\nNaN\n\n\n7\nB\n0\n2021-02-03\n9\n10.0\n\n\n8\nB\n0\n2021-02-10\n8\n9.0\n\n\n9\nC\n1\n2021-01-02\n0\nNaN\n\n\n\n\n\n\n\n ▶  polars.DataFrame\n\ndf_polars = pl.DataFrame(df)\ngenerate_lag_variable_with_group_key(\n    df=df_polars,\n    target_column=\"temp\",\n    sort_key=[\"time_col\"],\n    group_key=[\"entity_col\", \"state\"],\n    lag_size=1,\n)\n\n\nshape: (10, 5)\n\n\n\nentity_col\nstate\ntime_col\ntemp\ntemp_1lag\n\n\nstr\ni64\ndatetime[ns]\ni64\ni64\n\n\n\n\n\"A\"\n0\n2021-01-03 00:00:00\n2\nnull\n\n\n\"A\"\n0\n2021-01-04 00:00:00\n14\n2\n\n\n\"A\"\n1\n2021-01-01 00:00:00\n13\nnull\n\n\n\"A\"\n1\n2021-01-02 00:00:00\n1\n13\n\n\n\"A\"\n1\n2021-01-03 00:00:00\n12\n1\n\n\n\"A\"\n1\n2021-01-04 00:00:00\n11\n12\n\n\n\"B\"\n0\n2021-02-02 00:00:00\n10\nnull\n\n\n\"B\"\n0\n2021-02-03 00:00:00\n9\n10\n\n\n\"B\"\n0\n2021-02-10 00:00:00\n8\n9\n\n\n\"C\"\n1\n2021-01-02 00:00:00\n0\nnull\n\n\n\n\n\n\n\n\n\n\n📘 テスト方針 \n\n異なるラグサイズ（lag size）の処理: ラグサイズの値を自由に指定できるか？\nカスタムラグカラム名の指定: ラグカラムに任意の名前を付けることができるか？。\nソート順の指定: 昇順（ascending=True）または降順（ascending=False）でソートできるか？\n不正な入力タイプのエラー処理: 入力値が不正な場合，適切なエラーメッセージを表示するか？\n\n\n ▶  Test Examples\n\nimport pytest\nimport pandas as pd\nimport polars as pl\nimport numpy as np\n\n# Import the function to be tested\n# from hogehoge import generate_lag_variable_with_group_key  # Replace with actual module name\n\n@pytest.fixture\ndef sample_pandas_df():\n    \"\"\"Fixture to provide a sample Pandas DataFrame\"\"\"\n    return pd.DataFrame({\n        \"entity\": [\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"],\n        \"time\": [\"2023-01-01\", \"2023-01-02\", \"2023-01-03\",\n                 \"2023-01-01\", \"2023-01-02\", \"2023-01-03\"],\n        \"value\": [10, 20, 30, 100, 200, 300]\n    }).assign(time=lambda df: pd.to_datetime(df[\"time\"]))  # Ensure datetime type\n\n@pytest.fixture\ndef sample_polars_df():\n    \"\"\"Fixture to provide a sample Polars DataFrame\"\"\"\n    return pl.DataFrame({\n        \"entity\": [\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"],\n        \"time\": [\"2023-01-01\", \"2023-01-02\", \"2023-01-03\",\n                 \"2023-01-01\", \"2023-01-02\", \"2023-01-03\"],\n        \"value\": [10, 20, 30, 100, 200, 300]\n    }).with_columns(pl.col(\"time\").str.to_date())  # Ensure datetime type\n\n@pytest.mark.parametrize(\"df_type\", [\"pandas\", \"polars\"])\ndef test_generate_lag_variable_basic(df_type, sample_pandas_df, sample_polars_df):\n    \"\"\"Test basic functionality with Pandas and Polars\"\"\"\n    df = sample_pandas_df if df_type == \"pandas\" else sample_polars_df\n    result = generate_lag_variable_with_group_key(\n        df=df,\n        target_column=\"value\",\n        sort_key=[\"time\"],\n        group_key=[\"entity\"],\n        lag_size=1\n    )\n\n    assert \"value_1lag\" in result.columns, \"Lagged column not found!\"\n    expected_values_pandas = [np.nan, 10.0, 20.0, np.nan, 100.0, 200.0]  # Expected shifted values\n    expected_values_polars = [None, 10, 20, None, 100, 200]  # Expected shifted values\n    if df_type == \"pandas\":\n        assert np.array_equal(result[\"value_1lag\"].to_list(), expected_values_pandas, equal_nan=True)\n    else:\n        assert result[\"value_1lag\"].to_list() == expected_values_polars \n\ndef test_generate_lag_variable_custom_column(sample_pandas_df):\n    \"\"\"Test if custom column name works correctly\"\"\"\n    result = generate_lag_variable_with_group_key(\n        df=sample_pandas_df,\n        target_column=\"value\",\n        sort_key=[\"time\"],\n        group_key=[\"entity\"],\n        lag_size=1,\n        lagged_col_name=\"custom_lag\"\n    )\n    assert \"custom_lag\" in result.columns, \"Custom lag column name not applied!\"\n\ndef test_generate_lag_variable_with_descending_order(sample_pandas_df):\n    \"\"\"Test sorting order with descending time\"\"\"\n    result = generate_lag_variable_with_group_key(\n        df=sample_pandas_df,\n        target_column=\"value\",\n        sort_key=[\"time\"],\n        group_key=[\"entity\"],\n        lag_size=1,\n        ascending=False  # Reverse sorting order\n    )\n    expected_values = [20.0, 30.0, np.nan, 200.0, 300.0, np.nan]  # Because order is reversed\n    assert np.array_equal(result[\"value_1lag\"].to_list(), expected_values, equal_nan=True)\n\ndef test_generate_lag_variable_invalid_input():\n    \"\"\"Test function raises TypeError for invalid input\"\"\"\n    with pytest.raises(TypeError):\n        generate_lag_variable_with_group_key(\n            df=\"not_a_dataframe\",  # Invalid type\n            target_column=\"value\",\n            sort_key=[\"time\"],\n            group_key=[\"entity\"],\n            lag_size=1\n        )\n\n\n注意点 ! \n\nnp.nan != np.nan であるため，np.nanを含むリストを比較する場合，== を直接使用しても正しく機能しません\nNaN は未定義値であるため，NaN は自身と等しくない"
  },
  {
    "objectID": "posts/2025-02-19-make-lag-variable/index.html#ラグ変数の作成",
    "href": "posts/2025-02-19-make-lag-variable/index.html#ラグ変数の作成",
    "title": "Group毎に定義されたラグ変数の作成",
    "section": "",
    "text": "次のようなpandas.DataFrameを考えます\n\n\nCode\nimport pandas as pd\nimport polars as pl\n\ndf = pd.DataFrame(\n    {\n        \"entity_col\": [\"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\"],\n        \"state\": [1, 0, 1, 1, 1, 0, 0, 0, 0, 1],\n        \"time_col\": pd.to_datetime([\n            \"2021-01-02\",\n            \"2021-01-03\",\n            \"2021-01-04\",\n            \"2021-01-01\",\n            \"2021-01-03\",\n            \"2021-01-04\",\n            \"2021-02-02\",\n            \"2021-02-03\",\n            \"2021-02-10\",\n            \"2021-01-02\",\n        ]),\n        \"temp\": [1, 2, 11, 13, 12, 14, 10, 9, 8, 0],\n    }\n)\n\ndf\n\n\n\n\n\n\n\n\n\nentity_col\nstate\ntime_col\ntemp\n\n\n\n\n0\nA\n1\n2021-01-02\n1\n\n\n1\nA\n0\n2021-01-03\n2\n\n\n2\nA\n1\n2021-01-04\n11\n\n\n3\nA\n1\n2021-01-01\n13\n\n\n4\nA\n1\n2021-01-03\n12\n\n\n5\nA\n0\n2021-01-04\n14\n\n\n6\nB\n0\n2021-02-02\n10\n\n\n7\nB\n0\n2021-02-03\n9\n\n\n8\nB\n0\n2021-02-10\n8\n\n\n9\nC\n1\n2021-01-02\n0\n\n\n\n\n\n\n\n\n📘 実施したい処理 \n\n(entity_col, state)でGroup Keysとして，各Group内部で time_col の順番に応じて tempカラムについてラグ変数を作成したい\nラグ変数の名前は Defaultでは f\"{target_column}_1lag, 指定があった場合はそれに倣うとする\n\n\n\n\n\nfrom typing import Optional\n\n\ndef generate_lag_variable_with_group_key(\n    df: pd.DataFrame | pl.DataFrame,\n    target_column: str,\n    sort_key: list[str],\n    group_key: list[str],\n    lag_size: int,\n    ascending: list[bool] | bool = True,\n    lagged_col_name: Optional[str] = None,\n) -&gt; pd.DataFrame | pl.DataFrame:\n    \"\"\"\n    Generate a lagged variable in a DataFrame with a specified group key.\n\n    This function creates a new column in the DataFrame that contains\n    the lagged values of an existing column, grouped by specified keys.\n    It supports both pandas and polars DataFrames.\n\n    Parameters:\n        df (pd.DataFrame | pl.DataFrame):\n            The input DataFrame, either pandas or polars.\n\n        col (str):\n            The name of the column to generate the lagged variable from.\n\n        sort_key (list[str]):\n            The list of columns to sort the DataFrame by before generating the lagged variable.\n\n        group_key (list[str]):\n            The list of columns to group the DataFrame by before generating the lagged variable.\n\n        lag_size (int):\n            The number of periods to lag the variable.\n\n        ascending (list[bool] | bool, optional):\n            The sort order for each column in sort_key. Defaults to True.\n\n        lagged_col_name (Optional[str], optional):\n            The name of the new lagged column. If None, defaults to \"{col}_{lag_size}lag\".\n\n    Returns:\n        pd.DataFrame | pl.DataFrame: The DataFrame with the new lagged variable column.\n\n    Raises:\n        TypeError: If the input DataFrame is neither pandas.DataFrame nor polars.DataFrame.\n    \"\"\"\n\n    # set up common variables\n    if lagged_col_name is None:\n        lagged_col_name = f\"{target_column}_{lag_size}lag\"\n\n    result_sort_key = group_key + sort_key\n\n    if isinstance(df, pd.DataFrame):\n        # Sort the dataframe by the specified sort key\n        df_sorted = df.sort_values(by=sort_key, ascending=ascending)\n\n        # Generate the lagged variable\n        df_sorted[lagged_col_name] = df_sorted.groupby(group_key)[target_column].shift(\n            lag_size\n        )\n\n        # Sort the dataframe by the group key and sort key\n        result_sort_key = group_key + sort_key\n        df_result = df_sorted.sort_values(by=result_sort_key).reset_index(drop=True)\n\n    elif isinstance(df, pl.DataFrame):\n        if isinstance(ascending, list):\n            order_reverse = [not x for x in ascending]\n        else:\n            order_reverse = not ascending\n\n        df_sorted = df.sort(sort_key, descending=order_reverse)\n        df_sorted = df_sorted.with_columns(\n            pl.col(target_column)\n            .shift(lag_size)\n            .over(group_key)\n            .alias(lagged_col_name)\n        )\n        df_result = df_sorted.sort(result_sort_key)\n\n    else:\n        raise TypeError(\n            f\"type(df) is {type(df)}: df should be pandas.DataFrame or polars.DataFrame\"\n        )\n\n    return df_result\n\n\n\n\n ▶  pandas.DataFrame\n\ngenerate_lag_variable_with_group_key(\n    df=df,\n    target_column=\"temp\",\n    sort_key=[\"time_col\"],\n    group_key=[\"entity_col\", \"state\"],\n    lag_size=1,\n    ascending= [True]\n)\n\n\n\n\n\n\n\n\nentity_col\nstate\ntime_col\ntemp\ntemp_1lag\n\n\n\n\n0\nA\n0\n2021-01-03\n2\nNaN\n\n\n1\nA\n0\n2021-01-04\n14\n2.0\n\n\n2\nA\n1\n2021-01-01\n13\nNaN\n\n\n3\nA\n1\n2021-01-02\n1\n13.0\n\n\n4\nA\n1\n2021-01-03\n12\n1.0\n\n\n5\nA\n1\n2021-01-04\n11\n12.0\n\n\n6\nB\n0\n2021-02-02\n10\nNaN\n\n\n7\nB\n0\n2021-02-03\n9\n10.0\n\n\n8\nB\n0\n2021-02-10\n8\n9.0\n\n\n9\nC\n1\n2021-01-02\n0\nNaN\n\n\n\n\n\n\n\n ▶  polars.DataFrame\n\ndf_polars = pl.DataFrame(df)\ngenerate_lag_variable_with_group_key(\n    df=df_polars,\n    target_column=\"temp\",\n    sort_key=[\"time_col\"],\n    group_key=[\"entity_col\", \"state\"],\n    lag_size=1,\n)\n\n\nshape: (10, 5)\n\n\n\nentity_col\nstate\ntime_col\ntemp\ntemp_1lag\n\n\nstr\ni64\ndatetime[ns]\ni64\ni64\n\n\n\n\n\"A\"\n0\n2021-01-03 00:00:00\n2\nnull\n\n\n\"A\"\n0\n2021-01-04 00:00:00\n14\n2\n\n\n\"A\"\n1\n2021-01-01 00:00:00\n13\nnull\n\n\n\"A\"\n1\n2021-01-02 00:00:00\n1\n13\n\n\n\"A\"\n1\n2021-01-03 00:00:00\n12\n1\n\n\n\"A\"\n1\n2021-01-04 00:00:00\n11\n12\n\n\n\"B\"\n0\n2021-02-02 00:00:00\n10\nnull\n\n\n\"B\"\n0\n2021-02-03 00:00:00\n9\n10\n\n\n\"B\"\n0\n2021-02-10 00:00:00\n8\n9\n\n\n\"C\"\n1\n2021-01-02 00:00:00\n0\nnull\n\n\n\n\n\n\n\n\n\n\n📘 テスト方針 \n\n異なるラグサイズ（lag size）の処理: ラグサイズの値を自由に指定できるか？\nカスタムラグカラム名の指定: ラグカラムに任意の名前を付けることができるか？。\nソート順の指定: 昇順（ascending=True）または降順（ascending=False）でソートできるか？\n不正な入力タイプのエラー処理: 入力値が不正な場合，適切なエラーメッセージを表示するか？\n\n\n ▶  Test Examples\n\nimport pytest\nimport pandas as pd\nimport polars as pl\nimport numpy as np\n\n# Import the function to be tested\n# from hogehoge import generate_lag_variable_with_group_key  # Replace with actual module name\n\n@pytest.fixture\ndef sample_pandas_df():\n    \"\"\"Fixture to provide a sample Pandas DataFrame\"\"\"\n    return pd.DataFrame({\n        \"entity\": [\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"],\n        \"time\": [\"2023-01-01\", \"2023-01-02\", \"2023-01-03\",\n                 \"2023-01-01\", \"2023-01-02\", \"2023-01-03\"],\n        \"value\": [10, 20, 30, 100, 200, 300]\n    }).assign(time=lambda df: pd.to_datetime(df[\"time\"]))  # Ensure datetime type\n\n@pytest.fixture\ndef sample_polars_df():\n    \"\"\"Fixture to provide a sample Polars DataFrame\"\"\"\n    return pl.DataFrame({\n        \"entity\": [\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"],\n        \"time\": [\"2023-01-01\", \"2023-01-02\", \"2023-01-03\",\n                 \"2023-01-01\", \"2023-01-02\", \"2023-01-03\"],\n        \"value\": [10, 20, 30, 100, 200, 300]\n    }).with_columns(pl.col(\"time\").str.to_date())  # Ensure datetime type\n\n@pytest.mark.parametrize(\"df_type\", [\"pandas\", \"polars\"])\ndef test_generate_lag_variable_basic(df_type, sample_pandas_df, sample_polars_df):\n    \"\"\"Test basic functionality with Pandas and Polars\"\"\"\n    df = sample_pandas_df if df_type == \"pandas\" else sample_polars_df\n    result = generate_lag_variable_with_group_key(\n        df=df,\n        target_column=\"value\",\n        sort_key=[\"time\"],\n        group_key=[\"entity\"],\n        lag_size=1\n    )\n\n    assert \"value_1lag\" in result.columns, \"Lagged column not found!\"\n    expected_values_pandas = [np.nan, 10.0, 20.0, np.nan, 100.0, 200.0]  # Expected shifted values\n    expected_values_polars = [None, 10, 20, None, 100, 200]  # Expected shifted values\n    if df_type == \"pandas\":\n        assert np.array_equal(result[\"value_1lag\"].to_list(), expected_values_pandas, equal_nan=True)\n    else:\n        assert result[\"value_1lag\"].to_list() == expected_values_polars \n\ndef test_generate_lag_variable_custom_column(sample_pandas_df):\n    \"\"\"Test if custom column name works correctly\"\"\"\n    result = generate_lag_variable_with_group_key(\n        df=sample_pandas_df,\n        target_column=\"value\",\n        sort_key=[\"time\"],\n        group_key=[\"entity\"],\n        lag_size=1,\n        lagged_col_name=\"custom_lag\"\n    )\n    assert \"custom_lag\" in result.columns, \"Custom lag column name not applied!\"\n\ndef test_generate_lag_variable_with_descending_order(sample_pandas_df):\n    \"\"\"Test sorting order with descending time\"\"\"\n    result = generate_lag_variable_with_group_key(\n        df=sample_pandas_df,\n        target_column=\"value\",\n        sort_key=[\"time\"],\n        group_key=[\"entity\"],\n        lag_size=1,\n        ascending=False  # Reverse sorting order\n    )\n    expected_values = [20.0, 30.0, np.nan, 200.0, 300.0, np.nan]  # Because order is reversed\n    assert np.array_equal(result[\"value_1lag\"].to_list(), expected_values, equal_nan=True)\n\ndef test_generate_lag_variable_invalid_input():\n    \"\"\"Test function raises TypeError for invalid input\"\"\"\n    with pytest.raises(TypeError):\n        generate_lag_variable_with_group_key(\n            df=\"not_a_dataframe\",  # Invalid type\n            target_column=\"value\",\n            sort_key=[\"time\"],\n            group_key=[\"entity\"],\n            lag_size=1\n        )\n\n\n注意点 ! \n\nnp.nan != np.nan であるため，np.nanを含むリストを比較する場合，== を直接使用しても正しく機能しません\nNaN は未定義値であるため，NaN は自身と等しくない"
  },
  {
    "objectID": "posts/2025-02-02-taylor-expansion-and-polynomial/index.html",
    "href": "posts/2025-02-02-taylor-expansion-and-polynomial/index.html",
    "title": "有限個の多項式のテイラー展開",
    "section": "",
    "text": "\\(y = f(x)\\) の導関数を \\(f^\\prime(x)\\) とするとき，第二階の導関数を \\(f^{\\prime\\prime}(x)\\) と表記し，第 \\(n\\) 階の導関数を \\(f^{(n)}(x)\\) と表記します． 一点 \\(x\\) において\n\\[\n\\begin{gather}\nf^{\\prime\\prime}(x) = \\frac{d}{dx}\\left(\\frac{dy}{dx}\\right) = \\frac{d^2y}{dx^2}\\\\\nf^{(n)}(x) = \\frac{d^ny}{dx^n}\n\\end{gather}\n\\]\nとなります．\n ▶  記号の差異: \\(d^2y\\) vs \\(dx^2\\)\n\\(d^2y = d(dy)\\)，\\(dx^2 = (dx)^2\\) の意味で，この意味の差異を表現するため記号でも表記が異なっています．微分記号を用いて\n\\[\ndy = f^\\prime(x)dx\n\\]\nと書くとき，両辺の微分を取れば，\n\\[\n\\begin{align}\nd(dy) &= \\frac{d(f^{\\prime}(x))}{dx}(dx)^2 + f^\\prime(x)\\frac{d(dx)}{dx}dx\\\\\n      &= f^{\\prime\\prime}(x)(dx)^2 + f^\\prime(x)d(dx) \\label{eq-second-diff}\n\\end{align}\n\\]\n\\(x\\) が独立変数であるならば \\(dx\\) は \\(x\\) の水準関係なく自由に取れるので，\\(\\frac{d(dx)}{dx} = 0\\)．従って，\n\\[\nd^2y = f^{\\prime\\prime}(x)dx^2\n\\]\nとなります．もし，\\(x = \\varphi(t)\\) であるならば，\\(d^2x = \\varphi^{\\prime\\prime}(t)dt^2\\) となるので\n\\[\n\\frac{d}{dt^2}f(\\varphi(t)) = f^{\\prime\\prime}(\\varphi(t))(\\varphi^\\prime(t))^2 + f^\\prime(\\varphi(t))\\varphi^{\\prime\\prime}(t)\n\\]\n\n\n\n\nTheorem 1 : ライプニッツの公式(Leibniz rule) \n\\(u, v\\) が \\(x\\) の関数であるとき，\n\\[\n\\begin{align}\n\\frac{d^n(uv)}{dx^n}\n    &= u^{(n)}v + \\left(\\begin{array}{c}n\\\\1\\end{array}\\right)u^{(n-1)}v^{\\prime} + \\left(\\begin{array}{c}n\\\\2\\end{array}\\right)u^{(n-2)}v^{\\prime\\prime}+\\cdots+ \\left(\\begin{array}{c}n\\\\n-1\\end{array}\\right)u^{\\prime}v^{(n-1)} +uv^{(n)}\\\\\n    &= \\sum_{k=0}^n \\left(\\begin{array}{c}n\\\\ k\\end{array}\\right)u^{(n-k)}v^{(k)}\n\\end{align}\n\\]\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\(n=1\\) のときは，積の微分公式より\n\\[\n\\frac{d(uv)}{dx^n} = \\frac{du}{dx}v + \\frac{dv}{dx}u\n\\]\n\\(n\\geq 2\\) については，帰納法を用いて示す．\\(n=t\\) のときライプニッツの公式が成立すると仮定する．\nこのとき，\n\\[\n\\begin{align}\n\\frac{d^{(t+1)}(uv)}{dx^{t+1}}\n    &= \\frac{d}{dt}\\left(\\frac{d^{(t)}(uv)}{dx^{t}}\\right)\\\\\n    &= \\frac{d}{dt}\\left(\\sum_{k=0}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k)}v^{(k)}\\right)\\\\\n    &= \\sum_{k=0}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)[u^{(t-k+1)}v^{(k)} + u^{(t-k)}v^{(k+1)}]\\\\\n    &= \\sum_{k=0}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k+1)}v^{(k)} + \\sum_{k=0}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k)}v^{(k+1)}\\\\\n    &= \\left\\{u^{(t+1)}v + \\sum_{k=1}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k+1)}v^{(k)}\\right\\}+ \\left\\{uv^{(t+1)} + \\sum_{k=0}^{t-1} \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k)}v^{(k+1)}\\right\\}\\\\\n    &= \\left\\{u^{(t+1)}v + \\sum_{k=1}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k+1)}v^{(k)}\\right\\}+ \\left\\{uv^{(t+1)} + \\sum_{j=1}^{t} \\left(\\begin{array}{c}t\\\\ j-1\\end{array}\\right)u^{(t-j+1)}v^{j}\\right\\}\\\\\n    &= u^{(t+1)}v + uv^{(t+1)} + \\sum_{k=1}^t \\left\\{\\left(\\begin{array}{c}t\\\\ k\\end{array}\\right) + \\left(\\begin{array}{c}t\\\\ k-1\\end{array}\\right)\\right\\}u^{(t-k+1)}v^{(k)}\\\\\n    &= u^{(t+1)}v + uv^{(t+1)} + \\sum_{k=1}^t \\left(\\begin{array}{c}t+1\\\\ k\\end{array}\\right)u^{(t+1-k)}v^{(k)}\\\\\n    &= \\sum_{k=0}^{t+1} \\left(\\begin{array}{c}t+1\\\\ k\\end{array}\\right)u^{(t+1-k)}v^{(k)}\n\\end{align}\n\\]\nとなり，\\(n = t + 1\\) の場合のライプニッツの公式の成立が確かめられた．\n\n\n\n\nExample 1 \n\\(y = x^2\\sin(x)\\) について \\(n\\) 階導関数を求めめたいとします．\n\\[\n(\\sin x)^{(k)} = \\sin\\left(x + \\frac{\\pi}{2}k\\right)\n\\]\nであるので\n\\(n=1\\) のときは\n\\[\ny^\\prime = x^2\\sin\\left(x + \\frac{\\pi}{2}\\right) + 2x\\sin(x)\n\\]\n\\(n\\geq 2\\) のときは，\\(x^2\\) が2回微分可能であることを考慮してライプニッツルールを利用すると\n\\[\n\\begin{align}\n\\frac{d^n}{dx^{n}}(x^2\\sin x)\n    &= x^2(\\sin(x))^{(n)} + 2nx(\\sin(x))^{(n-1)} + n(n-1)(\\sin(x))^{(n-2)}\\\\\n    &= x^2\\sin\\left(x + \\frac{\\pi}{2}n\\right) + 2nx\\sin\\left(x + \\frac{\\pi}{2}(n-1)\\right) + n(n-1)\\sin\\left(x + \\frac{\\pi}{2}(n-2)\\right)   \n\\end{align}\n\\]\n\n\n\nExample 2 \n\\[\n\\begin{align}\n(x\\sin x)^{(n)} = x\\sin\\left(x + \\frac{\\pi}{2}n\\right) + n \\sin\\left(x + \\frac{\\pi}{2}(n-1)\\right)\\\\\n(x\\cos x)^{(n)} = x\\cos\\left(x + \\frac{\\pi}{2}n\\right) + n \\cos\\left(x + \\frac{\\pi}{2}(n-1)\\right)\\\\\n(x^2\\exp(x))^{(n)} = x^2\\exp(x) + 2nx\\exp(x) + n(n-1)\\exp(x)\n\\end{align}\n\\]"
  },
  {
    "objectID": "posts/2025-02-02-taylor-expansion-and-polynomial/index.html#高階微分法とライプニッツの公式",
    "href": "posts/2025-02-02-taylor-expansion-and-polynomial/index.html#高階微分法とライプニッツの公式",
    "title": "有限個の多項式のテイラー展開",
    "section": "",
    "text": "\\(y = f(x)\\) の導関数を \\(f^\\prime(x)\\) とするとき，第二階の導関数を \\(f^{\\prime\\prime}(x)\\) と表記し，第 \\(n\\) 階の導関数を \\(f^{(n)}(x)\\) と表記します． 一点 \\(x\\) において\n\\[\n\\begin{gather}\nf^{\\prime\\prime}(x) = \\frac{d}{dx}\\left(\\frac{dy}{dx}\\right) = \\frac{d^2y}{dx^2}\\\\\nf^{(n)}(x) = \\frac{d^ny}{dx^n}\n\\end{gather}\n\\]\nとなります．\n ▶  記号の差異: \\(d^2y\\) vs \\(dx^2\\)\n\\(d^2y = d(dy)\\)，\\(dx^2 = (dx)^2\\) の意味で，この意味の差異を表現するため記号でも表記が異なっています．微分記号を用いて\n\\[\ndy = f^\\prime(x)dx\n\\]\nと書くとき，両辺の微分を取れば，\n\\[\n\\begin{align}\nd(dy) &= \\frac{d(f^{\\prime}(x))}{dx}(dx)^2 + f^\\prime(x)\\frac{d(dx)}{dx}dx\\\\\n      &= f^{\\prime\\prime}(x)(dx)^2 + f^\\prime(x)d(dx) \\label{eq-second-diff}\n\\end{align}\n\\]\n\\(x\\) が独立変数であるならば \\(dx\\) は \\(x\\) の水準関係なく自由に取れるので，\\(\\frac{d(dx)}{dx} = 0\\)．従って，\n\\[\nd^2y = f^{\\prime\\prime}(x)dx^2\n\\]\nとなります．もし，\\(x = \\varphi(t)\\) であるならば，\\(d^2x = \\varphi^{\\prime\\prime}(t)dt^2\\) となるので\n\\[\n\\frac{d}{dt^2}f(\\varphi(t)) = f^{\\prime\\prime}(\\varphi(t))(\\varphi^\\prime(t))^2 + f^\\prime(\\varphi(t))\\varphi^{\\prime\\prime}(t)\n\\]\n\n\n\n\nTheorem 1 : ライプニッツの公式(Leibniz rule) \n\\(u, v\\) が \\(x\\) の関数であるとき，\n\\[\n\\begin{align}\n\\frac{d^n(uv)}{dx^n}\n    &= u^{(n)}v + \\left(\\begin{array}{c}n\\\\1\\end{array}\\right)u^{(n-1)}v^{\\prime} + \\left(\\begin{array}{c}n\\\\2\\end{array}\\right)u^{(n-2)}v^{\\prime\\prime}+\\cdots+ \\left(\\begin{array}{c}n\\\\n-1\\end{array}\\right)u^{\\prime}v^{(n-1)} +uv^{(n)}\\\\\n    &= \\sum_{k=0}^n \\left(\\begin{array}{c}n\\\\ k\\end{array}\\right)u^{(n-k)}v^{(k)}\n\\end{align}\n\\]\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\(n=1\\) のときは，積の微分公式より\n\\[\n\\frac{d(uv)}{dx^n} = \\frac{du}{dx}v + \\frac{dv}{dx}u\n\\]\n\\(n\\geq 2\\) については，帰納法を用いて示す．\\(n=t\\) のときライプニッツの公式が成立すると仮定する．\nこのとき，\n\\[\n\\begin{align}\n\\frac{d^{(t+1)}(uv)}{dx^{t+1}}\n    &= \\frac{d}{dt}\\left(\\frac{d^{(t)}(uv)}{dx^{t}}\\right)\\\\\n    &= \\frac{d}{dt}\\left(\\sum_{k=0}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k)}v^{(k)}\\right)\\\\\n    &= \\sum_{k=0}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)[u^{(t-k+1)}v^{(k)} + u^{(t-k)}v^{(k+1)}]\\\\\n    &= \\sum_{k=0}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k+1)}v^{(k)} + \\sum_{k=0}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k)}v^{(k+1)}\\\\\n    &= \\left\\{u^{(t+1)}v + \\sum_{k=1}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k+1)}v^{(k)}\\right\\}+ \\left\\{uv^{(t+1)} + \\sum_{k=0}^{t-1} \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k)}v^{(k+1)}\\right\\}\\\\\n    &= \\left\\{u^{(t+1)}v + \\sum_{k=1}^t \\left(\\begin{array}{c}t\\\\ k\\end{array}\\right)u^{(t-k+1)}v^{(k)}\\right\\}+ \\left\\{uv^{(t+1)} + \\sum_{j=1}^{t} \\left(\\begin{array}{c}t\\\\ j-1\\end{array}\\right)u^{(t-j+1)}v^{j}\\right\\}\\\\\n    &= u^{(t+1)}v + uv^{(t+1)} + \\sum_{k=1}^t \\left\\{\\left(\\begin{array}{c}t\\\\ k\\end{array}\\right) + \\left(\\begin{array}{c}t\\\\ k-1\\end{array}\\right)\\right\\}u^{(t-k+1)}v^{(k)}\\\\\n    &= u^{(t+1)}v + uv^{(t+1)} + \\sum_{k=1}^t \\left(\\begin{array}{c}t+1\\\\ k\\end{array}\\right)u^{(t+1-k)}v^{(k)}\\\\\n    &= \\sum_{k=0}^{t+1} \\left(\\begin{array}{c}t+1\\\\ k\\end{array}\\right)u^{(t+1-k)}v^{(k)}\n\\end{align}\n\\]\nとなり，\\(n = t + 1\\) の場合のライプニッツの公式の成立が確かめられた．\n\n\n\n\nExample 1 \n\\(y = x^2\\sin(x)\\) について \\(n\\) 階導関数を求めめたいとします．\n\\[\n(\\sin x)^{(k)} = \\sin\\left(x + \\frac{\\pi}{2}k\\right)\n\\]\nであるので\n\\(n=1\\) のときは\n\\[\ny^\\prime = x^2\\sin\\left(x + \\frac{\\pi}{2}\\right) + 2x\\sin(x)\n\\]\n\\(n\\geq 2\\) のときは，\\(x^2\\) が2回微分可能であることを考慮してライプニッツルールを利用すると\n\\[\n\\begin{align}\n\\frac{d^n}{dx^{n}}(x^2\\sin x)\n    &= x^2(\\sin(x))^{(n)} + 2nx(\\sin(x))^{(n-1)} + n(n-1)(\\sin(x))^{(n-2)}\\\\\n    &= x^2\\sin\\left(x + \\frac{\\pi}{2}n\\right) + 2nx\\sin\\left(x + \\frac{\\pi}{2}(n-1)\\right) + n(n-1)\\sin\\left(x + \\frac{\\pi}{2}(n-2)\\right)   \n\\end{align}\n\\]\n\n\n\nExample 2 \n\\[\n\\begin{align}\n(x\\sin x)^{(n)} = x\\sin\\left(x + \\frac{\\pi}{2}n\\right) + n \\sin\\left(x + \\frac{\\pi}{2}(n-1)\\right)\\\\\n(x\\cos x)^{(n)} = x\\cos\\left(x + \\frac{\\pi}{2}n\\right) + n \\cos\\left(x + \\frac{\\pi}{2}(n-1)\\right)\\\\\n(x^2\\exp(x))^{(n)} = x^2\\exp(x) + 2nx\\exp(x) + n(n-1)\\exp(x)\n\\end{align}\n\\]"
  },
  {
    "objectID": "posts/2025-02-02-taylor-expansion-and-polynomial/index.html#有限個の多項式のテイラー展開",
    "href": "posts/2025-02-02-taylor-expansion-and-polynomial/index.html#有限個の多項式のテイラー展開",
    "title": "有限個の多項式のテイラー展開",
    "section": "有限個の多項式のテイラー展開",
    "text": "有限個の多項式のテイラー展開\n\\(n\\) 次式の \\(f(x)\\) を考えます．このとき，定義域の任意の点 \\(a\\) を用いて，以下のように表すとします\n\\[\nf(x) = a_0 + a_1(x-a) + a_2(x-a)^2 + \\cdots + a_n(x-a)^n\n\\]\n\\(x = a\\) のとき，\\(f(a) = a_0\\)．両辺を \\(k\\) 回微分すると\n\\[\nf^{(k)}(x) = a_kk! + a_{k+1}\\frac{(k+1)!}{1!}(x-a) + a_{k+2}\\frac{(k+2)!}{2!}(x-a)^2 + \\cdots + a_{n}\\frac{n!}{(n-k)!}(x-a)^{n-k}\n\\]\nこのとき，\\(f^{(k)}(a) = a_kk!\\) であるので，\\(a_k = \\frac{f^{(k)}(a)}{k!}\\) を得る．従って，\\(n\\) 次式の \\(f(x)\\) は\n\\[\nf(x) = f(a) + \\frac{f^{\\prime}(a)}{1!}(x-a) + \\frac{f^{(2)}(a)}{2!}(x-a)^2 + \\cdots + \\frac{f^{(n)}(a)}{n!}(x-a)^n\\label{eq-poly}\n\\]\nと表すことが出来ます．\n\nExample 3 \n\\(f(x) = x^n\\) を\n\\[\nf(x) = a_0 + a_1(x-1) + a_2(x-1)^2 + \\cdots + a_n(x-1)^n\n\\]\nで表したいとします．このとき，\\(\\eqref{eq-poly}\\) より\n\\[\n\\begin{align}\nx^n\n    &= 1 + \\frac{n}{1!}(x-1)+ \\frac{n(n-1)}{2!}(x-1)^2 + \\cdots + \\frac{n!}{n!}(x-1)^n\\\\\n    &= \\sum_{k=0}^n \\left(\\begin{array}{c}n\\\\ k\\end{array}\\right)(x-1)^k\n\\end{align}\n\\]\nと表せます．これを更に式変形すると\n\\[\n\\begin{align}\n\\sum_{k=0}^n \\left(\\begin{array}{c}n\\\\ k\\end{array}\\right)(x-1)^k\n    &= \\sum_{k=0}^n \\left(\\begin{array}{c}n\\\\ k\\end{array}\\right)(x-1)^k 1^{n-k}\\\\\n    &= (x - 1 + 1)^n\\\\\n    &= x^n\n\\end{align}\n\\]\nよって \\(x^n\\) の \\(x = 1\\) まわりでのテイラー展開は \\((x - 1 + 1)^n\\) の二項展開と関係づけて理解することが出来ます．\n\n\n\n\nTheorem 2 \n\\(n\\) 次式の \\(f(x)\\) について，\\(x=a\\) が \\(k\\) 重解であるための必要十分条件は\n\\[\n\\begin{gather}\nf(a) = f^\\prime(a) = \\cdots = f^{(k-1)}(a) = 0\\\\\nf^{(k)}(a) \\neq 0\n\\end{gather}\n\\]\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\(x=a\\) が \\(k\\) 重解であるということは，\\(f(x) = (x-a)^kg(x), g(a)\\neq 0\\) と同値であることに留意して以下示します．\n ▶  十分性\n\\(\\eqref{eq-poly}\\) より\n\\[\n\\begin{align}\nf(x)\n    &=\\frac{f^{(k)}(a)}{k!}(x-a)^k + \\frac{f^{(k+1)}(a)}{(k+1)!}(x-a)^{k+1} + \\cdots +\\frac{f^{(n)}(a)}{n!}(x-a)^n\\\\\n    &= (x-a)^k\\left\\{\\frac{f^{(k)}(a)}{k!} + \\frac{f^{(k+1)}(a)}{(k+1)!}(x-a)^{1} + \\cdots + \\frac{f^{(n)}(a)}{n!}(x-a)^{n-k}\\right\\}\\\\\n    &= (x-a)^kg(x)\n\\end{align}\n\\]\nこのとき，\\(f^{(k)}(a) \\neq 0\\) より \\(g(a)\\neq 0\\). 以上より，十分性は示せた．\n ▶  必要性\n\\(f(x) = (x-a)^kg(x), g(a)\\neq 0\\) のとき，\\(f(a) = 0\\) は自明． この式を \\(m\\) 回微分するとライプニッツルールより\n\\[\n\\begin{aligned}\nf^{(m)}(x) =& (x-a)^kg^{(m)}(x) + \\left(\\begin{array}{c}m\\\\ 1\\end{array}\\right)k(x-a)^{k-1}g^{(m-1)}(x) \\\\\n            &+ \\cdots + \\left(\\begin{array}{c}m\\\\ m\\end{array}\\right)k(k-1)\\cdots(k-m+1)(x-a)^{k-m}g(x)\n\\end{aligned}\n\\]\n\\(m &lt; k\\) であるならば，\\(f^{(m)}(a) = 0\\)，また \\(m = k\\) であるならば\n\\[\nf^{(k)}(a) = k!g(a) \\neq 0\n\\]\n従って，必要性も示された．\n\n\n\n\nExample 4 \n\\[\nf(x) = x^4 + ax^2 + bx + c = 0\n\\]\nが \\(x=1\\) を３重解に持つようにするようにパラメータを定めたいとします．\n\\[\n\\begin{align}\nf(1) &= 1 + a + b + c = 0\\\\\nf^\\prime(1) &= 4 + 2a + b = 0\\\\\nf^{\\prime\\prime}(1) &= 12 + 2a = 0\\\\\nf^{(3)}(1) &= 24 \\neq 0\\\\\n\\end{align}\n\\]\nこれを解くと，\\((a, b, c) = (-6, 8, -3)\\)．これを用いて整理すると\n\\[\nf(x) = (x-1)^3(x+3)\n\\]\nとなります．\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef func_x(x, a, b, c):\n    return x**4 + a*x**2 + b*x + c\n\nx_domain = np.linspace(-4, 4, 100)\n\nplt.plot(x_domain, func_x(x_domain, *(-6, 8, -3)), label='$f(x) = x^4 - 6x^2 + 8x - 3$')\nplt.plot(x_domain, func_x(x_domain, *(-8, 12, -5)), label='$f(x) = (x-1)^2(x^2+2x-5)$')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.axhline(0, color='gray', linestyle='--', linewidth=0.7)\nplt.legend()\nplt.xlim(-4, 4)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1"
  },
  {
    "objectID": "posts/2024-12-07-meta-address/index.html",
    "href": "posts/2024-12-07-meta-address/index.html",
    "title": "IPアドレス 0.0.0.0",
    "section": "",
    "text": "pythonでhttp serverを立てて，Quartoで作成したウェブサイトを以下のコマンドで公開するとします\n% python -m http.server 3000 --directory ./_site/\nServing HTTP on 0.0.0.0 port 3000 (http://0.0.0.0:3000/) ..\nバインド先を設定せずにserverを立ち上げたところ，0.0.0.0 で立ち上げているようです． このとき，Firewallの3000 portをホスト側でAllowすると，同じnetworkの他の端末(例:iPad)からでもアクセスできるようになりました．\n ▶  プライベートIPアドレスをバインド先に指定した場合 \n自宅内のネットワークのみで有効なプライベートIPアドレス（クラスC 192.168.0.0 ~ 192.168.255.255）を指定してhttp serverを立たてみます．\n% python -m http.server 3000 --directory ./_site/ --bind 192.168.10.105\nServing HTTP on 192.168.10.105 port 3000 (http://192.168.10.105:3000/) ...\nこのとき，同じネットワーク内にあるiPadからアクセスできるようになりました． iPad側では http://192.168.10.105:3000 に接続することでQuarto contentsにアクセスできるようになりましたが， このiPad側での操作は 0.0.0.0 で立ち上げたときと同じ操作となります．\n\n❓ Question \npython http.server を使用して 0.0.0.0 にバインドしてhttp serverを立てたときの挙動がプライベートネットワーク内部で割り当てられたプライベートIPアドレスを指定したときと同じ挙動をするのか？\n\n\n\nIPv4において 0.0.0.0 (IPv6では::/0) はSepcial-Purpose Address Registry，つまり特別な目的用に予約されたアドレスです．\n\nRFC6890\n\n\n\n\n\n\nAttribute\nValue\n\n\n\n\nAddress Block\n0.0.0.0/8\n\n\nName\nThis host on this network\n\n\nRFC\n[RFC1122], Section 3.2.1.3\n\n\nAllocation Date\nSeptember 1981\n\n\nTermination Date\nN/A\n\n\nSource\nTrue\n\n\nDestination\nFalse\n\n\nForwardable\nFalse\n\n\nGlobal\nFalse\n\n\nReserved-by-Protocol\nTrue\n\n\n\n上記より0.0.0.0 ~ 0.255.255.255について以下の情報を得ることができます\n\nGlobalセクションがFalseとなっていることから，グローバルIPアドレスとして使用できない．利用はローカルネットワークに限定される\nSourceセクションTrueより，送信元アドレスとして有効\nDestinationセクションFalseより，宛先アドレスとして使用できない = ルーティング不可\n\nただし，0.0.0.0の具体的な意味はここからではまだわかりません．\n ▶  0.0.0.0/0 vs 0.0.0.0/32 \n\n\n\n\n\n\n\n\nAttribute\n0.0.0.0/0\n0.0.0.0/32\n\n\n\n\nSubnet Mask\n0.0.0.0 (all bits variable)\n255.255.255.255 (all bits fixed)\n\n\nRange\nAll IPv4 addresses (0.0.0.0 to 255.255.255.255)\n0.0.0.0\n\n\n\n\n\n\nバインド先を指定しないでhttp serverを立てるとき，バインド先を指定しない = 有効な宛先がないことを意味します． このとき使用されるのが 0.0.0.0 です．\nこの文脈での 0.0.0.0 は catch-all wildcard と呼ばれるもので，同じネットワーク上のすべてのインターフェースに対して， バインドするという特別な意味を持っています．コンピューターが複数のネットワークに接続していて，すべてのネットワークにバインドしたい場合に 0.0.0.0を指定します．ただし，不必要に使用してしまうと誤って外部のネットワークに共有してしまったりするので使用は控えたほうが良いです．\n\n📘 REMARKS \n\nPython HTTP Serverにおける 0.0.0.0 はルーティングにおけるデフォルトルートとしての0.0.0.0は異なります\n文脈に応じて 0.0.0.0 が指す内容が異なることに注意してください\npython hhtp.serverの文脈では0.0.0.0にバインドすると以下のインターフェースからアクセス可能となります\n\nLocalhost (127.0.0.1)\nThe private network (例: 192.168.x.x)\nPublic network interfaces (Firewallでアクセスを許容していた場合)\n\n\n\nPython http serverをprivate networkに限定する意図を込めて，以下のスクリプトでホスティングすることが望ましいです\n$ python3 -m http.server -b &lt;your-local-private-network IP&gt; 8080 --directory ./_site/"
  },
  {
    "objectID": "posts/2024-12-07-meta-address/index.html#ipアドレス-0.0.0.0にバインド",
    "href": "posts/2024-12-07-meta-address/index.html#ipアドレス-0.0.0.0にバインド",
    "title": "IPアドレス 0.0.0.0",
    "section": "",
    "text": "pythonでhttp serverを立てて，Quartoで作成したウェブサイトを以下のコマンドで公開するとします\n% python -m http.server 3000 --directory ./_site/\nServing HTTP on 0.0.0.0 port 3000 (http://0.0.0.0:3000/) ..\nバインド先を設定せずにserverを立ち上げたところ，0.0.0.0 で立ち上げているようです． このとき，Firewallの3000 portをホスト側でAllowすると，同じnetworkの他の端末(例:iPad)からでもアクセスできるようになりました．\n ▶  プライベートIPアドレスをバインド先に指定した場合 \n自宅内のネットワークのみで有効なプライベートIPアドレス（クラスC 192.168.0.0 ~ 192.168.255.255）を指定してhttp serverを立たてみます．\n% python -m http.server 3000 --directory ./_site/ --bind 192.168.10.105\nServing HTTP on 192.168.10.105 port 3000 (http://192.168.10.105:3000/) ...\nこのとき，同じネットワーク内にあるiPadからアクセスできるようになりました． iPad側では http://192.168.10.105:3000 に接続することでQuarto contentsにアクセスできるようになりましたが， このiPad側での操作は 0.0.0.0 で立ち上げたときと同じ操作となります．\n\n❓ Question \npython http.server を使用して 0.0.0.0 にバインドしてhttp serverを立てたときの挙動がプライベートネットワーク内部で割り当てられたプライベートIPアドレスを指定したときと同じ挙動をするのか？\n\n\n\nIPv4において 0.0.0.0 (IPv6では::/0) はSepcial-Purpose Address Registry，つまり特別な目的用に予約されたアドレスです．\n\nRFC6890\n\n\n\n\n\n\nAttribute\nValue\n\n\n\n\nAddress Block\n0.0.0.0/8\n\n\nName\nThis host on this network\n\n\nRFC\n[RFC1122], Section 3.2.1.3\n\n\nAllocation Date\nSeptember 1981\n\n\nTermination Date\nN/A\n\n\nSource\nTrue\n\n\nDestination\nFalse\n\n\nForwardable\nFalse\n\n\nGlobal\nFalse\n\n\nReserved-by-Protocol\nTrue\n\n\n\n上記より0.0.0.0 ~ 0.255.255.255について以下の情報を得ることができます\n\nGlobalセクションがFalseとなっていることから，グローバルIPアドレスとして使用できない．利用はローカルネットワークに限定される\nSourceセクションTrueより，送信元アドレスとして有効\nDestinationセクションFalseより，宛先アドレスとして使用できない = ルーティング不可\n\nただし，0.0.0.0の具体的な意味はここからではまだわかりません．\n ▶  0.0.0.0/0 vs 0.0.0.0/32 \n\n\n\n\n\n\n\n\nAttribute\n0.0.0.0/0\n0.0.0.0/32\n\n\n\n\nSubnet Mask\n0.0.0.0 (all bits variable)\n255.255.255.255 (all bits fixed)\n\n\nRange\nAll IPv4 addresses (0.0.0.0 to 255.255.255.255)\n0.0.0.0\n\n\n\n\n\n\nバインド先を指定しないでhttp serverを立てるとき，バインド先を指定しない = 有効な宛先がないことを意味します． このとき使用されるのが 0.0.0.0 です．\nこの文脈での 0.0.0.0 は catch-all wildcard と呼ばれるもので，同じネットワーク上のすべてのインターフェースに対して， バインドするという特別な意味を持っています．コンピューターが複数のネットワークに接続していて，すべてのネットワークにバインドしたい場合に 0.0.0.0を指定します．ただし，不必要に使用してしまうと誤って外部のネットワークに共有してしまったりするので使用は控えたほうが良いです．\n\n📘 REMARKS \n\nPython HTTP Serverにおける 0.0.0.0 はルーティングにおけるデフォルトルートとしての0.0.0.0は異なります\n文脈に応じて 0.0.0.0 が指す内容が異なることに注意してください\npython hhtp.serverの文脈では0.0.0.0にバインドすると以下のインターフェースからアクセス可能となります\n\nLocalhost (127.0.0.1)\nThe private network (例: 192.168.x.x)\nPublic network interfaces (Firewallでアクセスを許容していた場合)\n\n\n\nPython http serverをprivate networkに限定する意図を込めて，以下のスクリプトでホスティングすることが望ましいです\n$ python3 -m http.server -b &lt;your-local-private-network IP&gt; 8080 --directory ./_site/"
  },
  {
    "objectID": "posts/2024-12-07-meta-address/index.html#references",
    "href": "posts/2024-12-07-meta-address/index.html#references",
    "title": "IPアドレス 0.0.0.0",
    "section": "References",
    "text": "References\n\nRFC5735"
  },
  {
    "objectID": "posts/2025-01-27-differentiation_of_exponential_function/index.html",
    "href": "posts/2025-01-27-differentiation_of_exponential_function/index.html",
    "title": "指数関数の微分",
    "section": "",
    "text": "底 \\(a&gt;1\\) のとき，\n\n指数関数 \\(y = a^x\\) は区間 \\(-\\infty &lt; x &lt; \\infty\\) において連続かつ単調増大で, \\(y \\in (0, \\infty)\\)\n対数関数 \\(y = \\log_a x\\) は \\(y = a^x\\) の逆関数で，区間 \\(0 &lt; x &lt; \\infty\\) において連続かつ単調増大で, \\(y \\in (\\infty, \\infty)\\)\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# PARAMS\nbase = 2\nN = 1000 # data points\nmin_lim = -2\nmax_lim = 5\nx = np.linspace(min_lim, max_lim, N)\n\n# exponential\ny_exp = base ** x\n\n# logarithm\ny_log = np.log(x[x&gt;0]) / np.log(base) \n\n# plot\nfig, ax = plt.subplots(ncols=1)\nax.plot(x, y_exp, label='$ y = a^x$')\nax.plot(x[x&gt;0], y_log, label='$y = \\log_a x$')\nax.plot(x*0.8, x*0.8, label='45 Degree Line', linestyle='--', color='gray')\nax.axhline(0, color='black', linewidth=0.5)\nax.axvline(0, color='black', linewidth=0.5)\nax.set_xlim(min_lim, max_lim)\nax.set_xticks([])\nax.set_yticks([])\nax.text(0, 0, 'O', fontsize=12, ha='right')\nax.text(1, -0.5, '1', fontsize=12, ha='right')\nax.text(0, 1, '1', fontsize=12, ha='right')\nax.set_ylim(min_lim, max_lim)\nax.set_xlabel('$x$')\nax.set_ylabel('$y$')\nfor spine in ax.spines.values():\n    spine.set_visible(False)\nax.legend()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: 指数関数と対数関数\n\n\n\n\n\nTheorem 1 \n任意の \\(a &gt; 0\\) に対して，\\(y = a^x\\) の導関数は\n\\[\n\\frac{d(a^x)}{dx} = a^x\\log a\n\\]\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\(a &gt; 1\\) のケースを考える\n\\[\n\\begin{align}\n\\frac{d(a^x)}{dx}\n    &= \\lim_{h\\to 0}\\frac{a^{x+h} - a^x}{h}\\\\\n    &= a^x\\lim_{h\\to 0}\\frac{a^{h} - 1}{h}\\label{base-eq}\n\\end{align}\n\\]\n ▶  \\(h &gt; 0\\)の場合\n\\(h &gt; 0\\) であるならば，\\(a^h &gt; 1\\)．よって\n\\[\na^h = 1 + \\frac{1}{t}\n\\]\nとおくと，\\(t &gt; 0\\)．指数関数の連続性より，\\(h\\to 0\\) のとき，\\(a^h\\to 1\\). 従って，\\(t\\to\\infty\\)．\nここで，\\(\\displaystyle h = \\log_a\\left(1 + \\frac{1}{t}\\right)\\) より\n\\[\n\\begin{align}\n\\frac{a^{h} - 1}{h}\n    & = \\frac{1/t}{\\log_a\\left(1 + \\frac{1}{t}\\right)}\\\\\n    &= \\frac{1}{\\log_a\\left(1 + \\frac{1}{t}\\right)^t}\n\\end{align}\n\\]\n\\[\n\\lim_{t\\to\\infty}\\left(1 + \\frac{1}{t}\\right)^t = e\n\\]\n対数関数 \\(\\log_a(x)\\) は連続関数なので，\\(h\\to 0\\) のとき，\\(\\log_a\\left(1 + \\frac{1}{t}\\right)^t\\to \\log_a e\\)．従って，\n\\[\n\\begin{align}\n\\lim_{h\\to 0}\\frac{a^{h} - 1}{h}\n    &= \\frac{1}{\\log_a e}\\\\\n    &= \\log a\n\\end{align}\n\\]\n ▶  \\(h &lt; 0\\)の場合\n\\(h = -z\\) を満たす \\(z&gt;0\\) を考える．このとき，\n\\[\n\\begin{align}\n\\frac{a^h - 1}{h}\n    &= \\frac{a^{-z} - 1}{-z}\\\\\n    &= \\frac{1 - a^z}{-z}\\frac{1}{a^z}\\\\\n    &= \\frac{a^z - 1}{z}\\frac{1}{a^z}\n\\end{align}\n\\]\n\\(z\\to 0\\) のとき，\\(a^z \\to 1\\) なので\n\\[\n\\frac{a^h - 1}{h}\\to \\log a\n\\]\n従って，\\(a &gt; 1\\) のとき，\\(\\displaystyle \\frac{d(a^x)}{dx} = a^x \\log a\\)\n ▶  \\(0 &lt; a &lt; 1\\) の場合 \n\\(\\eqref{base-eq}\\) と展開したとき，\\(h&gt;0\\) のとき \\(a^h &lt; 1\\) となるので\n\\[\na^h = 1 - \\frac{1}{t}\\qquad(t&gt;0)\n\\]\n指数関数の連続性より, \\(h\\to 0\\) のとき，\\(a^h\\to 0\\)，従って，\\(t\\to\\infty\\)．\n\\[\n\\begin{align}\n\\frac{a^h-1}{h}\n    &= \\frac{-\\frac{1}{t}}{\\log_a(1 - \\frac{1}{t})}\\\\\n    &= -\\frac{1}{\\log_a(1 - \\frac{1}{t})^{t}}\n\\end{align}\n\\]\nここで\n\\[\n\\lim_{t\\to\\infty} (1 - \\frac{1}{t})^{t} = \\frac{1}{e}\n\\]\nであるので，対数関数の連続性より，\\(h\\to 0\\) のとき \\(h\\to\\infty\\) だから\n\\[\n\\log_a\\left(1 - \\frac{1}{t}\\right)^{t}\\to \\log_a\\frac{1}{e} = -\\log_a e\n\\]\n従って，\n\\[\n\\lim_{h\\to 0}\\frac{a^h-1}{h} = \\log a\n\\]\n\\(h&lt;0\\) の場合も同様に示せるので，以上より\n任意の \\(a &gt; 0\\) に対して，\\(y = a^x\\) の導関数は\n\\[\n\\frac{d(a^x)}{dx} = a^x\\log a\n\\]\nが成立する．\n\n\n\n\n\n\\(a &gt; 0\\) としたとき，\n\\[\n\\log a^x = x\\log a\n\\]\nこのとき，両辺を \\(x\\) で微分すると\n\\[\n\\frac{D(a^x)}{a^x} = \\log a\n\\]\n従って，\n\\[\nD(a^x) = a^x\\log a\n\\]\nを得る．"
  },
  {
    "objectID": "posts/2025-01-27-differentiation_of_exponential_function/index.html#指数関数の微分",
    "href": "posts/2025-01-27-differentiation_of_exponential_function/index.html#指数関数の微分",
    "title": "指数関数の微分",
    "section": "",
    "text": "底 \\(a&gt;1\\) のとき，\n\n指数関数 \\(y = a^x\\) は区間 \\(-\\infty &lt; x &lt; \\infty\\) において連続かつ単調増大で, \\(y \\in (0, \\infty)\\)\n対数関数 \\(y = \\log_a x\\) は \\(y = a^x\\) の逆関数で，区間 \\(0 &lt; x &lt; \\infty\\) において連続かつ単調増大で, \\(y \\in (\\infty, \\infty)\\)\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# PARAMS\nbase = 2\nN = 1000 # data points\nmin_lim = -2\nmax_lim = 5\nx = np.linspace(min_lim, max_lim, N)\n\n# exponential\ny_exp = base ** x\n\n# logarithm\ny_log = np.log(x[x&gt;0]) / np.log(base) \n\n# plot\nfig, ax = plt.subplots(ncols=1)\nax.plot(x, y_exp, label='$ y = a^x$')\nax.plot(x[x&gt;0], y_log, label='$y = \\log_a x$')\nax.plot(x*0.8, x*0.8, label='45 Degree Line', linestyle='--', color='gray')\nax.axhline(0, color='black', linewidth=0.5)\nax.axvline(0, color='black', linewidth=0.5)\nax.set_xlim(min_lim, max_lim)\nax.set_xticks([])\nax.set_yticks([])\nax.text(0, 0, 'O', fontsize=12, ha='right')\nax.text(1, -0.5, '1', fontsize=12, ha='right')\nax.text(0, 1, '1', fontsize=12, ha='right')\nax.set_ylim(min_lim, max_lim)\nax.set_xlabel('$x$')\nax.set_ylabel('$y$')\nfor spine in ax.spines.values():\n    spine.set_visible(False)\nax.legend()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: 指数関数と対数関数\n\n\n\n\n\nTheorem 1 \n任意の \\(a &gt; 0\\) に対して，\\(y = a^x\\) の導関数は\n\\[\n\\frac{d(a^x)}{dx} = a^x\\log a\n\\]\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\(a &gt; 1\\) のケースを考える\n\\[\n\\begin{align}\n\\frac{d(a^x)}{dx}\n    &= \\lim_{h\\to 0}\\frac{a^{x+h} - a^x}{h}\\\\\n    &= a^x\\lim_{h\\to 0}\\frac{a^{h} - 1}{h}\\label{base-eq}\n\\end{align}\n\\]\n ▶  \\(h &gt; 0\\)の場合\n\\(h &gt; 0\\) であるならば，\\(a^h &gt; 1\\)．よって\n\\[\na^h = 1 + \\frac{1}{t}\n\\]\nとおくと，\\(t &gt; 0\\)．指数関数の連続性より，\\(h\\to 0\\) のとき，\\(a^h\\to 1\\). 従って，\\(t\\to\\infty\\)．\nここで，\\(\\displaystyle h = \\log_a\\left(1 + \\frac{1}{t}\\right)\\) より\n\\[\n\\begin{align}\n\\frac{a^{h} - 1}{h}\n    & = \\frac{1/t}{\\log_a\\left(1 + \\frac{1}{t}\\right)}\\\\\n    &= \\frac{1}{\\log_a\\left(1 + \\frac{1}{t}\\right)^t}\n\\end{align}\n\\]\n\\[\n\\lim_{t\\to\\infty}\\left(1 + \\frac{1}{t}\\right)^t = e\n\\]\n対数関数 \\(\\log_a(x)\\) は連続関数なので，\\(h\\to 0\\) のとき，\\(\\log_a\\left(1 + \\frac{1}{t}\\right)^t\\to \\log_a e\\)．従って，\n\\[\n\\begin{align}\n\\lim_{h\\to 0}\\frac{a^{h} - 1}{h}\n    &= \\frac{1}{\\log_a e}\\\\\n    &= \\log a\n\\end{align}\n\\]\n ▶  \\(h &lt; 0\\)の場合\n\\(h = -z\\) を満たす \\(z&gt;0\\) を考える．このとき，\n\\[\n\\begin{align}\n\\frac{a^h - 1}{h}\n    &= \\frac{a^{-z} - 1}{-z}\\\\\n    &= \\frac{1 - a^z}{-z}\\frac{1}{a^z}\\\\\n    &= \\frac{a^z - 1}{z}\\frac{1}{a^z}\n\\end{align}\n\\]\n\\(z\\to 0\\) のとき，\\(a^z \\to 1\\) なので\n\\[\n\\frac{a^h - 1}{h}\\to \\log a\n\\]\n従って，\\(a &gt; 1\\) のとき，\\(\\displaystyle \\frac{d(a^x)}{dx} = a^x \\log a\\)\n ▶  \\(0 &lt; a &lt; 1\\) の場合 \n\\(\\eqref{base-eq}\\) と展開したとき，\\(h&gt;0\\) のとき \\(a^h &lt; 1\\) となるので\n\\[\na^h = 1 - \\frac{1}{t}\\qquad(t&gt;0)\n\\]\n指数関数の連続性より, \\(h\\to 0\\) のとき，\\(a^h\\to 0\\)，従って，\\(t\\to\\infty\\)．\n\\[\n\\begin{align}\n\\frac{a^h-1}{h}\n    &= \\frac{-\\frac{1}{t}}{\\log_a(1 - \\frac{1}{t})}\\\\\n    &= -\\frac{1}{\\log_a(1 - \\frac{1}{t})^{t}}\n\\end{align}\n\\]\nここで\n\\[\n\\lim_{t\\to\\infty} (1 - \\frac{1}{t})^{t} = \\frac{1}{e}\n\\]\nであるので，対数関数の連続性より，\\(h\\to 0\\) のとき \\(h\\to\\infty\\) だから\n\\[\n\\log_a\\left(1 - \\frac{1}{t}\\right)^{t}\\to \\log_a\\frac{1}{e} = -\\log_a e\n\\]\n従って，\n\\[\n\\lim_{h\\to 0}\\frac{a^h-1}{h} = \\log a\n\\]\n\\(h&lt;0\\) の場合も同様に示せるので，以上より\n任意の \\(a &gt; 0\\) に対して，\\(y = a^x\\) の導関数は\n\\[\n\\frac{d(a^x)}{dx} = a^x\\log a\n\\]\nが成立する．\n\n\n\n\n\n\\(a &gt; 0\\) としたとき，\n\\[\n\\log a^x = x\\log a\n\\]\nこのとき，両辺を \\(x\\) で微分すると\n\\[\n\\frac{D(a^x)}{a^x} = \\log a\n\\]\n従って，\n\\[\nD(a^x) = a^x\\log a\n\\]\nを得る．"
  },
  {
    "objectID": "posts/2024-12-16-ssh-to-macos/index.html",
    "href": "posts/2024-12-16-ssh-to-macos/index.html",
    "title": "macOSへのssh接続",
    "section": "",
    "text": "同じprivate networkに属しているmacOS端末に対して公開鍵認証を用いてssh接続したい\n\n同じprovate networkに属している前提の端末へのsshになるので\nssh hoshinokirby@192.168.10.110\nのように自宅内のネットワークのみで有効なプライベートIPアドレス（クラスC 192.168.0.0 ~ 192.168.255.255）を指定してアクセスすることを想定しています．"
  },
  {
    "objectID": "posts/2024-12-16-ssh-to-macos/index.html#what-we-want-to-do",
    "href": "posts/2024-12-16-ssh-to-macos/index.html#what-we-want-to-do",
    "title": "macOSへのssh接続",
    "section": "",
    "text": "同じprivate networkに属しているmacOS端末に対して公開鍵認証を用いてssh接続したい\n\n同じprovate networkに属している前提の端末へのsshになるので\nssh hoshinokirby@192.168.10.110\nのように自宅内のネットワークのみで有効なプライベートIPアドレス（クラスC 192.168.0.0 ~ 192.168.255.255）を指定してアクセスすることを想定しています．"
  },
  {
    "objectID": "posts/2024-12-16-ssh-to-macos/index.html#how-to-set-up",
    "href": "posts/2024-12-16-ssh-to-macos/index.html#how-to-set-up",
    "title": "macOSへのssh接続",
    "section": "How to set up",
    "text": "How to set up\n ▶  Server側\nSSHサーバー側はopenssh-serverなりssh serverが動いている必要があります．\n\nSystem Preferences &gt; Sharingをクリック\nRemote Loginを有効化\n\n以上の2ステップで，macOS側のSSH serverをactive状態にすることができます．\n ▶  Client側\nパスワード認証の場合は\n\narpコマンドでアクセス先端末のプライベートIPアドレスを検索\nsshコマンドでアクセス\n\nで完了となりますが，今回は公開鍵認証手順を紹介します．公開鍵認証の場合は\n\nSSH Key Pair の作成\n公開鍵の登録(接続先のauthorized_keysファイル（~/.ssh/authorized_keys）に追加)\nsshコマンドでアクセスとなります\n\n\n\nSSH Key Pair の作成\n\nssh-keygen -t rsa -b 4096 -f ~/.ssh/pupupu_land\n\n\n-t rsa: key typeの指定\n-b 4096: key lengthの指定(長いほどsecurity強固になる)\n-f  ~/.ssh/pupupu_land: key pairの生成先とファイル名（今回はpupupu_land, pupupu_land.pubが生成される）\n\n\n\n公開鍵の登録\n\nssh-copy-id -i ~/.ssh/pupupu_land.pub username@&lt;target-ip&gt;\n\n\n-i ~/.ssh/pupupu_land.pub: コピーする公開鍵ファイルを指定\n\n公開鍵を登録するには，\n\n公開鍵のファイルをコピー\n接続先のauthorized_keysファイル（~/.ssh/authorized_keys）に追加\nauthorized_keysファイルがない場合は作成後に適切なパーミッションを設定\n\nが必要となりますが，ssh-copy-idコマンドですべて自動実行することができるというメリットがあります．\n ▶  ssh connection\n上記の設定後，sshコマンド実行することで，macOSへアクセスすることができます． 毎回プライベートIPアドレスを調べるのが億劫な場合，デバイスのMACアドレスがわかればarpコマンドで以下のように検索することもできます．\narp -a | grep &lt;MAC-address&gt; | awk -F'[()]' '{print $2}'"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "某経済学研究科修士取得後，どこかのデータサイエンス（コンサル）会社に勤務してます． Arsenalが好きです．"
  },
  {
    "objectID": "posts/2025-02-03-continuous-function/index.html",
    "href": "posts/2025-02-03-continuous-function/index.html",
    "title": "関数の連続性",
    "section": "",
    "text": "変数 \\(x\\) が限りなく \\(a\\) に近づくとき，\\(f(x)\\) も \\(f(a)\\) に近づくならば，\\(f(x)\\) は \\(x=a\\) において連続である，といいます．つまり，\n\\[\nx\\to a \\text{ ならば } f(x) \\to f(a)\n\\]\n\nDef: \\(\\epsilon\\)-\\(\\delta\\) 論法的連続性 \n任意の \\(\\epsilon &gt;0\\) に対して，ある \\(\\delta &gt; 0\\) が存在して，\n\\[\n\\vert x - a \\vert &lt; \\delta \\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\epsilon\n\\]\nを満たすとき，\\(x=a\\) において \\(f(x)\\) は連続であるという．\n\n\nExample 1 \n\\(f(x) = \\sqrt{x}\\) について，\\(a &gt; 0\\) で連続であることを以下示します．\n\\[\n\\begin{align}\n\\vert \\sqrt{x} - \\sqrt{a} \\vert\n    &= \\left\\vert\\frac{(\\sqrt{x} - \\sqrt{a})(\\sqrt{x} + \\sqrt{a})}{\\sqrt{x}+\\sqrt{a}}\\right\\vert\\\\\n    &= \\left\\vert\\frac{x - a}{\\sqrt{x}+\\sqrt{a}}\\right\\vert\\\\\n    &\\leq \\left\\vert\\frac{x - a}{\\sqrt{a}}\\right\\vert\n\\end{align}\n\\]\nここで，\\(\\vert x - a\\vert &lt; \\delta(\\epsilon) = \\epsilon\\sqrt{a}\\) と定めると\n\\[\n\\vert x - a\\vert &lt; \\delta(\\epsilon) \\Rightarrow \\vert \\sqrt{x} - \\sqrt{a}\\vert &lt; \\epsilon\n\\]\n\n\n\nExample 2 : 三角関数の連続性 \n\\(x = a + h\\) とおくと，和積の公式を用いて\n\\[\n\\begin{align}\n\\vert \\sin(x) - \\sin(a) \\vert\n    &= 2\\left\\vert \\cos\\frac{x+a}{2}\\sin\\frac{x-a}{2} \\right\\vert\\\\\n    &= 2\\left\\vert \\cos\\left(a + \\frac{h}{2}\\right)\\sin\\frac{h}{2} \\right\\vert\\\\\n    &\\leq 2\\left\\vert\\frac{h}{2}\\right\\vert \\cdot 1\\\\\n    &=\\vert h \\vert\n\\end{align}\n\\]\n\\(\\cos x = \\sin\\left(x + \\frac{\\pi}{2}\\right)\\) であるので，\\(\\sin x\\) が連続であるならば, \\(\\cos x\\) も連続．\n\n\n\n\nTheorem 1  : 連続関数の定数倍\n\\(f(x)\\) は \\(x=a\\) で連続であるとします．このとき，定数 \\(c\\) を用いた \\(cf(x)\\) も \\(x=a\\) にて連続となります．\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n仮定より\n\\[\n\\forall \\eta &gt; 0, \\exists \\delta(\\eta) &gt; 0, \\vert x - a\\vert &lt; \\delta(\\eta)\\Rightarrow\\vert f(x) - f(a)\\vert &lt; \\eta\n\\]\nこのとき，任意の \\(\\epsilon &gt; 0\\) に対して，\n\\[\n\\eta = \\frac{\\epsilon}{\\vert c \\vert} &gt;0\n\\]\nと対応させると，\n\\[\n\\forall \\epsilon &gt; 0, \\exists \\delta(\\epsilon) &gt; 0, \\vert x - a\\vert &lt; \\delta(\\epsilon)\\Rightarrow\\vert f(x) - f(a)\\vert &lt; \\frac{\\epsilon}{\\vert c \\vert }\n\\]\nつまり，\n\\[\n\\forall \\epsilon &gt; 0, \\exists \\delta(\\epsilon) &gt; 0, \\vert x - a\\vert &lt; \\delta(\\epsilon)\\Rightarrow \\vert c\\vert\\vert f(x) - f(a)\\vert &lt; \\epsilon\n\\]\nこれを変形すると\n\\[\n\\forall \\epsilon &gt; 0, \\exists \\delta(\\epsilon) &gt; 0, \\vert x - a\\vert &lt; \\delta(\\epsilon)\\Rightarrow \\vert cf(x) - cf(a)\\vert &lt; \\epsilon\n\\]\n\n\n\n\n\nTheorem 2 : 連続関数の和\n\n\\(f(x), g(x)\\) は \\(x=a\\) で連続であるとします．このとき，\\(f(x) + g(x)\\) も \\(x=a\\) にて連続となります．\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n仮定より\n\\[\n\\begin{align}\n\\vert x - a \\vert &lt; \\delta&\\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\epsilon/2\\\\\n\\vert x - a \\vert &lt; \\eta&\\Rightarrow \\vert g(x) - g(a)\\vert &lt; \\epsilon/2\n\\end{align}\n\\]\nここで，\\(M = \\min(\\delta, \\eta)\\) とすると，\n\\[\n\\begin{align}\n\\vert x - a \\vert &lt; M&\\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\epsilon/2\\\\\n\\vert x - a \\vert &lt; M&\\Rightarrow \\vert g(x) - g(a)\\vert &lt; \\epsilon/2\n\\end{align}\n\\]\nまた\n\\[\n\\begin{align}\n\\vert(f(x) - g(x)) - (f(a) + g(a))\n    &= \\vert(f(x) - f(a)) + (g(x) + g(a))\\vert\\\\\n    &\\leq \\vert(f(x) - f(a))\\vert + \\vert (g(x) + g(a))\\vert\n\\end{align}\n\\]\n従って，\\(\\vert x - a \\vert &lt; M\\) であるならば\n\\[\n\\begin{align}\n\\vert (g(x) + f(x)) - (g(a) + f(a))\\vert \\leq \\vert(f(x) - f(a))\\vert + \\vert (g(x) + g(a))\\vert &lt; \\epsilon\n\\end{align}\n\\]\n\n\n\n\n\nTheorem 3  : 連続関数の線型結合\n\\(f(x), g(x)\\) は \\(x=a\\) で連続であるとします．このとき，定数 \\(c_1, c_2\\)に対して \\(c_1f(x) + c_2g(x)\\) も \\(x=a\\) にて連続となります．\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\[\n\\begin{align}\n\\vert x - a \\vert &lt; \\delta&\\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\frac{\\epsilon}{2\\vert c_1\\vert}\\\\\n\\vert x - a \\vert &lt; \\eta&\\Rightarrow \\vert g(x) - g(a)\\vert &lt; \\frac{\\epsilon}{2\\vert c_2\\vert}\n\\end{align}\n\\]\nとして，\\(M = \\min(\\delta, \\eta)\\) とすれば，上記と同様に連続性を示すことができます．\n\n\n\n\n\nTheorem 4  : 連続関数の積\n\\(f(x), g(x)\\) は \\(x=a\\) で連続であるとします．このとき，\\(f(x)g(x)\\) も \\(x=a\\) にて連続となります．\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\[\n\\vert x - a \\vert &lt; \\delta(1) \\Rightarrow \\vert f(x) - f(a)\\vert &lt; 1\n\\]\nとすると，\n\\[\n\\vert x - a \\vert &lt; \\delta(1) \\Rightarrow \\vert f(x) \\vert &lt; 1 + \\vert f(a) \\vert\n\\]\n\\(\\delta, \\eta\\) を以下のように定め，\n\\[\n\\begin{align}\n\\vert x - a \\vert &lt; \\delta &\\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\frac{\\epsilon}{2(1 + \\vert f(a) \\vert + \\vert g(a) \\vert)}\\\\\n\\vert x - a \\vert &lt; \\eta &\\Rightarrow \\vert g(x) - g(a)\\vert &lt; \\frac{\\epsilon}{2(1 + \\vert f(a) \\vert + \\vert g(a) \\vert)}\n\\end{align}\n\\]\n\\[\n\\delta(\\epsilon) = \\min (\\delta(1), \\delta, \\eta)\n\\]\nとすると，\n\\[\n\\begin{align}\n\\vert x - a \\vert &lt; \\delta(\\epsilon)\n    \\Rightarrow &\\vert f(x)g(x) - f(a)g(a)\\vert\\\\[5pt]\n    &= \\vert f(x)(g(x) - g(a)) + g(a)(f(x) - f(a))\\vert\\\\[5pt]\n    &\\leq \\vert f(x)\\vert \\vert(g(x) - g(a))\\vert + \\vert g(a)\\vert\\vert(f(x) - f(a))\\vert\\\\[5pt]\n    &&lt; (1 + \\vert f(a) \\vert)\\frac{\\epsilon}{2(1 + \\vert f(a) \\vert + \\vert g(a) \\vert)} + \\vert g(a)\\vert \\frac{\\epsilon}{2(1 + \\vert f(a) \\vert + \\vert g(a) \\vert)}\\\\\n    &= \\epsilon\n\\end{align}\n\\]\nよって，連続性が示された．\n\n\n\n\n\nTheorem 5  連続関数の逆数 \n\\(f(x)\\) は \\(x=a\\) で連続であるとします．このとき，\\(f(a)\\neq 0\\) であるならば \\(1/f(x)\\) も \\(x=a\\) にて連続となります．\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n連続性の仮定より\n\\[\n\\vert x - a \\vert &lt; \\delta(\\vert f(a)/2\\vert) \\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\frac{\\vert f(a)\\vert}{2}\n\\]\nとすると，\n\\[\n\\vert x - a \\vert &lt; \\delta(\\vert f(a)/2\\vert) \\Rightarrow \\frac{\\vert f(a)\\vert}{2} &lt; \\vert f(x)\\vert\n\\]\nこのとき，\n\\[\n\\begin{align}\n\\left\\vert \\frac{1}{f(x)} - \\frac{1}{f(a)} \\right\\vert\n    &= \\left\\vert \\frac{f(x) - f(a)}{f(x)f(a)} \\right\\vert\\\\\n    &&lt; \\left\\vert \\frac{f(x) - f(a)}{(f(a))^2 / 2} \\right\\vert\n\\end{align}\n\\]\n従って，\\(\\vert x - a \\vert &lt; \\eta \\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\displaystyle\\frac{\\epsilon\\vert (f(a))^2\\vert}{2}\\) となるような \\(\\eta\\) を用いて，\n\\[\n\\delta(\\epsilon) = \\min(\\delta(\\vert f(a)/2\\vert), \\eta)\n\\]\nとすれば\n\\[\n\\vert x - a \\vert &lt; \\delta(\\epsilon) \\Rightarrow \\left\\vert \\frac{1}{f(x)} - \\frac{1}{f(a)} \\right\\vert &lt; \\epsilon\n\\]\n\n\n\n\n\n点 \\(a\\) における極限を考えるとき，\n\n\\(x\\) が増大しつつ \\(a\\) に（左側から）近づく, \\(\\lim_{x\\to a-0}\\)\n\\(x\\) が減少しつつ \\(a\\) に（右側から）近づく, \\(\\lim_{x\\to a+0}\\)\n\nそれぞれの場合を分けて取り扱うことがあります．\n\nExample 3 \n\\(f(x) = \\tan x\\) について，\\(x = \\pi/2\\) における極限を考えてみます．\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sympy as sy\n\nx = sy.Symbol('x')\nf = sy.tan(x)\n\nx_vals = np.linspace(-np.pi/2+1e-6, np.pi, 400)\ny_vals = np.tan(x_vals)\n\nplt.figure(figsize=(8, 6))\nplt.plot(x_vals, y_vals, label=r'$f(x) = \\tan(x)$')\nplt.ylim(-10, 10)\nplt.xticks([-np.pi/2, 0, np.pi/2, np.pi], [r'$-\\frac{\\pi}{2}$', '0', r'$\\frac{\\pi}{2}$', r'$\\pi$'])\nplt.axvline(np.pi/2, color='r', linestyle='--', label=r'$x = \\frac{\\pi}{2}$')\nplt.axhline(0, color='black',linewidth=0.5)\nplt.axvline(0, color='black',linewidth=0.5)\nplt.title(r'Plot of $f(x) = \\tan(x)$ around $x = \\frac{\\pi}{2}$')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1\n\n\n\n上記の図のように，\n\\[\n\\begin{align}\n\\lim_{x\\to \\pi/2+0} \\tan x &= -\\infty\\\\\n\\lim_{x\\to \\pi/2-0} \\tan x &= \\infty\n\\end{align}\n\\]\n実際に，sympy で確認してみると\n\n# DO NOT USE np.pi\nprint(f\"左極限: {sy.limit(sy.tan(x), x, sy.pi/2, '-')}\")\nprint(f\"右極限: {sy.limit(sy.tan(x), x, sy.pi/2, '+')}\")\n\n左極限: oo\n右極限: -oo\n\n\n\n\n ▶  右連続と左連続\n\\[\n\\begin{align}\nf(a) &= \\alpha\\\\[5pt]\n\\lim_{x\\to a-0} f(x) &= \\alpha\\\\\n\\lim_{x\\to a+0} f(x) &= \\beta \\neq \\alpha\n\\end{align}\n\\]\nのとき，\\(f(x)\\) は \\(x = a\\) において左連続といいます．\n\\(f(x)\\) が閉区間 \\([a, b]\\) において定義されているとき，\n\n\\(x=a\\) においては右連続\n\\(x=b\\) においては左連続\n\nであることを意味します．開区間 \\((a, b)\\) において定義されているとき，\\(f(a+0)\\) が確定ならば，それを \\(f(a)\\) として定義域を \\([a, b)\\) 区間に拡張すると \\(f(x)\\) は \\(x=a\\) において右連続になります．\n一方，\\((0, \\infty)\\) 区間で定義された関数 \\(\\displaystyle f(x) = \\frac{1}{x}\\) は開区間では連続ですが，\\(x = 0\\) のときは定義されません．このとき，\\(f(0) = 0\\) として定義域を \\([0, \\infty)\\) に拡張すると，\\(x=0\\) で連続な関数にはなりませんし，\\(f(0)\\) をどんな値にしたとしても，\\(x=0\\) の近傍において, \\(f(x)\\) はいくらでも大きくなってしまうので，連続な関数にはなりません．\n\n📘 REMARKS \n\n開区間 \\((a, b)\\) で定義された連続な関数が，開区間 \\([a, b]\\) の連続な関数に拡張できるとは限らない\n\n\n\nExample 4  : 右連続関数と累積分布関数 \n離散確率変数 \\(X\\sim\\operatorname{Bin}(5, 1/3)\\) を考えます．離散確率変数の累積分布関数 \\(F(x)\\) は\n\\[\nF(x) = \\operatorname{P}(X \\leq x) = \\sum_{y\\leq x}p(y) \\qquad p(y): \\text{確率関数}\n\\]\nと定義されるので，\\(F(x)\\) は右側連続となります．実際に\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import binom\n\nn, p = 5, 1 / 3\nx = np.arange(0, 6)\ncdf = binom.cdf(x, n, p)\n\nfig, ax = plt.subplots(1, 1)\nax.hlines(cdf, x, x + 1, color=\"gray\")\nax.step(x, cdf, where=\"post\", color=\"gray\", linestyle=\"dotted\")\nax.plot(x, cdf, \"o\", color=\"gray\")\nax.scatter(x[:-1] + 1, cdf[:-1], marker=\"$\\u25EF$\", alpha=0.5, color=\"gray\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"F(x)\")\nax.set_title(\"CDF of Binomial Distribution (n=5, p=1/3)\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2\n\n\n\nこのとき，確率関数は\n\\[\np(x) = F(x) - \\lim_{x_n\\to x-0}F(x_n)\n\\]\nとすることで計算することが出来ます．一方，\\(F(x) = \\operatorname{P}(X &lt; x)\\) と定義すると左連続となります．\n\n\n\n\n\n\\[\nf(x) = \\frac{\\sin x}{x}\n\\]\nを考えます．この関数は \\(x - 0\\) で定義されていないですが\n\\[\n\\begin{align}\nf(x) = \\left\\{\\begin{array}{c}\n\\frac{\\sin x}{x} & (x\\neq 0)\\\\\n1 & (x = 0)\n\\end{array}\\right.\n\\end{align}\n\\]\nと \\(x = 0\\) で連続かつ微分可能になるように拡張することが出来ます．この拡張された関数を特にsinc関数と呼びます．\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the sinc function\ndef sinc(x):\n    return np.sinc(x / np.pi)\n\ndef inverse_x(x):\n    return 1/x\n\n# Generate x values\nx_vals = np.linspace(-10*np.pi, 10*np.pi, 400)\ny_vals = sinc(x_vals)\n\n# Plot the sinc function\nplt.figure(figsize=(8, 6))\nplt.plot(x_vals, y_vals, label=r'$f(x) = \\frac{\\sin(x)}{x}$')\nplt.plot(x_vals, inverse_x(x_vals), label=r'$f(x) = \\frac{1}{x}$')\nplt.xticks(np.arange(-10*np.pi, 11*np.pi, np.pi), \n           [r'$-10\\pi$', r'$-9\\pi$', r'$-8\\pi$', r'$-7\\pi$', r'$-6\\pi$', r'$-5\\pi$', r'$-4\\pi$', r'$-3\\pi$', r'$-2\\pi$', r'$-\\pi$', '0', r'$\\pi$', r'$2\\pi$', r'$3\\pi$', r'$4\\pi$', r'$5\\pi$', r'$6\\pi$', r'$7\\pi$', r'$8\\pi$', r'$9\\pi$', r'$10\\pi$'])\nplt.axhline(0, color='black',linewidth=0.5)\nplt.axvline(0, color='black',linewidth=0.5)\nplt.title(r'Plot of $f(x) = \\frac{\\sin(x)}{x}$')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.ylim(-1.1, 1.1)\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3\n\n\n\n ▶  \\(x = 0\\)における連続性の証明\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n偶関数の性質\n\\[\n\\frac{\\sin x}{x} = \\frac{\\sin -x}{-x}\n\\]\nより \\(0 &lt; x \\to +0\\) の場合を考えます．xy座標上に \\(O = (0, 0)，A = (1, 0)，B = (\\cos x, \\sin x)，C = (1, \\tan x)\\) という点をとったとき，\n\\[\n\\text{三角形}OAB \\subset \\text{扇形}OAB \\subset \\text{三角形}OAC\n\\]\nつまり\n\\[\n\\text{三角形}OAB\\text{の面積} \\leq \\text{扇形}OAB\\text{の面積} \\leq  \\text{三角形}OAC\n\\]\n従って，\n\\[\n\\begin{align}\n\\frac{\\sin x}{2} \\leq \\frac{x}{2} &lt; \\frac{\\tan x}{2}\n\\end{align}\n\\]\n両辺 を \\(\\sin ⁡x\\) で割って逆数をとると\n\\[\n\\begin{align}\n\\cos x \\leq \\frac{x\\sin x}{x} &lt; 1\n\\end{align}\n\\]\nここで，\\(x\\to +0\\) とすると，\\(\\cos x \\to 1\\) となり，はさみうちの原理より\n\\[\n\\lim_{x\\to+0}\\frac{\\sin x}{x} = 1\n\\]\n\n\n\n ▶  \\(x = 0\\)における微分可能性の証明\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\[\n\\begin{align}\n\\cos x \\leq \\frac{x\\sin x}{x} &lt; 1\n\\end{align}\n\\]\nが \\(-\\frac{\\pi}{2} \\leq x \\leq \\frac{\\pi}{2}\\) で成り立つので\n\\[\n0=\\lim_{x\\to0}\\frac{\\cos(x)-1}{x}\\le\\lim_{x\\to0}\\frac{\\frac{\\sin(x)}x-1}{x-0}\\le0\n\\]\n\\[\n\\begin{align}\n\\lim_{x\\to0}\\frac{1-\\cos(x)}x\n&=\\lim_{x\\to0}\\frac1x\\frac{\\sin^2(x)}{1+\\cos(x)}\\\\\n&=\\lim_{x\\to0}\\frac{\\sin(x)}x\\lim_{x\\to0}\\frac{\\sin(x)}{1+\\cos(x)}\\\\[6pt]\n&=1\\cdot0 = 0\n\\end{align}\n\\]\n従って，はさみうちの原理より \\(f^\\prime(0) = 0\\)"
  },
  {
    "objectID": "posts/2025-02-03-continuous-function/index.html#連続関数",
    "href": "posts/2025-02-03-continuous-function/index.html#連続関数",
    "title": "関数の連続性",
    "section": "",
    "text": "変数 \\(x\\) が限りなく \\(a\\) に近づくとき，\\(f(x)\\) も \\(f(a)\\) に近づくならば，\\(f(x)\\) は \\(x=a\\) において連続である，といいます．つまり，\n\\[\nx\\to a \\text{ ならば } f(x) \\to f(a)\n\\]\n\nDef: \\(\\epsilon\\)-\\(\\delta\\) 論法的連続性 \n任意の \\(\\epsilon &gt;0\\) に対して，ある \\(\\delta &gt; 0\\) が存在して，\n\\[\n\\vert x - a \\vert &lt; \\delta \\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\epsilon\n\\]\nを満たすとき，\\(x=a\\) において \\(f(x)\\) は連続であるという．\n\n\nExample 1 \n\\(f(x) = \\sqrt{x}\\) について，\\(a &gt; 0\\) で連続であることを以下示します．\n\\[\n\\begin{align}\n\\vert \\sqrt{x} - \\sqrt{a} \\vert\n    &= \\left\\vert\\frac{(\\sqrt{x} - \\sqrt{a})(\\sqrt{x} + \\sqrt{a})}{\\sqrt{x}+\\sqrt{a}}\\right\\vert\\\\\n    &= \\left\\vert\\frac{x - a}{\\sqrt{x}+\\sqrt{a}}\\right\\vert\\\\\n    &\\leq \\left\\vert\\frac{x - a}{\\sqrt{a}}\\right\\vert\n\\end{align}\n\\]\nここで，\\(\\vert x - a\\vert &lt; \\delta(\\epsilon) = \\epsilon\\sqrt{a}\\) と定めると\n\\[\n\\vert x - a\\vert &lt; \\delta(\\epsilon) \\Rightarrow \\vert \\sqrt{x} - \\sqrt{a}\\vert &lt; \\epsilon\n\\]\n\n\n\nExample 2 : 三角関数の連続性 \n\\(x = a + h\\) とおくと，和積の公式を用いて\n\\[\n\\begin{align}\n\\vert \\sin(x) - \\sin(a) \\vert\n    &= 2\\left\\vert \\cos\\frac{x+a}{2}\\sin\\frac{x-a}{2} \\right\\vert\\\\\n    &= 2\\left\\vert \\cos\\left(a + \\frac{h}{2}\\right)\\sin\\frac{h}{2} \\right\\vert\\\\\n    &\\leq 2\\left\\vert\\frac{h}{2}\\right\\vert \\cdot 1\\\\\n    &=\\vert h \\vert\n\\end{align}\n\\]\n\\(\\cos x = \\sin\\left(x + \\frac{\\pi}{2}\\right)\\) であるので，\\(\\sin x\\) が連続であるならば, \\(\\cos x\\) も連続．\n\n\n\n\nTheorem 1  : 連続関数の定数倍\n\\(f(x)\\) は \\(x=a\\) で連続であるとします．このとき，定数 \\(c\\) を用いた \\(cf(x)\\) も \\(x=a\\) にて連続となります．\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n仮定より\n\\[\n\\forall \\eta &gt; 0, \\exists \\delta(\\eta) &gt; 0, \\vert x - a\\vert &lt; \\delta(\\eta)\\Rightarrow\\vert f(x) - f(a)\\vert &lt; \\eta\n\\]\nこのとき，任意の \\(\\epsilon &gt; 0\\) に対して，\n\\[\n\\eta = \\frac{\\epsilon}{\\vert c \\vert} &gt;0\n\\]\nと対応させると，\n\\[\n\\forall \\epsilon &gt; 0, \\exists \\delta(\\epsilon) &gt; 0, \\vert x - a\\vert &lt; \\delta(\\epsilon)\\Rightarrow\\vert f(x) - f(a)\\vert &lt; \\frac{\\epsilon}{\\vert c \\vert }\n\\]\nつまり，\n\\[\n\\forall \\epsilon &gt; 0, \\exists \\delta(\\epsilon) &gt; 0, \\vert x - a\\vert &lt; \\delta(\\epsilon)\\Rightarrow \\vert c\\vert\\vert f(x) - f(a)\\vert &lt; \\epsilon\n\\]\nこれを変形すると\n\\[\n\\forall \\epsilon &gt; 0, \\exists \\delta(\\epsilon) &gt; 0, \\vert x - a\\vert &lt; \\delta(\\epsilon)\\Rightarrow \\vert cf(x) - cf(a)\\vert &lt; \\epsilon\n\\]\n\n\n\n\n\nTheorem 2 : 連続関数の和\n\n\\(f(x), g(x)\\) は \\(x=a\\) で連続であるとします．このとき，\\(f(x) + g(x)\\) も \\(x=a\\) にて連続となります．\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n仮定より\n\\[\n\\begin{align}\n\\vert x - a \\vert &lt; \\delta&\\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\epsilon/2\\\\\n\\vert x - a \\vert &lt; \\eta&\\Rightarrow \\vert g(x) - g(a)\\vert &lt; \\epsilon/2\n\\end{align}\n\\]\nここで，\\(M = \\min(\\delta, \\eta)\\) とすると，\n\\[\n\\begin{align}\n\\vert x - a \\vert &lt; M&\\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\epsilon/2\\\\\n\\vert x - a \\vert &lt; M&\\Rightarrow \\vert g(x) - g(a)\\vert &lt; \\epsilon/2\n\\end{align}\n\\]\nまた\n\\[\n\\begin{align}\n\\vert(f(x) - g(x)) - (f(a) + g(a))\n    &= \\vert(f(x) - f(a)) + (g(x) + g(a))\\vert\\\\\n    &\\leq \\vert(f(x) - f(a))\\vert + \\vert (g(x) + g(a))\\vert\n\\end{align}\n\\]\n従って，\\(\\vert x - a \\vert &lt; M\\) であるならば\n\\[\n\\begin{align}\n\\vert (g(x) + f(x)) - (g(a) + f(a))\\vert \\leq \\vert(f(x) - f(a))\\vert + \\vert (g(x) + g(a))\\vert &lt; \\epsilon\n\\end{align}\n\\]\n\n\n\n\n\nTheorem 3  : 連続関数の線型結合\n\\(f(x), g(x)\\) は \\(x=a\\) で連続であるとします．このとき，定数 \\(c_1, c_2\\)に対して \\(c_1f(x) + c_2g(x)\\) も \\(x=a\\) にて連続となります．\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\[\n\\begin{align}\n\\vert x - a \\vert &lt; \\delta&\\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\frac{\\epsilon}{2\\vert c_1\\vert}\\\\\n\\vert x - a \\vert &lt; \\eta&\\Rightarrow \\vert g(x) - g(a)\\vert &lt; \\frac{\\epsilon}{2\\vert c_2\\vert}\n\\end{align}\n\\]\nとして，\\(M = \\min(\\delta, \\eta)\\) とすれば，上記と同様に連続性を示すことができます．\n\n\n\n\n\nTheorem 4  : 連続関数の積\n\\(f(x), g(x)\\) は \\(x=a\\) で連続であるとします．このとき，\\(f(x)g(x)\\) も \\(x=a\\) にて連続となります．\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\[\n\\vert x - a \\vert &lt; \\delta(1) \\Rightarrow \\vert f(x) - f(a)\\vert &lt; 1\n\\]\nとすると，\n\\[\n\\vert x - a \\vert &lt; \\delta(1) \\Rightarrow \\vert f(x) \\vert &lt; 1 + \\vert f(a) \\vert\n\\]\n\\(\\delta, \\eta\\) を以下のように定め，\n\\[\n\\begin{align}\n\\vert x - a \\vert &lt; \\delta &\\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\frac{\\epsilon}{2(1 + \\vert f(a) \\vert + \\vert g(a) \\vert)}\\\\\n\\vert x - a \\vert &lt; \\eta &\\Rightarrow \\vert g(x) - g(a)\\vert &lt; \\frac{\\epsilon}{2(1 + \\vert f(a) \\vert + \\vert g(a) \\vert)}\n\\end{align}\n\\]\n\\[\n\\delta(\\epsilon) = \\min (\\delta(1), \\delta, \\eta)\n\\]\nとすると，\n\\[\n\\begin{align}\n\\vert x - a \\vert &lt; \\delta(\\epsilon)\n    \\Rightarrow &\\vert f(x)g(x) - f(a)g(a)\\vert\\\\[5pt]\n    &= \\vert f(x)(g(x) - g(a)) + g(a)(f(x) - f(a))\\vert\\\\[5pt]\n    &\\leq \\vert f(x)\\vert \\vert(g(x) - g(a))\\vert + \\vert g(a)\\vert\\vert(f(x) - f(a))\\vert\\\\[5pt]\n    &&lt; (1 + \\vert f(a) \\vert)\\frac{\\epsilon}{2(1 + \\vert f(a) \\vert + \\vert g(a) \\vert)} + \\vert g(a)\\vert \\frac{\\epsilon}{2(1 + \\vert f(a) \\vert + \\vert g(a) \\vert)}\\\\\n    &= \\epsilon\n\\end{align}\n\\]\nよって，連続性が示された．\n\n\n\n\n\nTheorem 5  連続関数の逆数 \n\\(f(x)\\) は \\(x=a\\) で連続であるとします．このとき，\\(f(a)\\neq 0\\) であるならば \\(1/f(x)\\) も \\(x=a\\) にて連続となります．\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n連続性の仮定より\n\\[\n\\vert x - a \\vert &lt; \\delta(\\vert f(a)/2\\vert) \\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\frac{\\vert f(a)\\vert}{2}\n\\]\nとすると，\n\\[\n\\vert x - a \\vert &lt; \\delta(\\vert f(a)/2\\vert) \\Rightarrow \\frac{\\vert f(a)\\vert}{2} &lt; \\vert f(x)\\vert\n\\]\nこのとき，\n\\[\n\\begin{align}\n\\left\\vert \\frac{1}{f(x)} - \\frac{1}{f(a)} \\right\\vert\n    &= \\left\\vert \\frac{f(x) - f(a)}{f(x)f(a)} \\right\\vert\\\\\n    &&lt; \\left\\vert \\frac{f(x) - f(a)}{(f(a))^2 / 2} \\right\\vert\n\\end{align}\n\\]\n従って，\\(\\vert x - a \\vert &lt; \\eta \\Rightarrow \\vert f(x) - f(a)\\vert &lt; \\displaystyle\\frac{\\epsilon\\vert (f(a))^2\\vert}{2}\\) となるような \\(\\eta\\) を用いて，\n\\[\n\\delta(\\epsilon) = \\min(\\delta(\\vert f(a)/2\\vert), \\eta)\n\\]\nとすれば\n\\[\n\\vert x - a \\vert &lt; \\delta(\\epsilon) \\Rightarrow \\left\\vert \\frac{1}{f(x)} - \\frac{1}{f(a)} \\right\\vert &lt; \\epsilon\n\\]\n\n\n\n\n\n点 \\(a\\) における極限を考えるとき，\n\n\\(x\\) が増大しつつ \\(a\\) に（左側から）近づく, \\(\\lim_{x\\to a-0}\\)\n\\(x\\) が減少しつつ \\(a\\) に（右側から）近づく, \\(\\lim_{x\\to a+0}\\)\n\nそれぞれの場合を分けて取り扱うことがあります．\n\nExample 3 \n\\(f(x) = \\tan x\\) について，\\(x = \\pi/2\\) における極限を考えてみます．\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sympy as sy\n\nx = sy.Symbol('x')\nf = sy.tan(x)\n\nx_vals = np.linspace(-np.pi/2+1e-6, np.pi, 400)\ny_vals = np.tan(x_vals)\n\nplt.figure(figsize=(8, 6))\nplt.plot(x_vals, y_vals, label=r'$f(x) = \\tan(x)$')\nplt.ylim(-10, 10)\nplt.xticks([-np.pi/2, 0, np.pi/2, np.pi], [r'$-\\frac{\\pi}{2}$', '0', r'$\\frac{\\pi}{2}$', r'$\\pi$'])\nplt.axvline(np.pi/2, color='r', linestyle='--', label=r'$x = \\frac{\\pi}{2}$')\nplt.axhline(0, color='black',linewidth=0.5)\nplt.axvline(0, color='black',linewidth=0.5)\nplt.title(r'Plot of $f(x) = \\tan(x)$ around $x = \\frac{\\pi}{2}$')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1\n\n\n\n上記の図のように，\n\\[\n\\begin{align}\n\\lim_{x\\to \\pi/2+0} \\tan x &= -\\infty\\\\\n\\lim_{x\\to \\pi/2-0} \\tan x &= \\infty\n\\end{align}\n\\]\n実際に，sympy で確認してみると\n\n# DO NOT USE np.pi\nprint(f\"左極限: {sy.limit(sy.tan(x), x, sy.pi/2, '-')}\")\nprint(f\"右極限: {sy.limit(sy.tan(x), x, sy.pi/2, '+')}\")\n\n左極限: oo\n右極限: -oo\n\n\n\n\n ▶  右連続と左連続\n\\[\n\\begin{align}\nf(a) &= \\alpha\\\\[5pt]\n\\lim_{x\\to a-0} f(x) &= \\alpha\\\\\n\\lim_{x\\to a+0} f(x) &= \\beta \\neq \\alpha\n\\end{align}\n\\]\nのとき，\\(f(x)\\) は \\(x = a\\) において左連続といいます．\n\\(f(x)\\) が閉区間 \\([a, b]\\) において定義されているとき，\n\n\\(x=a\\) においては右連続\n\\(x=b\\) においては左連続\n\nであることを意味します．開区間 \\((a, b)\\) において定義されているとき，\\(f(a+0)\\) が確定ならば，それを \\(f(a)\\) として定義域を \\([a, b)\\) 区間に拡張すると \\(f(x)\\) は \\(x=a\\) において右連続になります．\n一方，\\((0, \\infty)\\) 区間で定義された関数 \\(\\displaystyle f(x) = \\frac{1}{x}\\) は開区間では連続ですが，\\(x = 0\\) のときは定義されません．このとき，\\(f(0) = 0\\) として定義域を \\([0, \\infty)\\) に拡張すると，\\(x=0\\) で連続な関数にはなりませんし，\\(f(0)\\) をどんな値にしたとしても，\\(x=0\\) の近傍において, \\(f(x)\\) はいくらでも大きくなってしまうので，連続な関数にはなりません．\n\n📘 REMARKS \n\n開区間 \\((a, b)\\) で定義された連続な関数が，開区間 \\([a, b]\\) の連続な関数に拡張できるとは限らない\n\n\n\nExample 4  : 右連続関数と累積分布関数 \n離散確率変数 \\(X\\sim\\operatorname{Bin}(5, 1/3)\\) を考えます．離散確率変数の累積分布関数 \\(F(x)\\) は\n\\[\nF(x) = \\operatorname{P}(X \\leq x) = \\sum_{y\\leq x}p(y) \\qquad p(y): \\text{確率関数}\n\\]\nと定義されるので，\\(F(x)\\) は右側連続となります．実際に\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import binom\n\nn, p = 5, 1 / 3\nx = np.arange(0, 6)\ncdf = binom.cdf(x, n, p)\n\nfig, ax = plt.subplots(1, 1)\nax.hlines(cdf, x, x + 1, color=\"gray\")\nax.step(x, cdf, where=\"post\", color=\"gray\", linestyle=\"dotted\")\nax.plot(x, cdf, \"o\", color=\"gray\")\nax.scatter(x[:-1] + 1, cdf[:-1], marker=\"$\\u25EF$\", alpha=0.5, color=\"gray\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"F(x)\")\nax.set_title(\"CDF of Binomial Distribution (n=5, p=1/3)\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2\n\n\n\nこのとき，確率関数は\n\\[\np(x) = F(x) - \\lim_{x_n\\to x-0}F(x_n)\n\\]\nとすることで計算することが出来ます．一方，\\(F(x) = \\operatorname{P}(X &lt; x)\\) と定義すると左連続となります．\n\n\n\n\n\n\\[\nf(x) = \\frac{\\sin x}{x}\n\\]\nを考えます．この関数は \\(x - 0\\) で定義されていないですが\n\\[\n\\begin{align}\nf(x) = \\left\\{\\begin{array}{c}\n\\frac{\\sin x}{x} & (x\\neq 0)\\\\\n1 & (x = 0)\n\\end{array}\\right.\n\\end{align}\n\\]\nと \\(x = 0\\) で連続かつ微分可能になるように拡張することが出来ます．この拡張された関数を特にsinc関数と呼びます．\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the sinc function\ndef sinc(x):\n    return np.sinc(x / np.pi)\n\ndef inverse_x(x):\n    return 1/x\n\n# Generate x values\nx_vals = np.linspace(-10*np.pi, 10*np.pi, 400)\ny_vals = sinc(x_vals)\n\n# Plot the sinc function\nplt.figure(figsize=(8, 6))\nplt.plot(x_vals, y_vals, label=r'$f(x) = \\frac{\\sin(x)}{x}$')\nplt.plot(x_vals, inverse_x(x_vals), label=r'$f(x) = \\frac{1}{x}$')\nplt.xticks(np.arange(-10*np.pi, 11*np.pi, np.pi), \n           [r'$-10\\pi$', r'$-9\\pi$', r'$-8\\pi$', r'$-7\\pi$', r'$-6\\pi$', r'$-5\\pi$', r'$-4\\pi$', r'$-3\\pi$', r'$-2\\pi$', r'$-\\pi$', '0', r'$\\pi$', r'$2\\pi$', r'$3\\pi$', r'$4\\pi$', r'$5\\pi$', r'$6\\pi$', r'$7\\pi$', r'$8\\pi$', r'$9\\pi$', r'$10\\pi$'])\nplt.axhline(0, color='black',linewidth=0.5)\nplt.axvline(0, color='black',linewidth=0.5)\nplt.title(r'Plot of $f(x) = \\frac{\\sin(x)}{x}$')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.ylim(-1.1, 1.1)\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3\n\n\n\n ▶  \\(x = 0\\)における連続性の証明\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n偶関数の性質\n\\[\n\\frac{\\sin x}{x} = \\frac{\\sin -x}{-x}\n\\]\nより \\(0 &lt; x \\to +0\\) の場合を考えます．xy座標上に \\(O = (0, 0)，A = (1, 0)，B = (\\cos x, \\sin x)，C = (1, \\tan x)\\) という点をとったとき，\n\\[\n\\text{三角形}OAB \\subset \\text{扇形}OAB \\subset \\text{三角形}OAC\n\\]\nつまり\n\\[\n\\text{三角形}OAB\\text{の面積} \\leq \\text{扇形}OAB\\text{の面積} \\leq  \\text{三角形}OAC\n\\]\n従って，\n\\[\n\\begin{align}\n\\frac{\\sin x}{2} \\leq \\frac{x}{2} &lt; \\frac{\\tan x}{2}\n\\end{align}\n\\]\n両辺 を \\(\\sin ⁡x\\) で割って逆数をとると\n\\[\n\\begin{align}\n\\cos x \\leq \\frac{x\\sin x}{x} &lt; 1\n\\end{align}\n\\]\nここで，\\(x\\to +0\\) とすると，\\(\\cos x \\to 1\\) となり，はさみうちの原理より\n\\[\n\\lim_{x\\to+0}\\frac{\\sin x}{x} = 1\n\\]\n\n\n\n ▶  \\(x = 0\\)における微分可能性の証明\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\[\n\\begin{align}\n\\cos x \\leq \\frac{x\\sin x}{x} &lt; 1\n\\end{align}\n\\]\nが \\(-\\frac{\\pi}{2} \\leq x \\leq \\frac{\\pi}{2}\\) で成り立つので\n\\[\n0=\\lim_{x\\to0}\\frac{\\cos(x)-1}{x}\\le\\lim_{x\\to0}\\frac{\\frac{\\sin(x)}x-1}{x-0}\\le0\n\\]\n\\[\n\\begin{align}\n\\lim_{x\\to0}\\frac{1-\\cos(x)}x\n&=\\lim_{x\\to0}\\frac1x\\frac{\\sin^2(x)}{1+\\cos(x)}\\\\\n&=\\lim_{x\\to0}\\frac{\\sin(x)}x\\lim_{x\\to0}\\frac{\\sin(x)}{1+\\cos(x)}\\\\[6pt]\n&=1\\cdot0 = 0\n\\end{align}\n\\]\n従って，はさみうちの原理より \\(f^\\prime(0) = 0\\)"
  },
  {
    "objectID": "posts/2025-01-30-differential-equations/index.html",
    "href": "posts/2025-01-30-differential-equations/index.html",
    "title": "微分方程式を用いたToy models",
    "section": "",
    "text": "Exercise 1 : マルサスの人口論 \n時刻 \\(t\\) におけるとある国の人口が \\(N(t) &gt; 0\\) で表されるとする．マルサスは時刻 \\(t\\) から \\(t+\\Delta t\\) の人口増分 \\(\\Delta N = N(t+\\Delta) - N(t)\\) は\n\\[\n\\Delta N = k N(t)\\Delta t \\qquad (k: \\text{constant})\n\\]\nのように \\(N, \\Delta t\\) に比例するとした．ここから以下のように式変形を行い\n\\[\n\\frac{\\Delta N}{\\Delta t} = k N(t)\n\\]\n\\(\\Delta t\\to 0\\) として次のような微分方程式を得たとします\n\\[\n\\frac{dN(t)}{dt} = kN(t) \\label{eq-de-01}\n\\]\n\\((t, N(t))\\) が \\((0, 1.00 \\times 10^8), (1, 1.25 \\times 10^8)\\) と与えられているとき，\\(t = 2\\) の人口 \\(N(2)\\) を推定せよ．\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n微分方程式 \\(\\eqref{eq-de-01}\\) を以下のように変形し積分すると\n\\[\n\\begin{align}\n&\\frac{dN(t)}{dt} = kN(t) \\\\\n&\\Rightarrow \\int \\frac{1}{N(t)}\\frac{dN(t)}{dt} dt= \\int k dt \\\\\n&\\Rightarrow \\log \\vert N(t) \\vert = kt + C\\\\[5pt]\n&\\Rightarrow \\log N(t) = kt + C\n\\end{align}\n\\]\n従って，\n\\[\nN(t) = \\exp(C + kt) = \\tilde C\\exp(kt)\n\\]\n\\(t = 0\\) のときの \\(N(0) = N_0\\) とすると，\\(\\tilde C = N_0\\) でなければならないので\n\\[\nN(t) = N_0\\exp(kt) \\label{eq-malthus-solution}\n\\]\n\\((t, N(t))\\) が \\((0, 1.00 \\times 10^8), (1, 1.25 \\times 10^8)\\) と与えられているので，\n\\[\nN_0 = 1.00 \\times 10^8\n\\]\n次に\n\\[\n\\begin{align}\n&N(1) = 1.00 \\times 10^8 \\exp(k)\\\\[5pt]\n&\\Rightarrow \\exp(k) = 1.25\n\\end{align}\n\\]\n従って，\n\\[\nN(2) = (1.25)^2 \\times 10^8 \\approx 1.56 \\times 10^8\n\\]\n\n\n\n ▶  Python Simulation\nscipy.integrateパッケージのodeintを用いれば微分方程式を解くことができます．\n\nCode\nimport numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\n\n# malthusian growth func\ndef malthusian_model(y, t, k=np.log(1.25)):\n    dydt = k * y\n    return dydt\n\n# init\nN_0 = 1.0\n\n# data point\ndata = (0, 1), (1, 1.25)\n\n# time\nt = np.linspace(0, 5, 21)\n\n# solve\nn = odeint(malthusian_model, N_0, t)\n\n# plot\nplt.plot(t, n)\nplt.scatter(*zip(*data), color='red', label='observed data points')\nplt.legend()\nplt.xlabel(\"t\")\nplt.ylabel(\"$N(t)$\")\nplt.title(\"Malthusian gwrowth simulation\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1\n\n\n\nFigure 1 をみると \\(N(t)\\) は指数関数的に増加していることが読み取れます．これは \\(k\\) の符号に依存しています．\n\n\\(k &gt; 0\\): 指数関数的増加\n\\(k = 0\\): 変化なし\n\\(k &lt; 0\\): 指数関数的減衰\n\nとなります．図示すると以下のようになります\n\nCode\nimport statsmodels.api as sm\n\n# params\nk_args = (-0.2, 0, 0.2)\n\n# solve\nfor k in k_args:\n    n = odeint(malthusian_model, N_0, t, args=(k,))\n    plt.plot(t, n, label=f\"k={k}\")\n\nplt.legend()\nplt.xlabel(\"t\")\nplt.ylabel(\"$N(t)$\")\nplt.title(\"Malthusian growth simulation with different $k$\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2\n\n\n\n\n\n\n\n\n\n🍵 マルサスモデルの限界\n\n\n\nマルサスモデルは，\\(k &gt; 0\\) のとき人口が指数関数的に増加すると予測しています．実際には，食料や石油といった資源は有限であるので人口増加を抑制する要因があるため，現実でマルサスモデル的増加をすることは到底起こりえません．\n\n\n\n\n\n\\(N(t)\\) は 4期間ごとに観測される(=観測されるtは\\((0, 1, 2, 4)\\))\n観測される \\(N(t)\\) にはノイズが乗ってしまっている: \\(\\epsilon_t \\sim N(0, 0.1)\\)\n\nという状況ののもと，\\((N_0, k)\\) を推定し，\\(t&gt;4\\) の範囲の人口について予測することはできるのか？という問題を考えてみます．\n\\(\\eqref{eq-malthus-solution}\\) について対数を取ると\n\\[\n\\log N(t) = \\log(N_0) + kt\n\\]\nとなります．つまり，対数変換した変数についての線形モデルとして推定量を考えることができます．観測ノイズ \\(\\epsilon_t\\) を踏まえると，観測される人口を \\(\\tilde N(t)\\) とすると\n\\[\n\\begin{align}\n&\\tilde N(t) = N_0\\exp(kt) + \\epsilon_t\\\\\n&\\Rightarrow\\log \\tilde N(t) = \\log (N_0\\exp(kt) + \\epsilon_t)\n\\end{align}\n\\]\nとなってしまいますが，近似式として\n\\[\n\\log\\tilde N(t) = \\alpha + \\beta t + e_i\n\\]\nで推定するとします．\\(\\epsilon_i\\)がhomogeneousとしても\\(e_i\\)がhomogeneousとは限らないのでheteroskedasticity residual erroを想定して推定します．\n\nCode\nimport statsmodels.api as sm\n\nnp.random.seed(42)\n\n# observation step\nSTEP = 4\n\n# DGP\nactual_n = n.flatten()\nobserved_n = actual_n[::STEP][:-1] + +np.random.normal(0, 0.1, len(actual_n[::STEP][:-1]))\nobserved_t = t[::STEP][:-1]\nX = sm.add_constant(observed_t)\n\n# fit\nmodel = sm.OLS(np.log(observed_n), X).fit(cov_type=\"HC0\")\nestimated_n_0, estimated_k = model.params\n\n# simulation\nsimulated_n = odeint(malthusian_model, np.exp(estimated_n_0), t, args=(estimated_k,))\n\n# plot\nplt.plot(t, simulated_n, label=\"simulated\")\nplt.scatter(observed_t, observed_n, color=\"gray\", alpha=0.8, marker='x', label=\"actual data points\")\nplt.scatter(t, actual_n, color=\"red\", alpha=0.8, label=\"actual data points\")\nplt.legend()\nplt.xlabel(\"t\")\nplt.ylabel(\"$N(t)$\")\nplt.title(\"Malthusian growth prediction\")\nplt.axvspan(4.25, t[-1], color='gray', alpha=0.3)\nplt.text(4.65, 2.0, \"Prediction\\nPeriod\", ha='center', va='center', fontsize=11, color='black')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3"
  },
  {
    "objectID": "posts/2025-01-30-differential-equations/index.html#マルサスモデル",
    "href": "posts/2025-01-30-differential-equations/index.html#マルサスモデル",
    "title": "微分方程式を用いたToy models",
    "section": "",
    "text": "Exercise 1 : マルサスの人口論 \n時刻 \\(t\\) におけるとある国の人口が \\(N(t) &gt; 0\\) で表されるとする．マルサスは時刻 \\(t\\) から \\(t+\\Delta t\\) の人口増分 \\(\\Delta N = N(t+\\Delta) - N(t)\\) は\n\\[\n\\Delta N = k N(t)\\Delta t \\qquad (k: \\text{constant})\n\\]\nのように \\(N, \\Delta t\\) に比例するとした．ここから以下のように式変形を行い\n\\[\n\\frac{\\Delta N}{\\Delta t} = k N(t)\n\\]\n\\(\\Delta t\\to 0\\) として次のような微分方程式を得たとします\n\\[\n\\frac{dN(t)}{dt} = kN(t) \\label{eq-de-01}\n\\]\n\\((t, N(t))\\) が \\((0, 1.00 \\times 10^8), (1, 1.25 \\times 10^8)\\) と与えられているとき，\\(t = 2\\) の人口 \\(N(2)\\) を推定せよ．\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n微分方程式 \\(\\eqref{eq-de-01}\\) を以下のように変形し積分すると\n\\[\n\\begin{align}\n&\\frac{dN(t)}{dt} = kN(t) \\\\\n&\\Rightarrow \\int \\frac{1}{N(t)}\\frac{dN(t)}{dt} dt= \\int k dt \\\\\n&\\Rightarrow \\log \\vert N(t) \\vert = kt + C\\\\[5pt]\n&\\Rightarrow \\log N(t) = kt + C\n\\end{align}\n\\]\n従って，\n\\[\nN(t) = \\exp(C + kt) = \\tilde C\\exp(kt)\n\\]\n\\(t = 0\\) のときの \\(N(0) = N_0\\) とすると，\\(\\tilde C = N_0\\) でなければならないので\n\\[\nN(t) = N_0\\exp(kt) \\label{eq-malthus-solution}\n\\]\n\\((t, N(t))\\) が \\((0, 1.00 \\times 10^8), (1, 1.25 \\times 10^8)\\) と与えられているので，\n\\[\nN_0 = 1.00 \\times 10^8\n\\]\n次に\n\\[\n\\begin{align}\n&N(1) = 1.00 \\times 10^8 \\exp(k)\\\\[5pt]\n&\\Rightarrow \\exp(k) = 1.25\n\\end{align}\n\\]\n従って，\n\\[\nN(2) = (1.25)^2 \\times 10^8 \\approx 1.56 \\times 10^8\n\\]\n\n\n\n ▶  Python Simulation\nscipy.integrateパッケージのodeintを用いれば微分方程式を解くことができます．\n\nCode\nimport numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\n\n# malthusian growth func\ndef malthusian_model(y, t, k=np.log(1.25)):\n    dydt = k * y\n    return dydt\n\n# init\nN_0 = 1.0\n\n# data point\ndata = (0, 1), (1, 1.25)\n\n# time\nt = np.linspace(0, 5, 21)\n\n# solve\nn = odeint(malthusian_model, N_0, t)\n\n# plot\nplt.plot(t, n)\nplt.scatter(*zip(*data), color='red', label='observed data points')\nplt.legend()\nplt.xlabel(\"t\")\nplt.ylabel(\"$N(t)$\")\nplt.title(\"Malthusian gwrowth simulation\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1\n\n\n\nFigure 1 をみると \\(N(t)\\) は指数関数的に増加していることが読み取れます．これは \\(k\\) の符号に依存しています．\n\n\\(k &gt; 0\\): 指数関数的増加\n\\(k = 0\\): 変化なし\n\\(k &lt; 0\\): 指数関数的減衰\n\nとなります．図示すると以下のようになります\n\nCode\nimport statsmodels.api as sm\n\n# params\nk_args = (-0.2, 0, 0.2)\n\n# solve\nfor k in k_args:\n    n = odeint(malthusian_model, N_0, t, args=(k,))\n    plt.plot(t, n, label=f\"k={k}\")\n\nplt.legend()\nplt.xlabel(\"t\")\nplt.ylabel(\"$N(t)$\")\nplt.title(\"Malthusian growth simulation with different $k$\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2\n\n\n\n\n\n\n\n\n\n🍵 マルサスモデルの限界\n\n\n\nマルサスモデルは，\\(k &gt; 0\\) のとき人口が指数関数的に増加すると予測しています．実際には，食料や石油といった資源は有限であるので人口増加を抑制する要因があるため，現実でマルサスモデル的増加をすることは到底起こりえません．\n\n\n\n\n\n\\(N(t)\\) は 4期間ごとに観測される(=観測されるtは\\((0, 1, 2, 4)\\))\n観測される \\(N(t)\\) にはノイズが乗ってしまっている: \\(\\epsilon_t \\sim N(0, 0.1)\\)\n\nという状況ののもと，\\((N_0, k)\\) を推定し，\\(t&gt;4\\) の範囲の人口について予測することはできるのか？という問題を考えてみます．\n\\(\\eqref{eq-malthus-solution}\\) について対数を取ると\n\\[\n\\log N(t) = \\log(N_0) + kt\n\\]\nとなります．つまり，対数変換した変数についての線形モデルとして推定量を考えることができます．観測ノイズ \\(\\epsilon_t\\) を踏まえると，観測される人口を \\(\\tilde N(t)\\) とすると\n\\[\n\\begin{align}\n&\\tilde N(t) = N_0\\exp(kt) + \\epsilon_t\\\\\n&\\Rightarrow\\log \\tilde N(t) = \\log (N_0\\exp(kt) + \\epsilon_t)\n\\end{align}\n\\]\nとなってしまいますが，近似式として\n\\[\n\\log\\tilde N(t) = \\alpha + \\beta t + e_i\n\\]\nで推定するとします．\\(\\epsilon_i\\)がhomogeneousとしても\\(e_i\\)がhomogeneousとは限らないのでheteroskedasticity residual erroを想定して推定します．\n\nCode\nimport statsmodels.api as sm\n\nnp.random.seed(42)\n\n# observation step\nSTEP = 4\n\n# DGP\nactual_n = n.flatten()\nobserved_n = actual_n[::STEP][:-1] + +np.random.normal(0, 0.1, len(actual_n[::STEP][:-1]))\nobserved_t = t[::STEP][:-1]\nX = sm.add_constant(observed_t)\n\n# fit\nmodel = sm.OLS(np.log(observed_n), X).fit(cov_type=\"HC0\")\nestimated_n_0, estimated_k = model.params\n\n# simulation\nsimulated_n = odeint(malthusian_model, np.exp(estimated_n_0), t, args=(estimated_k,))\n\n# plot\nplt.plot(t, simulated_n, label=\"simulated\")\nplt.scatter(observed_t, observed_n, color=\"gray\", alpha=0.8, marker='x', label=\"actual data points\")\nplt.scatter(t, actual_n, color=\"red\", alpha=0.8, label=\"actual data points\")\nplt.legend()\nplt.xlabel(\"t\")\nplt.ylabel(\"$N(t)$\")\nplt.title(\"Malthusian growth prediction\")\nplt.axvspan(4.25, t[-1], color='gray', alpha=0.3)\nplt.text(4.65, 2.0, \"Prediction\\nPeriod\", ha='center', va='center', fontsize=11, color='black')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3"
  },
  {
    "objectID": "posts/2025-01-30-differential-equations/index.html#ヴェアフルストの人口論",
    "href": "posts/2025-01-30-differential-equations/index.html#ヴェアフルストの人口論",
    "title": "微分方程式を用いたToy models",
    "section": "ヴェアフルストの人口論",
    "text": "ヴェアフルストの人口論\n人口過密の要因を考慮に入れてマルサスモデルを修正したのがヴェアフルストモデルです．\n ▶  仮定の設定\n\n人口の上限 \\(N_\\infty\\) が存在する\n現在の人口を \\(N(t)\\) としたとき，人口増加 \\(\\Delta N(t)\\) は \\(N(t)\\) と \\(\\displaystyle 1 - \\frac{N(t)}{N_\\infty}\\) と時間区間 \\(\\Delta\\) に比例する\n\n ▶  問題の定式化\n比例定数を \\(k\\) としたとき\n\\[\n\\Delta N(t) = kN(t)\\left(1 - \\frac{N(t)}{N_\\infty}\\right)\\Delta t\n\\]\n\\(\\Delta t\\to 0\\) と極限をとると\n\\[\n\\frac{dN(t)}{dt} = kN(t)\\left(1 - \\frac{N(t)}{N_\\infty}\\right)\\label{eq-logistic-model}\n\\]\n人口変化は上記のような一階上微分方程式で表せるという形で定式化できました．\n ▶  モデルを解く\n\\(\\eqref{eq-logistic-model}\\) を変形すると\n\\[\n\\frac{N_\\infty}{N_\\infty - N(t)}\\frac{dN(t)}{N(t)dt} = k\n\\]\n両辺を \\(t\\) について積分すると\n\\[\n\\begin{align}\n& \\int\\frac{N_\\infty}{N_\\infty - N(t)}\\frac{dN(t)}{N(t)dt} dt= \\int k dt\\\\\n&\\Rightarrow \\int\\left(\\frac{1}{N(t)}+\\frac{1}{N_\\infty - N(t)}\\right)dN(t) = \\int k dt\\\\\n&\\Rightarrow \\log N(t) - \\log(N_\\infty - N(t)) = kt + C\\\\\n&\\Rightarrow \\log \\frac{N(t)}{N_\\infty - N(t)} = kt + C\n\\end{align}\n\\]\nこのとき，\\(N(0) = N_0\\) と初期条件が与えられたとすると\n\\[\n\\exp(C) = \\frac{N_0}{N_\\infty - N_0}\n\\]\nよって，\n\\[\n\\frac{N(t)}{N_\\infty - N(t)} = \\frac{N_0}{N_\\infty - N_0}\\exp(kt)\n\\]\nこれを \\(N(t)\\) についてとくと，\n\\[\nN(t) = \\frac{N_\\infty}{1 + [(N_\\infty/N_0 - 1)]\\exp(-kt)}\n\\]\nまたは\n\\[\n\\frac{1}{N(t)} = \\frac{1}{N_\\infty} + \\left(\\frac{1}{N_0} - \\frac{1}{N_\\infty}\\right)\\exp(-kt)\n\\]\n ▶  解釈\n\\(t\\to\\infty\\) のとき，\\(\\lim_{t\\to\\infty}\\exp(-kt) = 0\\) より\n\\[\n\\lim_{t\\to\\infty}N(t) = N_\\infty\n\\]\nとなることがわかります．初期値に応じて \\(N_\\infty\\) へ到達する経路は異なります．仮に \\(N_\\infty = 12, k=0.2\\) として，初期値が \\((1, 3, 6, 9, 12, 15)\\) と異なる水準で与えられたとします．\n\n\nCode\nfrom scipy.integrate import solve_ivp\n\n\n# Define logistic growth model\ndef logistic_growth(t, N, k=0.2, M=12):\n    dydt = k * N * (1 - N / M)\n    return dydt\n\n# Set up the grid for the direction field\nt_vals = np.linspace(0, 30, 20)  # Time values\nP_vals = np.linspace(0, 16, 20)  # Population values\nT, P = np.meshgrid(t_vals, P_vals)\n\n# Compute direction field (dP/dt values)\ndP_dt = logistic_growth(None, P)\n\n# Normalize arrows for visualization\nnorm = np.sqrt(1**2 + dP_dt**2)\nU = 1 / norm  # Time step is 1 (arbitrary)\nV = dP_dt / norm  # Scale arrows properly\n\n# Plot the direction field\nplt.figure(figsize=(8, 5))\nplt.quiver(T, P, U, V, color=\"gray\", alpha=0.7) # [T, P]: arrow location, [U, V]: arrow direction\n\n# Solve the ODE for different initial conditions\ninitial_conditions = [1, 3, 6, 9, 12, 15,]\nt_span = (0, 30)\nt_eval = np.linspace(0, 30, 100)\n\nfor P0 in initial_conditions:\n    sol = solve_ivp(logistic_growth, t_span, [P0], t_eval=t_eval)\n    if sol.success:\n        plt.plot(sol.t, sol.y[0], linewidth=2, label=f\"P(0)={P0}\")\n    else:\n        raise ValueError(\"computation failed\")\n\n# Labels and title\nplt.xlabel(\"t\")\nplt.ylabel(\"P(t)\")\nplt.title(\"Logistic Growth Model\")\nplt.legend()\nplt.grid()\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\\(0&lt; N_0 &lt; N_\\infty\\): はじめの増加は指数関数的だが，ある程度の水準から増加の度合いは減衰していく\n\\(N_0 = N_\\infty\\): 変化なし\n\\(N_0 &gt; N_\\infty\\): \\(N_\\infty\\)に近づく方向で減少していく．減衰の度合いは減衰していく\n\\(N_0 = 0\\): これも一つの均衡だが，ちょっとしたショックがあるだけで \\(N_\\infty\\) を目指すPathに乗ってしまう(= unstable equilibrium)\n\n ▶  Validation\nヴェアフルストモデルが人口動態を表した良いモデルなのか，1820-1930のアメリカの人口データを用いて検証してみます．\n\n\nCode\nimport pandas as pd\n\n# Historical population data (year, population in millions)\ndata = {\n    \"year\": [1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890, 1900, 1910, 1920, 1930, 2000],\n    \"us_population_million\": [9.6, 12.9, 17.1, 23.2, 31.4, 38.6, 50.2, 62.9, 76.0, 92.0, 106.5, 123.2, 282.2]\n}\n\n# Create DataFrame\ndf = pd.DataFrame(data)\n\n# Display table\ndf\n\n\n\n\n\n\n\n\n\nyear\nus_population_million\n\n\n\n\n0\n1820\n9.6\n\n\n1\n1830\n12.9\n\n\n2\n1840\n17.1\n\n\n3\n1850\n23.2\n\n\n4\n1860\n31.4\n\n\n5\n1870\n38.6\n\n\n6\n1880\n50.2\n\n\n7\n1890\n62.9\n\n\n8\n1900\n76.0\n\n\n9\n1910\n92.0\n\n\n10\n1920\n106.5\n\n\n11\n1930\n123.2\n\n\n12\n2000\n282.2\n\n\n\n\n\n\n\nパラメーターを \\(N_0 = 3.9, k = 0.3134, N_\\infty = 197\\) と選ぶと\n\nCode\nt_index = np.linspace(0, (df.shape[0] + 10), 100)\nsol = solve_ivp(logistic_growth, [0, t_index[-1]], [3.9], t_eval=t_index, args=(0.3134, 197))\nplt.plot(1790 + sol.t*10, sol.y[0], linewidth=2, label=f\"prediction\")\nplt.scatter(\n    df.year,\n    df.us_population_million,\n    color=\"gray\",\n    alpha=0.8,\n    marker=\"x\",\n    label=\"actual data points\",\n)\nplt.xlabel('year')\nplt.ylabel('population(million)')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Model prediction vs actual USA population\n\n\n\nこのように, 1800-1930年のアメリカ人口動態を上手く説明するモデルとなっていることがわかります．一方，モデルの上限は \\(197\\times 10^6\\) であるが，2000年の人口は \\(282.2\\times 10^6\\) となっており，長期における人口動態を説明できるものにはなっていないことも読み取れます．\n\\(N_\\infty\\) の仮定が間違っていたと解釈することが一つ考えられますが，人口変化を支配する法則は技術変化や政治といった要因に影響を受けるため，常に同じ支配法則に基づいていると仮定することが間違っているとも解釈することが出来ます．"
  },
  {
    "objectID": "posts/2025-02-01-function-and-taylor-expansion/index.html",
    "href": "posts/2025-02-01-function-and-taylor-expansion/index.html",
    "title": "18世紀までの関数論とテイラー展開",
    "section": "",
    "text": "Def: 関数 \n\\(X \\subset \\mathbb R^n, Y\\subset \\mathbb R^n\\) とする．\\(X\\) から \\(Y\\) への関数（実関数）とは，\\(X\\) の任意の元 \\(x\\) に対して，\\(Y\\) の１つの元を対応させる規則をいう． このような \\(X\\) から \\(Y\\) への関数を\n\\[\nf: X\\to Y\n\\]\nを記述し，集合 \\(X\\) を関数 \\(f\\) の定義域(domain)，\\(Y\\) を値域(range) という．\n\n\\(y = x^2\\) としたとき，\\(y\\) は区間 \\((-\\infty, \\infty)\\) における \\(x\\) の関数と呼ばれます．関数の例としては以下，\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-1, 1, 100)\n\nplt.plot(x, x**2)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()\n\nplt.plot(x , np.sqrt(1 - x**2))\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()\n\n\n\n\n\n\n\n\\(y = x^2\\)\n\n\n\n\n\n\n\n\\(y = \\sqrt{1 - x^2}\\)\n\n\n\n\n\n ▶  古典的な関数\n歴史的に関数はまず，\n\n四則演算で表される代数式（\\(x^2 + 2x +1\\), \\(x + \\frac{1}{x}\\), \\(x + \\sqrt{4x^2 + 1}\\)）\n独立変数の代数式で表せない超越関数（\\(a^x, \\log x, \\sin x, \\arctan x\\)）\n\nに限られていました．これら関数は，各点周りでテイラー展開ができるという特徴があります．"
  },
  {
    "objectID": "posts/2025-02-01-function-and-taylor-expansion/index.html#関数",
    "href": "posts/2025-02-01-function-and-taylor-expansion/index.html#関数",
    "title": "18世紀までの関数論とテイラー展開",
    "section": "",
    "text": "Def: 関数 \n\\(X \\subset \\mathbb R^n, Y\\subset \\mathbb R^n\\) とする．\\(X\\) から \\(Y\\) への関数（実関数）とは，\\(X\\) の任意の元 \\(x\\) に対して，\\(Y\\) の１つの元を対応させる規則をいう． このような \\(X\\) から \\(Y\\) への関数を\n\\[\nf: X\\to Y\n\\]\nを記述し，集合 \\(X\\) を関数 \\(f\\) の定義域(domain)，\\(Y\\) を値域(range) という．\n\n\\(y = x^2\\) としたとき，\\(y\\) は区間 \\((-\\infty, \\infty)\\) における \\(x\\) の関数と呼ばれます．関数の例としては以下，\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-1, 1, 100)\n\nplt.plot(x, x**2)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()\n\nplt.plot(x , np.sqrt(1 - x**2))\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()\n\n\n\n\n\n\n\n\\(y = x^2\\)\n\n\n\n\n\n\n\n\\(y = \\sqrt{1 - x^2}\\)\n\n\n\n\n\n ▶  古典的な関数\n歴史的に関数はまず，\n\n四則演算で表される代数式（\\(x^2 + 2x +1\\), \\(x + \\frac{1}{x}\\), \\(x + \\sqrt{4x^2 + 1}\\)）\n独立変数の代数式で表せない超越関数（\\(a^x, \\log x, \\sin x, \\arctan x\\)）\n\nに限られていました．これら関数は，各点周りでテイラー展開ができるという特徴があります．"
  },
  {
    "objectID": "posts/2025-02-01-function-and-taylor-expansion/index.html#平均値の定理からtaylorの公式へ",
    "href": "posts/2025-02-01-function-and-taylor-expansion/index.html#平均値の定理からtaylorの公式へ",
    "title": "18世紀までの関数論とテイラー展開",
    "section": "平均値の定理からTaylorの公式へ",
    "text": "平均値の定理からTaylorの公式へ\n\n\nTheorem 1 : 平均値の定理 \n区間 \\([a, b]\\) において，\\(f(x), g(x)\\) は連続で, \\((a, b)\\) において微分可能とする．このとき，ある点 \\(\\xi \\in (a, b)\\) において，\n\\[\n\\frac{f(b) - f(a)}{g(b) - g(a)} = \\frac{f^\\prime(\\xi)}{g^\\prime(\\xi)}\\label{eq-mean-value}\n\\]\nただし，\\(g(a)\\neq g(b)\\)．\\(f^\\prime(x), g^\\prime(x)\\) は区間内で同時に \\(0\\) にならないと仮定する．\n\n\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\(F(x) - \\mu f(x) - \\lambda g(x)\\) とおき，\\(F(a) = F(b) = k\\) となるように適当に \\(\\lambda:\\mu\\) を定める．\nこのとき，\n\\[\n\\begin{gather}\n\\mu f(a) - \\lambda g(a) = \\mu f(b) - \\lambda g(b)\\\\\n\\Rightarrow \\mu (f(b) - f(a)) = \\lambda (g(b) - g(a))\\\\\n\\Rightarrow \\mu (f(b) - f(a)) = \\lambda (g(b) - g(a))\\\\\n\\Rightarrow \\mu = g(b) - g(a), \\lambda = f(b) - f(a)\n\\end{gather}\n\\]\nとして，\n\\[\nF(x) = \\{g(b)-g(a)\\}f(x) - \\{f(b)-f(a)\\}g(x)\n\\]\nここで，\\(G(x) = F(x) - k\\) を考える．有界閉区間 \\([a, b]\\) において \\(f(x), g(x)\\) は連続であるので，有界閉区間 \\([a, b]\\) において \\(F(x)\\) および \\(G(x)\\) も連続関数である．関数の連続性より， とある \\(\\xi \\in [a, b]\\) で \\(G(x)\\) は最大値 \\(G(\\xi) = M &lt; \\infty\\) をとる．\n\\(M &gt; 0\\) のとき，\n\\(x = \\xi\\) において \\(\\Delta G \\leq 0\\). 故に\n\n\\(\\Delta x &gt; 0\\) とすれば \\(\\displaystyle\\frac{\\Delta G}{\\Delta x} \\leq 0\\), 従って，\\(G^\\prime(\\xi)\\leq 0\\)\n\\(\\Delta x &lt; 0\\) とすれば \\(\\displaystyle\\frac{\\Delta G}{\\Delta x} \\geq 0\\), 従って，\\(G^\\prime(\\xi)\\geq 0\\)\n\n従って，\\(G^\\prime(\\xi) = 0\\). \\(M = 0\\) のときは，同様に最小値 \\(G(\\xi) = M &gt; -\\infty\\) を考えると \\(G^\\prime(\\xi)\\geq 0\\) を得る．最小値と最大値が \\(0\\) の場合は \\(G(x)\\) が常に \\(0\\) であるので，\\(x \\in (a, b)\\) において \\(G^\\prime(x) = 0\\) は自明．\nこのとき，\\(F(x) - k = G(x)\\) より\n\\[\n\\begin{align}\nF^\\prime(\\xi) =  \\{g(b)-g(a)\\}f^\\prime(\\xi) - \\{f(b)-f(a)\\}g^\\prime(\\xi) = 0\n\\end{align}\n\\]\nよって，\n\\[\n\\frac{f(b) - f(a)}{g(b) - g(a)} = \\frac{f^\\prime(\\xi)}{g^\\prime(\\xi)}\n\\]\nが成立する．\n\n\n\n平均値の定理を幾何学的に考察してみます．独立変数 \\(t\\) について，曲線\n\\[\nx = f(t), y=g(t)\\qquad t \\in [a. b]\n\\]\nを考えます．このとき，\\(t=a, t=b\\) に対応する \\((x, y)\\) をそれぞれ \\(A, B\\) とすると，\\(\\eqref{eq-mean-value}\\) のLHSが弦ABの勾配に対応します． このとき，\\(x = f(t), y=g(t)\\) の曲線上のとある点 \\(P: t= \\xi\\) の接線が弦ABの勾配と平行になることを定理は示しています．\\(f^\\prime(x), g^\\prime(x)\\) は区間内で同時に \\(0\\) にならないと仮定は，曲線が各点において 確定の接線を有することを意味します．\n\nCode\ndef func_x(x):\n    return np.sin(x) + x\n\ndef func_y(x):\n    return x * np.log(x) ** 2\n\ndef tangent(x, x_0):\n    return func_y(x_0) + (x- func_x(x_0)) * (np.log(np.pi/2) ** 2.5)\n\n\nt = np.linspace(1e-18, np.pi/2, 1000)\nt2 = np.linspace(1.8, 2.6, 100)\nx, y = func_x(t), func_y(t)\nt_0 = 1.11\n\n# plot\nplt.plot(x, y, linewidth=2)\n\n# # add line\nplt.plot([0, func_x(np.pi/2)], [0, func_y(np.pi/2)], color=\"gray\")\nplt.text(-0.01, -0.03, \"A\")\nplt.text(2.55, 0.33, \"B\")\n\n# # add tangent\n# plt.text(x_0, sample_func(x_0)+1e-4, \"P: x = $\\exp(-2)$\")\nplt.scatter(func_x(t_0), func_y(t_0), color=\"gray\", linestyle=\"dotted\")\nplt.text(func_x(t_0), -0.02, \"P\")\nplt.plot(t2, tangent(t2, t_0))\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: \\(t\\in [0,\\pi/2]\\) 区間で定義された \\(x = \\sin(t) +t, y = \\begin{cases}t(\\log(t))^2  & (t\\in(0, \\pi/2))\\\\0 & t = 0\\end{cases}\\)\n\n\n\n\n\n\n\n\n\n🍵 Green Tea Break\n\n\n\n実数空間 \\(\\mathbb R\\) の部分集合 \\(I\\) で定義された関数 \\(f(x)\\) が区間 \\(I\\) の点 \\(a\\) において連続であるとは\n\\[\n\\lim_{x\\to a}f(x) = f(a)\n\\]\nが成り立つことをいいます．\n\\[\nf(t) = \\begin{cases}t(\\log(t))^2  & (t\\in(0, \\pi/2))\\\\0 & t = 0\\end{cases}\n\\]\nはロピタルの定理を用いると，\n\\[\n\\begin{align}\n\\lim_{t\\to 0} t(\\log(t))^2\n    &= \\lim_{t\\to 0} \\frac{(\\log(t))^2}{t^{-1}}\\\\\n    &= \\lim_{t\\to 0} \\frac{2(\\log(t))\\frac{1}{t}}{-t^{-2}}\\\\\n    &= \\lim_{t\\to 0} \\frac{2(\\log(t))}{-t^{-1}}\\\\\n    &= \\lim_{t\\to 0} \\frac{2t^{-1}}{t^{-2}}\\\\\n    &= \\lim_{t\\to 0} 2t = 0\n\\end{align}\n\\]\n以上のように連続性を示すことが出来ます．\n\n\n\nTaylorの公式\n\n\nTheorem 2 \nある区間において．\\(f(x)\\) は第 \\(n\\) 階まで微分可能とする．このときその区間において，\\(a\\) は定点，\\(x\\) を任意の点とするとき\n\\[\n\\begin{gather}\nf(x) = f(a) + \\frac{f^\\prime(a)}{1!}(x-a) + \\frac{f^{\\prime\\prime}(a)}{2!}(x-a)^2 + \\cdots + \\frac{f^{(n-1)}(a)}{(n-1)!}(x-a)^{n-1} + \\frac{f^{(n)}(\\xi)}{(n)!}(x-a)^{n}\\label{eq-taylor}\\\\\n\\text{s.t } \\quad \\xi = a + \\theta(x-a), \\qquad 0 &lt;\\theta&lt;1\n\\end{gather}\n\\]\n\n\n\\(\\frac{f^{(n)}(\\xi)}{(n)!}(x-a)^{n}\\) は \\(R_n\\) と表されることもあり，剰余項とよびます．\n\n\n\n\n\n\n\nProof\n\n\n\n\n\n\\[\nF(x) = f(x) - \\{f(a) + \\frac{f^\\prime(a)}{1!}(x-a) + \\frac{f^{\\prime\\prime}(a)}{2!}(x-a)^2 + \\cdots + \\frac{f^{(n-1)}(a)}{(n-1)!}(x-a)^{n-1}\\}\\label{eq-residual}\n\\]\nとおく．このとき，定義より\n\\[\nF(a) = F^{\\prime}(a) = F^{\\prime\\prime}(a) = \\cdots = F^{n-1}(a) = 0\n\\]\nここで，\n\\[\nG(x) = (x - a)^n\n\\]\nと定義すると第 \\(n\\) 階まで微分可能であり，また \\(G(a) = 0\\)．このとき，中間値の定理より\n\\[\n\\begin{align}\n\\frac{F(x) - F(a)}{G(x) - G(a)}\n    &= \\frac{F(x)}{G(x)}\\\\\n    &= \\frac{F(x)}{(x-a)^n}\\\\\n    &= \\frac{F^\\prime(x_1)}{n(x_1-a)^{n-1}} \\qquad x_1 \\in (a, x)\n\\end{align}\n\\]\n同様に\n\\[\n\\frac{F^\\prime(x_1)}{n(x_1-a)^{n-1}} = \\frac{F^{\\prime\\prime}(x_2)}{n(n-1)(x_2-a)^{n-2}} \\qquad x_2 \\in (a, x_1)\n\\]\n\\(f(x)\\) は第 \\(n\\) 階まで微分可能であるので，\\(F(x)\\) も第 \\(n\\) 階まで微分可能．従って，\n\\[\n\\frac{F(x)}{(x-1)^n} = \\frac{F^{n}(\\xi)}{n!} \\qquad \\exists\\xi \\in (a, x)\n\\]\nつまり\n\\[\nF(x) = \\frac{F^{n}(\\xi)}{n!}(x-a)^n\n\\]\nこれを \\(\\eqref{eq-residual}\\) に代入して整理すると \\(\\eqref{eq-taylor}\\) を得る．\n\n\n\n整式はそれ自身が有限個の項で完結したテイラー展開のしていますし，無限等比級数の公式\n\\[\n\\frac{1}{1 + r} = 1 - r + r^2 - r^3 + \\cdots = \\sum_{i=0}(-r)^i \\qquad (-1 &lt; r &lt; 1)\n\\]\nは \\(x = 1\\) 周りでの関数 \\(f(x) = 1/ x\\) のテイラー展開となっており，\\(x = 1 + r\\) とすると\n\\[\n\\begin{align}\n\\frac{1}{1+r}\n    &= 1 + \\frac{(-1)}{1!}r + \\frac{(-1)\\times(-2)}{2!}r^2 + \\frac{(-1)\\times(-2)\\times(-3)}{3!}r^3 + \\cdots\\\\\n    &= 1 - r + r^2 - r^3 + \\cdots\n\\end{align}\n\\]\nと確認することが出来ます．三角関数も\n\\[\n\\begin{align}\n\\cos x &= 1 - \\frac{1}{2}x^2 + \\frac{1}{24}x^4 - \\cdots\\\\\n\\sin x &= x - \\frac{1}{6}x^3 + \\frac{1}{120}x^5 - \\cdots\n\\end{align}\n\\]\nとテイラー展開することが出来ます．そのため，18世紀までの数学界では，関数は各点周りで冪級数にテイラー展開できるので，微分や積分もテイラー展開を応用して形式的な代数的計算で十分と考えられてました． 19世紀になると任意の関数 \\(f(x)\\) は\n\\[\nf(x) \\sim \\frac{a_0}{2} + \\sum_{n=1}^\\infty(a_n\\cos nx + b_n \\sin nx)\n\\]\nで表すことができるのではないか？という主張が登場し，関数，微分，積分の理論の見直しの必要性が認識されるようになりました．\n\nExample 1 : テイラー展開の例 \n次の関数の点 \\(a\\) のまわりのテイラー展開を剰余項を含めて \\(h^3\\) まで書き下すと以下のようになります\n\\[\n\\begin{align}\n\\log(a+h) &= \\log(a) + \\frac{h}{a} - \\frac{1}{2}\\frac{h^2}{a^2} + \\frac{1}{3}\\frac{h^3}{(a+\\theta h)^3}\\\\\n(a+h)^\\beta &= a^\\beta + \\beta a^{\\beta-1}h + \\frac{\\beta(\\beta-1)}{2!}a^{\\beta-2}h^2+ \\frac{\\beta(\\beta-1)(\\beta-2)}{3!}(a+\\theta h)^{\\beta-3}h^3\n\\end{align}\n\\]\nただし，\\(0 &lt; \\theta &lt; 1\\) とします．\n\n\n\nTaylor展開の応用: \\(e\\) が無理数であることの証明\n\\(f(x) = \\exp(x)\\) を マクローリン展開すると\n\\[\n\\exp(x) = 1 + \\frac{x}{1!} + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\cdots + \\frac{x^n}{n!} + R_{n+1}\n\\]\n\\(x = 1\\) としたとき，\n\\[\ne =  1 + \\frac{1}{1!} + \\frac{1}{2!} + \\frac{1}{3!} + \\cdots + \\frac{1}{n!} + R_{n+1}\n\\]\n剰余項 \\(R_{n+1}0\\) は\n\\[\nR_{n+1} = \\frac{\\exp(\\theta)}{(n+1)!} &gt; 0 \\quad \\exists\\theta \\in (0, 1)\n\\]\nつまり，\n\\[\nR_{n+1} = \\frac{\\exp(\\theta)}{(n+1)!} &lt; \\frac{3}{(n+1)!}\n\\]\nここで，\\(e\\) を有理数として \\(e = m/n\\) と既約分数で表せると仮定する．このとき，\\(n!e\\) は仮定より整数となるので\n\\[\n1 \\leq n!R_{n+1} = \\frac{\\exp(\\theta)}{n+1} &lt; \\frac{3}{n+1}\n\\]\n従って，\\(n+1 &lt;3\\) つまり \\(n &lt; 2\\)，従って，\\(n = 1\\) を得る．このとき，\\(m\\) は整数なので \\(e = m\\) となるが \\(2 &lt; e &lt; 3\\) より矛盾．従って，\\(e\\) は無理数となる．"
  },
  {
    "objectID": "posts/2024-12-17-firefox-proxy-access/index.html",
    "href": "posts/2024-12-17-firefox-proxy-access/index.html",
    "title": "Firefoxを用いたsocks5 proxyブラウザアクセス設定",
    "section": "",
    "text": "アクセス元のglobal IPが制限されたサイト(例: 社内用gitlabサーバー)へアクセスする場合，\n\n許可されたglobal IPに属するプライベートIPネットワークに接続している端末からアクセス\n別端末から上記の端末へssh接続し，プロキシサーバー的に使用をする\n\nという2つの方法が考えられます．後者の方法をFirefoxを用いて設定する方法を紹介します．\n ▶  なぜFirefoxなのか？\n\nGoogle chromeでもproxy設定は可能ですが，OS側の設定を変更してしまう\nFirefoxはブラウザレベルでproxyの設定が可能"
  },
  {
    "objectID": "posts/2024-12-17-firefox-proxy-access/index.html#what-we-want-to-do",
    "href": "posts/2024-12-17-firefox-proxy-access/index.html#what-we-want-to-do",
    "title": "Firefoxを用いたsocks5 proxyブラウザアクセス設定",
    "section": "",
    "text": "アクセス元のglobal IPが制限されたサイト(例: 社内用gitlabサーバー)へアクセスする場合，\n\n許可されたglobal IPに属するプライベートIPネットワークに接続している端末からアクセス\n別端末から上記の端末へssh接続し，プロキシサーバー的に使用をする\n\nという2つの方法が考えられます．後者の方法をFirefoxを用いて設定する方法を紹介します．\n ▶  なぜFirefoxなのか？\n\nGoogle chromeでもproxy設定は可能ですが，OS側の設定を変更してしまう\nFirefoxはブラウザレベルでproxyの設定が可能"
  },
  {
    "objectID": "posts/2024-12-17-firefox-proxy-access/index.html#firefoxにおけるsocks5-proxy設定",
    "href": "posts/2024-12-17-firefox-proxy-access/index.html#firefoxにおけるsocks5-proxy設定",
    "title": "Firefoxを用いたsocks5 proxyブラウザアクセス設定",
    "section": "Firefoxにおけるsocks5 proxy設定",
    "text": "Firefoxにおけるsocks5 proxy設定\n\nFirefoxを開いて、右上のメニューボタン（三本線）をクリック\nメニューから「設定」を選択\nネットワーク設定を開く\n「手動でプロキシ設定をする」オプションを選択\n「SOCKS v5」を選択し，SOCKSホストを127.0.0.1，ポートを1080で設定\n変更を保存\n\n\n\n\nfirefox-proxy-setting\n\n\n\nHow to use\nLinux, Windows, MacOS問わず\nssh &lt;username&gt;@&lt;proxy-server&gt; -D 1080\nとまず，ssh接続を確立します．-D オプションはダイナミックポートフォワーディング (Dynamic Port Forwarding)の設定です． 上記を実行するとローカルの 1080番ポート にSOCKS5プロキシが立ち上がります．\nFirefoxで SOCKS5プロキシ 127.0.0.1:1080と設定すると，\n\n\n\n\n\nsequenceDiagram\n    participant Client as クライアント\n    participant LocalSOCKS as localhost:1080 (SOCKSプロキシ)\n    participant SSHTunnel as SSHトンネル\n    participant RemoteServer as リモートサーバー\n    participant ExternalServer as 外部サーバー\n\n    %% 1. クライアントがSOCKSプロキシに接続\n    Client-&gt;&gt;LocalSOCKS: データ送信 (接続要求, 宛先IP/ポート)\n\n    %% 2. SOCKSプロキシがSSHトンネル経由でリモートサーバーに転送\n    LocalSOCKS-&gt;&gt;SSHTunnel: データ転送 (暗号化)\n\n    %% 3. SSHトンネルがリモートサーバーに転送\n    SSHTunnel-&gt;&gt;RemoteServer: データ中継 (トンネル経由)\n\n    %% 4. リモートサーバーが外部サーバーに接続\n    RemoteServer-&gt;&gt;ExternalServer: 外部サーバー接続要求 (TCP/UDP)\n    ExternalServer--&gt;&gt;RemoteServer: 接続応答\n\n    %% 5. 応答をクライアントに返送\n    RemoteServer--&gt;&gt;SSHTunnel: 応答データ\n    SSHTunnel--&gt;&gt;LocalSOCKS: 暗号化データ戻し\n    LocalSOCKS--&gt;&gt;Client: レスポンス転送\n\n\n\n\n\n\n\nという順序で通信されるようになります．"
  },
  {
    "objectID": "posts/2024-12-17-firefox-proxy-access/index.html#appendix-プロキシサーバーの仕組み",
    "href": "posts/2024-12-17-firefox-proxy-access/index.html#appendix-プロキシサーバーの仕組み",
    "title": "Firefoxを用いたsocks5 proxyブラウザアクセス設定",
    "section": "Appendix: プロキシサーバーの仕組み",
    "text": "Appendix: プロキシサーバーの仕組み\nクライアントの依頼に応じて，外部のサーバーにサービスを要求し，その結果をクライアントに提供するサーバーをプロキシサーバーといいます． SOCKS5は，プロキシサーバーを利用してサーバーとクライアント間のパケットをルーティングするインターネットプロトコルのことを指します．\nSOCKS5プロキシサーバーのメリットとして，安全性，匿名性，利便性の3つがあります．\n ▶  安全性\n\nSOCKS5は，ユーザー名とパスワードによる認証機能をサポートしているため，外部の不正アクセスや認証されていないクライアントからの利用を防ぐことができる\nSSHトンネルと組み合わせることで，安全にSOCKS5プロキシサーバー経由の通信を暗号化することができる = リモートアクセス時のデータ転送が保護され，悪意のあるネットワーク環境でも安全に通信可能\nプロキシサーバーを中間地点として使用することで，DDoS攻撃などの直接的な大量トラフィック攻撃を遮断することが可能\n\n ▶  匿名性\n\nネットワーク全体のトラフィックがプロキシサーバー経由で処理されるため，外部から見えるIPアドレスが プロキシのIPになる = SOCKS5プロキシを介することで，クライアントのIPアドレス/端末名を隠すことができる\n一括でアクセス元をプロキシのIPに集約し，クライアントIPを隠蔽することでセキュリティとプライバシー保護が可能になるという活用方法がある\n\nSOCKS5プロキシは，クライアントから送信されたデータをそのまま中継しますが，データ送信時のヘッダ情報（IPアドレスなど）をカプセル化します． そのため，外部サーバーはデータの中身だけを認識し，送信元（クライアント）に関する情報は知ることができないという仕組みになっています．\n ▶  利便性\n\nSOCKS5はプロトコル非依存であり，TCPとUDPの両方の通信をサポートしている = FTP, SMTP, P2P, VoIP, DNSリクエスト, オンラインゲームなど多様なアプリケーションで利用可能\n\n\n\n\n\n\nsequenceDiagram\n    participant Client as クライアント\n    participant SOCKS5ProxyServer as SOCKS5プロキシサーバー\n    participant ExternalServer as 外部サーバー\n\n    %% 1. 接続要求とハンドシェイク\n    Client-&gt;&gt;SOCKS5ProxyServer: 接続要求 (Handshake: バージョン, 認証方式)\n    SOCKS5ProxyServer--&gt;&gt;Client: 認証方式応答 (成功/失敗)\n\n    %% 2. 外部サーバーへの接続要求\n    Client-&gt;&gt;SOCKS5ProxyServer: 外部サーバー接続要求 (宛先IP, ポート)\n    note right of Client: クライアントのIPアドレスは隠蔽される\n    SOCKS5ProxyServer-&gt;&gt;ExternalServer: 接続確立要求 (プロキシのIPを使用)\n\n    %% 3. 接続確立確認\n    ExternalServer--&gt;&gt;SOCKS5ProxyServer: 接続成功応答\n    SOCKS5ProxyServer--&gt;&gt;Client: 接続確立成功通知\n\n    %% 4. データ転送 (カプセル化)\n    Client-&gt;&gt;SOCKS5ProxyServer: データ送信 (カプセル化されたパケット)\n    note over SOCKS5ProxyServer: データをそのまま中継 (IPアドレス非公開)\n    SOCKS5ProxyServer-&gt;&gt;ExternalServer: データ転送 (TCP/UDP)\n    ExternalServer--&gt;&gt;SOCKS5ProxyServer: レスポンスデータ\n    SOCKS5ProxyServer--&gt;&gt;Client: レスポンス転送\n\n    %% 5. 通信終了\n    Client-&gt;&gt;SOCKS5ProxyServer: 通信終了リクエスト\n    SOCKS5ProxyServer-&gt;&gt;ExternalServer: 接続切断\n    SOCKS5ProxyServer--&gt;&gt;Client: 通信終了通知\n\n\n\n\n\n\n\nSOCKS5プロキシはキャッシュを行わない\nHTTPプロキシは一般的に，ウェブコンテンツ（画像、HTML、動画など）をキャッシュすることで，再アクセス時にデータ転送を高速化します． 一方，SOCKS5プロキシはキャッシュを行なわないという違いがあります．\n\nSOCKS5はデータ転送のトンネルを作る役割を果たすため，通信内容のデータを確認・保存することがない\nあくまで「データを中継する」プロトコルであり，内容に依存しないため，キャッシュ機能は持たない\n\nSOCKS5はキャッシュ機能を持たないことで，シンプルかつ高速な通信環境を提供してくれるものと理解していればOKだとおもいます． キャッシュはリアルタイム通信に不要ですし，また，キャッシュ管理の手間やストレージコストが不要というメリットもあります．"
  },
  {
    "objectID": "posts/2024-12-11-BQ-create-external-table/index.html",
    "href": "posts/2024-12-11-BQ-create-external-table/index.html",
    "title": "Cloud StorageからExternal Tableの作成",
    "section": "",
    "text": "Google Cloud StorageからBigQuery上にExternal tabaleを作成する\nPartition Fieldが定義されたExternal tabaleを作成するための条件を確認する"
  },
  {
    "objectID": "posts/2024-12-11-BQ-create-external-table/index.html#このノートのスコープ",
    "href": "posts/2024-12-11-BQ-create-external-table/index.html#このノートのスコープ",
    "title": "Cloud StorageからExternal Tableの作成",
    "section": "",
    "text": "Google Cloud StorageからBigQuery上にExternal tabaleを作成する\nPartition Fieldが定義されたExternal tabaleを作成するための条件を確認する"
  },
  {
    "objectID": "posts/2024-12-11-BQ-create-external-table/index.html#external-tableとは",
    "href": "posts/2024-12-11-BQ-create-external-table/index.html#external-tableとは",
    "title": "Cloud StorageからExternal Tableの作成",
    "section": "External Tableとは？",
    "text": "External Tableとは？\nBigQueryのExternal Table（外部テーブル）は，BigQuery内にデータをコピーまたはインポートすることなく， 外部データソースに直接アクセスしてクエリを実行できる機能です．\nBigQueryにおけるExternal Tableの利用形式として，permanent tableとtemporary tableの２つがあります．\n\npermanent table: BigQuery dataset内に作成され，外部データソースにリンクされるテーブル\ntemporary table: 外部データソースに対して一時的にクエリを実行する場合に利用されるテーブル\n\n一時的なテスト処理などでtemporary tableを用いることは有用ですが，分析者間でクエリやコードを共有して分析を進める場合はpermanent tableを持ちないと テーブルアクセスを共有できないので，このノートではpermanent tableを主に取り扱います．\n ▶  サポートされているデータストア\n\nBigLake\nCloud Storage\nBigtable\nGoogle Drive\nAmazon S3\nAzure Blob Storage\n\n以上のデータストアがBigQueryからアクセス可能な外部データソースとしてサポートされています\n ▶  Pricing\nBigQueryのPricingは\n\nCompute pricing: クエリの処理にかかる費用\nStorage pricing: データ保存費用\n\nの２つから構成されています．External Tableを用いると，後者の方はCloud Storage換算の費用となるため，一般的には ストレージコストを抑えることができます．ただし，External Tableにアクセスして分析するたびに\n\nQuery cost: クエリ計算処理時間に比例するコスト\nBytes cost: External tableからのデータ読み取りサイズに比例するコスト\n\nが発生します．\n\n📘 Tips \nExternal Tableを用いた分析が一時的なものであるならばExternal Tableを用いたほうが良いと思いますが， 頻繁にBigQueryからアクセスする場合は\n\nPartitioning/Clusteringを用いてアクセスサイズを抑える\nSELECT以下で*を使用せず，分析に用いるカラムを明示的に指定して，スキャンサイズを抑える\n\nという工夫，またはBigQuery native tableとしてデータを保持することを検討したほうが良いと思います．\n\n\nExternal Table use cases\nExternal Tableの特徴として，\n\nBigQuery native tableとしてデータは保持しない\nExternal Tableと紐づく外部ストアの最新データに対して，クエリ処理が走る\n\nがあります．そのため，PoCや営業段階での分析や頻繁にupdateされるデータに対してのオンライン分析といった場面で活用されるケースが多いです．\n\nExample: 営業段階でのアドホック分析 \n\nBtoC向けサービスを展開している企業Aに対して営業をしているとする\nNDAを結んだ後に，企業Aが保有しているデータのサンプルとして２年間分の連携してもらった\nこのデータを用いて簡易的な分析を行い，どのようなインサイトが導けそうか？を次の営業会議で企業Aに伝え説得したい\n\nという場面を考えます．\n ▶  Key Points\n\nわざわざテーブルスキーマを定義する時間はあまりない→早くEDAをやりたい\nサンプルデータなので，プロジェクト受注後に連携されるであろうデータセットよりも情報量が少ない→わざわざテーブルスキーマしても再利用可能性は低い\n\n ▶  External Tableのメリット\n\nテーブルスキーマをわざわざ定義しなくても，BigQueryを用いた大容量のデータに対しての分析が可能\n複数の分析者間でサンプルデータをCloud Storageベースで簡単に共有できる\nPythonなどの言語を用いた分析でも，予めBigQueryで前処理して小さいdatamartを作成し，それに対してEDAが実施できる"
  },
  {
    "objectID": "posts/2024-12-11-BQ-create-external-table/index.html#external-table作成",
    "href": "posts/2024-12-11-BQ-create-external-table/index.html#external-table作成",
    "title": "Cloud StorageからExternal Tableの作成",
    "section": "External Table作成",
    "text": "External Table作成\nここでは，EXTERNAL PARTITION TABLEの作成を目的に\n\ngoogle cloud storageへのupload\nEXTERNAL TABLEの作成\n\nの２段階の流れで説明します．\n ▶  Cloud Storageへのupload\n~/pupupuland_store_posというdirectory以下に，yyyymmdd形式の日付でpartitionされたPARQUET形式のデータがあるとします．\npupupuland_store_pos\n├── partition_dt=2023-09-23\n│   └── purchase_history_2023-09-23.parquet\n├── partition_dt=2023-09-24\n│   └── purchase_history_2023-09-24.parquet\n├── partition_dt=2023-09-25\n│   └── purchase_history_2023-09-25.parquet\n├── partition_dt=2023-09-26\n│   └── purchase_history_2023-09-26.parquet\n├── partition_dt=2023-09-27\n│   └── purchase_history_2023-09-27.parquet\n├── partition_dt=2023-09-28\n│   └── purchase_history_2023-09-28.parquet\n├── partition_dt=2023-09-29\n│   └── purchase_history_2023-09-29.parquet\n└── partition_dt=2023-09-30\n    └── purchase_history_2023-09-30.parquet\nこのディレクトリ構造を保持したまま，gs://project-make-dedede-great-again/というcloud storage bucketに格納したいとします．このとき\ngcloud storage cp -r ~/pupupuland_store_pos/ gs://project-make-dedede-great-again/\n以上で下準備は完了です．\n ▶  External Tableの作成\nGoogle Cloud project pupupuland-businessdata の dedede-holdings dataset以下に先程上げた pupupuland_store_pos tableを作成したいと思います．\nCREATE EXTERNAL TABLE `pupupuland-businessdata.dedede-holdings.pupupuland_store_pos`\nWITH PARTITION COLUMNS (\npartition_dt DATE, -- column order must match the external path\n)\nOPTIONS (\nuris = ['gs://project-make-dedede-great-again/pupupuland_store_pos/*'],\nformat = 'PARQUET',\nhive_partition_uri_prefix = 'gs://project-make-dedede-great-again/pupupuland_store_pos',\nrequire_hive_partition_filter = false);\nPARTITION COLUMNSのフィールドに partition_dtと入力していますが，これは外部ファイルのパスのパターンがgs://project-make-dedede-great-again/pupupuland_store_pos/partition_dt=yyyymmdd/data.parquet であることを前提にしています．そのため，upload時のdirectory構造を\n└── partition_dt=2023-09-30\n    └── purchase_history_20230930.parquet\nという形にしてcloud storageにuploadしたという背景があります．DATETYPEにDATEと指定していますが，/&lt;partition field&gt;=2018-10-18/という構造になっていないと失敗することに注意してください． 他にも INTEGER, STRING, TIMESTAMPが指定できます．TIMESTAMPの場合は，/&lt;partition field&gt;=2018-10-18 16:00:00+00/という構造であることが必要です．\nrequire_hive_partition_filter フィールドはクエリ時にpartition_dtによるWHERE句フィルタリングを強制するか否かの設定フィールドです． デフォルトではfalseとなっており，この場合はフィルタリングしなくてもクエリできることを意味します．"
  },
  {
    "objectID": "posts/2024-12-11-BQ-create-external-table/index.html#references",
    "href": "posts/2024-12-11-BQ-create-external-table/index.html#references",
    "title": "Cloud StorageからExternal Tableの作成",
    "section": "References",
    "text": "References\n\nIntroduction to external tables"
  },
  {
    "objectID": "posts/2025-02-14-shogi-getting-started/index.html",
    "href": "posts/2025-02-14-shogi-getting-started/index.html",
    "title": "本日の詰将棋: Quiz 1~5",
    "section": "",
    "text": "Figure 1\n\n\n\n\n📘 KeyPoints \n\n初手に５二銀と捨てて，馬の利きを確保するのがポイント"
  },
  {
    "objectID": "posts/2025-02-14-shogi-getting-started/index.html#quiz-1-馬の利き",
    "href": "posts/2025-02-14-shogi-getting-started/index.html#quiz-1-馬の利き",
    "title": "本日の詰将棋: Quiz 1~5",
    "section": "",
    "text": "Figure 1\n\n\n\n\n📘 KeyPoints \n\n初手に５二銀と捨てて，馬の利きを確保するのがポイント"
  },
  {
    "objectID": "posts/2025-02-14-shogi-getting-started/index.html#quiz-2-角よりも銀",
    "href": "posts/2025-02-14-shogi-getting-started/index.html#quiz-2-角よりも銀",
    "title": "本日の詰将棋: Quiz 1~5",
    "section": "Quiz 2: 角よりも銀",
    "text": "Quiz 2: 角よりも銀"
  },
  {
    "objectID": "posts/2025-02-14-shogi-getting-started/index.html#quiz-3-金頭桂",
    "href": "posts/2025-02-14-shogi-getting-started/index.html#quiz-3-金頭桂",
    "title": "本日の詰将棋: Quiz 1~5",
    "section": "Quiz 3: 金頭桂",
    "text": "Quiz 3: 金頭桂\n\n\n\n\n\n\n\nFigure 2\n\n\n\n\n📘 KeyPoints \n\n竜を切ってからの金頭桂"
  },
  {
    "objectID": "posts/2025-02-14-shogi-getting-started/index.html#quiz-4",
    "href": "posts/2025-02-14-shogi-getting-started/index.html#quiz-4",
    "title": "本日の詰将棋: Quiz 1~5",
    "section": "Quiz 4",
    "text": "Quiz 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n派生：５三に歩が存在する場合\n相手玉の逃げ道が少なくなるので，一手早く積ませることが出来ます\n\n\n\n\n\n\n\nFigure 3"
  },
  {
    "objectID": "posts/2025-02-14-shogi-getting-started/index.html#quiz5-飛車を切る",
    "href": "posts/2025-02-14-shogi-getting-started/index.html#quiz5-飛車を切る",
    "title": "本日の詰将棋: Quiz 1~5",
    "section": "Quiz5: 飛車を切る",
    "text": "Quiz5: 飛車を切る\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n📘 KeyPoints \n\n馬の利きを通すためあえて竜を切る\n金２枚の代わりに斜めのコマ一つ（金一 & 角 or 銀一）の場合でも詰むことができる"
  },
  {
    "objectID": "posts/2025-01-08-bigquery-preprocess-01/index.html",
    "href": "posts/2025-01-08-bigquery-preprocess-01/index.html",
    "title": "BigQuery: TIME型カラムを指定したレベルで丸めて集計する",
    "section": "",
    "text": "▶  スーパーの来店時刻データ\n\n\n\nmember_id\nusage_date\nusage_time\n\n\n\n\n\n123456\n2024-02-01\n08:09:00\n\n\n\n223456\n2024-02-01\n08:10:00\n\n\n\n223456\n2024-02-11\n08:10:00\n\n\n\n123456\n2024-02-01\n20:09:00\n\n\n\n323456\n2024-02-01\n20:09:00\n\n\n\n\nという形でとあるスーパーの来店時刻データregmonkey-sample-data.restaurant_kawasaki.customer_recordが与えられているとします． このとき，以下の3つの処理を実施して，曜日×時間帯別平均来店者数の集計を行いたいとします．\n ▶  処理1: 24時間オーバーのデータへ変換\n\n00:01:00 → 24:00:00\n01:01:59 → 25:00:00\n\nのように夜中02:59:59までは26:59:59へ変換するという処理\n ▶  処理2: TIME型データを丸める\n\n08:09:00 → 08:00:00\n08:20:00 → 08:15:00\n\nのようにTIME型データを15分刻みに丸める処理\n ▶  処理3: DATE型データをISO day of weekへ変換\n\n月曜日を1, 日曜日を7とするISO day of weekに変換する\n祝日は8をアサインする\n\n2024-02-11, 2024-02-23は8がアサインされる"
  },
  {
    "objectID": "posts/2025-01-08-bigquery-preprocess-01/index.html#what-i-want-to-do",
    "href": "posts/2025-01-08-bigquery-preprocess-01/index.html#what-i-want-to-do",
    "title": "BigQuery: TIME型カラムを指定したレベルで丸めて集計する",
    "section": "",
    "text": "▶  スーパーの来店時刻データ\n\n\n\nmember_id\nusage_date\nusage_time\n\n\n\n\n\n123456\n2024-02-01\n08:09:00\n\n\n\n223456\n2024-02-01\n08:10:00\n\n\n\n223456\n2024-02-11\n08:10:00\n\n\n\n123456\n2024-02-01\n20:09:00\n\n\n\n323456\n2024-02-01\n20:09:00\n\n\n\n\nという形でとあるスーパーの来店時刻データregmonkey-sample-data.restaurant_kawasaki.customer_recordが与えられているとします． このとき，以下の3つの処理を実施して，曜日×時間帯別平均来店者数の集計を行いたいとします．\n ▶  処理1: 24時間オーバーのデータへ変換\n\n00:01:00 → 24:00:00\n01:01:59 → 25:00:00\n\nのように夜中02:59:59までは26:59:59へ変換するという処理\n ▶  処理2: TIME型データを丸める\n\n08:09:00 → 08:00:00\n08:20:00 → 08:15:00\n\nのようにTIME型データを15分刻みに丸める処理\n ▶  処理3: DATE型データをISO day of weekへ変換\n\n月曜日を1, 日曜日を7とするISO day of weekに変換する\n祝日は8をアサインする\n\n2024-02-11, 2024-02-23は8がアサインされる"
  },
  {
    "objectID": "posts/2025-01-08-bigquery-preprocess-01/index.html#query-example",
    "href": "posts/2025-01-08-bigquery-preprocess-01/index.html#query-example",
    "title": "BigQuery: TIME型カラムを指定したレベルで丸めて集計する",
    "section": "Query Example",
    "text": "Query Example\n ▶  処理1: 24時間オーバーのデータへ変換\nTIME型のままでは23:59:59までしかカバーされないので，extended timeの表記を試みたい場合はSTRING型へ変換する必要があります．\nCREATE TEMP FUNCTION convert_extended_time(standard_time TIME)\nRETURNS STRING\nAS (\n  CASE \n    WHEN EXTRACT(HOUR FROM standard_time) &lt; 3 THEN\n      FORMAT(\"%02d:%02d:%02d\", EXTRACT(HOUR FROM standard_time) + 24, EXTRACT(MINUTE FROM standard_time), EXTRACT(SECOND FROM standard_time))\n    ELSE \n      FORMAT(\"%02d:%02d:%02d\", EXTRACT(HOUR FROM standard_time), EXTRACT(MINUTE FROM standard_time), EXTRACT(SECOND FROM standard_time))\n  END\n);\n ▶  処理2: TIME型データを丸める\nCREATE TEMP FUNCTION round_to_nearest_15_minute(usage_time TIME, round_level INT64)\nRETURNS TIME\nAS (\n  TIME_TRUNC(\n    TIME_SUB(usage_time, INTERVAL MOD(EXTRACT(MINUTE FROM usage_time), round_level) MINUTE),\n    MINUTE\n  )\n);\n ▶  処理3: DATE型データをISO day of weekへ変換\nBigQueryが提供する EXTRACT(DAYOFWEEK FROM &lt;date-column&gt;) は日曜日1から始まり土曜日7で終わる形式となっているので自分で以下のように関数をUDFを定義することが必要になります．\nCREATE TEMP FUNCTION convert_iso_dayofweek(usage_date DATE)\nRETURNS INT64\nAS (\n  MOD(EXTRACT(DAYOFWEEK FROM usage_date) + 5, 7) + 1\n);\n ▶  データ抽出クエリ\nWITH\n  daily_summary AS(\n    SELECT \n        usage_date,\n        round_to_nearest_15_minute(usage_time, 15) AS rounded_usage_time,\n        CASE\n          WHEN usage_date in (DATE('2024-02-11'), DATE('2024-02-23')) THEN 8\n          ELSE convert_iso_dayofweek(usage_date) \n        END AS dayofweek,\n        COUNT(1) AS customer_count\n    FROM \n        `regmonkey-sample-data.restaurant_kawasaki.customer_record`\n    GROUP BY\n        1, 2\n  )\nSELECT\n    dayofweek,\n    convert_extended_time(rounded_usage_time) AS rounded_usage_time,\n    AVG(customer_count) AS mean_customer_count\nFROM\n    daily_summary \nGROUP BY \n  1, 2\nORDER BY\n  1, 2;"
  }
]