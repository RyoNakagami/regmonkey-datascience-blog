---
title: "ドキュメントの書き方"
author: "Ryo Nakagami"
date: "2025-05-30"
categories: [方法論]
listing_category: development
comments:
  utterances:
       repo: RyoNakagami/regmonkey-datascience-blog
       label: discussion
       issue-term: title
---


::: {.callout-note icon="false"}
## この記事のスコープ

- ドキュメントを書くにあたっての基本ルールの紹介

:::

::: {.callout-note icon="false"}
## 想定知識

- [構造化されたストーリーとしてのスライド](https://ryonakagami.github.io/regmonkey-presentation/posts/2025-05-07-how-to-write-slide/#/title-slide)について一読している

:::



## ドキュメントに何を書くか？(What)

ドキュメントとは[「ある情報を、ある対象に伝える」ための手段]{.regmonkey-bold}です．ドキュメントを書くにあたって事前に

- [「誰に」対して]{.regmonkey-bold}
- [「何を」伝えるか]{.regmonkey-bold}

を明確化し，その目的に応じて構成や表現を設計することが重要です．

::: {#exm- .custom_problem }
**: ドキュメント種類別の読み手と目的整理表**



:::: {.no-border-top-table}

|ドキュメント種類|誰に|何を|
|---|---|---|
|企画書|経営層・チームマネジャー・開発メンバー|PJの目的・スコープ・予算・スケジュール|
|要件定義書|エンジニア|システムの機能要件・非機能要件|
|基本設計書|エンジニア|システムの動作仕様・インターフェース仕様|
|詳細設計|エンジニア|ソフトウェアの内部構造・モジュール感のインターフェース・データ構造|
|テスト仕様書|プロダクトマネジャー・エンジニア|テスト項目・テストデータ・テスト結果|
|ユーザーマニュアル|ユーザー|機能の説明・利用目的・操作方法|
|管理・保守マニュアル|システム管理者|管理や保守に関する機能の説明・利用目的・操作方法|
|リリースノート|ユーザー・システム管理者|プロダクトのアップデートに伴う変更点|

: {tbl-colwidths="[20,35,45]"}

::::

:::

### 読み手の定義

{{< reveal_vspace 0.5em >}}

[ルール]{.mini-section}

[「誰に」対して]{.regmonkey-bold}を特定する際，以下の３つを明確化することが有用です：

1. 読み手の目的・ニーズ
2. 読み手の知識レベル
3. 読み手の立場

[説明]{.mini-section}

:::{.tips-block-small}
目的が違えば、必要な情報・深さ・順序が変わる
:::

- 意思決定者 → 意思決定や承認に足る根拠がほしい → 結論とインパクト重視
- 現場担当者 → どう使うか／どう実装するかの具体的な手順を知りたい → 詳細手順や実装方法が重要

:::{.tips-block-small}
知識レベルが違えば 説明の粒度・用語の選び方・例の使い方が変わる
:::

- 初心者 → 用語の定義や背景から丁寧に
- 専門家 → 論点にフォーカスし冗長さを排除

:::{.tips-block-small}
同じ事実でも、立場によって関心ポイントが異なる
:::

- 営業 → 顧客影響やKPIに注目
- エンジニア → 技術的妥当性や仕組みが重要

[例: ユーザーマニュアルと開発者マニュアルのアウトラインの差異]{.mini-section}

:::: {.no-border-top-table}

|種類|アウトライン構成方針|例|
|---|---|---|
|ユーザーマニュアル|ユーザーが操作する順番|初期設定 → ログイン → 基本操作 → 応用操作 → トラブル対応|
|開発者マニュアル|開発者が開発する順番|環境構築 → モジュール設計 → API定義 → データ構造 → エラーハンドリング|

: {tbl-colwidths="[25,25,50]"}

::::


[アンチパターンと改善例]{.mini-section}


::: {.callout-important icon="false"}
### アンチパターン: 読み手の定義がぼやけている
- プロダクトのユーザーに，プロダクトの使い方を伝える
:::

::: {.callout-tip icon="false"}
### 改善例: 

- プロダクトを新規導入するシステム管理者に，プロダクトの導入手順を伝える
- プロダクトの利用中にエラーに遭遇したユーザーに，エラーの原因と対処方法を伝える

:::




## どのようにドキュメントを書くか？(How)

良いドキュメントを書くためには、次の３点を押さえる必要があります：

- [Effectiveness]{.regmonkey-bold}; 必要な情報を正しく伝えられる, 合目的的であること
- [Efficiency]{.regmonkey-bold}: 効率よく内容が理解できる, readability
- [Satisfaction]{.regmonkey-bold}: 読み手に対する配慮があること


:::{.tips-block}
Effectiveness
:::

{{< reveal_vspace 0.5em >}}

:::{ style="padding-left:1em"}


[説明]{.mini-section}

- 書き表された情報が読み手に一意に伝わること
- 書き表された情報がドキュメントの目的と合致していること

[アクション]{.mini-section}

:::{ style="padding-left:1em"}

- [ ] メインメッセージの構成要素が漏れなく分解されている
- [ ] 曖昧さを廃し，明確な文章で書く
- [ ] 誤解なく読める文章で書く
- [ ] できるだけ具体的に書く

:::


:::

:::{.tips-block}
Efficiency
:::

{{< reveal_vspace 0.5em >}}

:::{ style="padding-left:1em"}

[説明]{.mini-section}

- 効率よく内容が理解できること
- 読み手は流し読みする傾向があるので，流し読みでも情報が伝わるように構成立てること

[アクション]{.mini-section}

:::{ style="padding-left:1em"}
- [ ] 要点を先に伝える(**MMUF, Main Message Up-Front**)
- [ ] 話の流れを整理し，どこに何が書いてあるかわかりやすくする(=**アウトライン設計**)
  - ドキュメントを書く前に事前にアウトライン設計（どこに何を書くのか）
  - 文章ブロックに対して，書かれている内容を端的に表す見出しを付ける
  - one heading, one message
- [ ] 必要な情報だけに絞り，簡潔で読みやすい文章にする

:::

:::


:::{.tips-block}
Satisfaction
:::

{{< reveal_vspace 0.5em >}}

:::{ style="padding-left:1em"}
[説明]{.mini-section}

- 読み手が「読んでよかった」「わかりやすかった」と感じられること
- ストレスなく読める体験が提供されていること

[アクション]{.mini-section}

:::{ style="padding-left:1em"}
- [ ] 読み手の立場・前提知識・目的を想定して内容や語り口を調整する
- [ ] 図表・余白・見出しなどで視認性を高める
- [ ] 論理の正確さだけでなく、文の印象・ニュアンスにも気を配る
:::


:::

### わかりやすい文の書き方

:::: {.callout-warning}
### 文を書き始めるのはアウトライン設計後

- 文章はすぐに書き始めるのではなく，まず「構造」＝アウトラインを先に設計する

:::

わかりやすい文を書くにあたって，次の4点を抑える必要があります

- [係り受けを明確にする]{.regmonkey-bold}
- [並列関係を明確にする]{.regmonkey-bold}
- [順序関係を明確にする]{.regmonkey-bold}
- [「の」は一つの文に２つまでに留める]{.regmonkey-bold}

:::{.tips-block}
係り受けを明確にする
:::

:::{ style="padding-left:1em"}

[説明]{.mini-section}

- 誤解を招く文の原因の一つが，係り受けの曖昧さ
- 係り受けはできる限り近い位置に配置するべき


[例]{.mini-section}

- ❌ 簡単なチャットアプリの作り方
- 👍 チャットアプリの簡単な作り方


:::

:::{.tips-block}
並列関係を明確にする
:::

:::{ style="padding-left:1em" }

[説明]{.mini-section}

- 並列する要素（AとB、～や～など）は、文法的・意味的に対等な構造で書く必要がある
- 並列構造が乱れると、何が並列なのか、読み手が混乱する

[例]{.mini-section}

- ❌ このツールは、設定の保存、読み込み、そしてファイルの圧縮ができます
- 👍 このツールは、設定の保存・読み込み、ファイルの圧縮ができます
:::

:::{.tips-block}
順序関係を明確にする
:::

:::{ style="padding-left:1em" }

[説明]{.mini-section}

- 複数の出来事や手順がある場合は、どの順で発生・実行されるかを明確にすることが重要
- 順序が不明瞭だと、因果関係や手順が誤解されやすくなる

[例]{.mini-section}

- ❌ 入力が完了したら、ファイルを保存し、名前を入力してください
- 👍 入力が完了したら、名前を入力し、その後でファイルを保存してください
:::


:::{.tips-block}
「の」は一つの文に２つまでに留める
:::

:::{ style="padding-left:1em" }

[説明]{.mini-section}

- 「の」を多用すると、文の構造が複雑になり、意味があいまいになる
- そのため、一文に「の」は2つまでに抑えるのが、読みやすさの目安。

[例]{.mini-section}

- ❌ データ処理の高速化のためのアルゴリズムの最適化手法の調査
- 👍 データ処理を高速化するための、アルゴリズム最適化手法の調査
- 👍 アルゴリズム最適化手法について、データ処理を高速化する観点から調査した


:::


## アンチパターンと発生原因

::: {.callout-important icon="false"}
### Problem 1: なにを書いていいかわからない
:::

:::{style="padding-left:1em;"}

- [ ] ドキュメントの目的がわかっていない
- [ ] ドキュメントの目的から導き出されるテーマについて，その構成要素を分解できていない


:::


::: {.callout-important icon="false"}
### Problem 2: あれもこれもと，情報詰め込んでしまう
:::

:::{style="padding-left:1em;"}

- [ ] 読み手とテーマが明確に定義されていない

:::

::: {.callout-important icon="false"}
### Problem 3: 自分で説明するとき，何故か説明しづらい
:::

:::{style="padding-left:1em;"}

- [ ] ドキュメントの目的に対して，テーマが十分分解されていない
- [ ] 分解されたテーマの配置が不自然な流れになっている
  - headingsとkey takeawaysだけ読んでみたとき，目が止まってしまう or 順番が飛んでしまう

:::

::: {.callout-important icon="false"}
### Problem 4: 何が言いたいかわからないheadingsがある
:::

:::{style="padding-left:1em;"}

- [ ] key takeawaysが定義されていない
- [ ] MMUFの構成になっていない

:::

::: {.callout-important icon="false"}
### Problem 5: 作成したユーザーマニュアルが読みづらいと言われた
:::

:::{style="padding-left:1em;"}

- [ ] 各見出しにおける想定ユーザーが明確に定義されていない
- [ ] 想定ユーザーについて，書き手が仮定した読み手知識レベルが対応していない
- [ ] 読み手を主語にした文となっていない
  - ユーザーマニュアルは読者の立場に立った指示やガイドを提供するべき

:::




## Appendix: パラグラフと段落の違い

「パラグラフ」と「段落」は、日常的には同じ意味で使われることも多いですが、ドキュメント作成の文脈では以下のような差異が有ります:

:::: {.no-border-top-table}

|用語    | 視点  | 意味                |
|-----|---|------------------|
|段落    | 見た目 | 改行による文章の区切り<br>何を１段落にまとめるかの自由度が高い       |
|パラグラフ | 意味  | 1つの主張を持った論理的な文の集まり<br>1 paragraph 1 topic|

: {tbl-colwidths="[20,20,60]"}

::::

[Pragraphの構成]{.mini-section}

1つのパラグラフは、原則として以下のような構造で成り立っています：

:::: {.no-border-top-table}

|構成要素|説明|
|---|---|
|topic sentence | パラグラフの最初に置かれ、その段落で述べたい中心的な主張やポイントを示す|
|support sentence| 「なぜそう言えるのか？」「どんな意味があるのか？」を展開する|

: {tbl-colwidths="[25,75]"}

::::

References
----------
- [構造化されたストーリーとしてのスライド](https://ryonakagami.github.io/regmonkey-presentation/posts/2025-05-07-how-to-write-slide/#/title-slide)