---
title: "VDIとは？"
author: "Ryo Nakagami"
date: "2025-09-17"
date-modified: "2025-09-17"
categories: [環境構築]
listing_category: development
comments:
  utterances:
       repo: RyoNakagami/regmonkey-datascience-blog
       label: discussion
       issue-term: title
---

## VDIとは？

::: {#def- .custom_problem .blog-custom-border}
[VDI(Virtual Desktop Infrastructure)]{.def-title}

- 仮想環境技術を用いて，デスクトップ環境をサーバー上で構築・集中管理し，ユーザーがリモートからアクセスできるようにする仕組み．
- サーバー上でユーザーごとに仮想デスクトップ（VM）を提供されるので，OSやアプリも個別に分離されている

:::

::: {#fig-plot .center fig-cap="VDI環境"}

```{mermaid}
graph TB
    %% VDI型環境
    subgraph VDI[VDI環境]
    direction LR
      %% サーバー側
      subgraph Server[サーバー]
          direction LR
          HW[ハードウェア]
          HV[ハイパーバイザ]
          VM1[VM 1: OS + アプリ]
          VM2[VM 2: OS + アプリ]
          VM3[VM 3: OS + アプリ]
          
          HW --> HV
          HV --> VM1
          HV --> VM2
          HV --> VM3
      end

      %% クライアント側
      Client1[端末 1]
      Client2[端末 2]
      Client3[端末 3]
      
      VM1 -->|画面転送| Client1
      VM2 -->|画面転送| Client2
      VM3 -->|画面転送| Client3
    end
```

:::

### デスクトップ仮想化の種類

:::: {.no-border-top-table}

| 種類                                         | 概要                            | 特徴                       | 利点                      | 注意点                      |
| ------------------------------------------ | ----------------------------- | ------------------------ | ----------------------- | ------------------------ |
| **サーバーベース型**                  | 複数ユーザーが1台のサーバーOS環境を共有         | OSは1種類，セッションを共有          | 導入コスト低，サーバー資源効率的        | 個別カスタマイズ不可，安定性やセキュリティの制約 |
| **VDI**    | サーバー上でユーザーごとに独立した仮想マシンを提供     | 個別OS環境，画面転送型             | 個別カスタマイズ可能，柔軟でセキュア      | サーバー・ストレージ負荷高，導入コスト高     |
| **ブレードPC型**                                 | サーバーラック内に物理PCを設置し，ネットワーク経由で利用 | フル物理PC環境をリモート利用          | 高性能アプリ向き，互換性問題少         | ハードウェアコスト高，管理・保守が物理的に大変  |
| **パーソナルクラウド型<br>（DaaS: Desktop as a Service）** | クラウド上で提供される仮想デスクトップ           | ユーザーごとに独立OS，クラウド管理       | 初期投資少，スケーラブル，場所を選ばず利用可能 | ネットワーク依存，継続コストがかかる       |
| **アプリケーション仮想化**                            | OSは端末に残し，アプリだけ仮想化して配信         | アプリ単位で配信・管理              | OSに依存せずアプリ更新容易          | OSやアプリ間互換性に注意            |

::::

::: {#fig-plot .center fig-cap="ブレードPC環境"}

```{mermaid}
graph TB
    %% ブレードPC型環境
    subgraph Blade[ブレードPC環境]
    direction LR
      %% サーバー側（物理PC）
      subgraph BladeServer[ブレードPCラック]
          direction LR
          PC1[PC 1]
          PC2[PC 2]
          PC3[PC 3]
      end

      %% クライアント側
      Client1[端末 1]
      Client2[端末 2]
      Client3[端末 3]
      
      PC1 -->|画面転送| Client1
      PC2 -->|画面転送| Client2
      PC3 -->|画面転送| Client3
    end
```

:::

::: {#fig-plot .center fig-cap="サーバーベース型環境"}

```{mermaid}
graph TB
    %% サーバーベース型環境
    subgraph RDS[サーバーベース型環境]
    direction LR
      %% サーバー側
      subgraph Server[サーバー]
          direction LR
          HW[ハードウェア]
          OS[OS]
          App[アプリ]
      end

      %% クライアント側
      Client1[端末 1]
      Client2[端末 2]
      Client3[端末 3]
      
      Server -->|画面転送（セッション共有）| Client1
      Server -->|画面転送（セッション共有）| Client2
      Server -->|画面転送（セッション共有）| Client3
    end
```

:::

::: {#fig-daas .center fig-cap="パーソナルクラウド型（DaaS）環境"}
```{mermaid}
graph TB
    %% パーソナルクラウド型環境
    subgraph DaaS[パーソナルクラウド型環境]
    direction LR
      %% クラウド側サーバー
      subgraph Cloud[クラウドサーバー]
          direction LR
          HW[ハードウェア]
          HV[ハイパーバイザ]
          VM1[VM 1: OS + アプリ]
          VM2[VM 2: OS + アプリ]
      end

      %% クライアント側
      Client1[端末 1]
      Client2[端末 2]

      VM1 -->|画面転送 + データ保護| Client1
      VM2 -->|画面転送 + データ保護| Client2
    end
```

:::


::: {#fig-appvirt .center fig-cap="アプリケーション仮想化環境"}
```{mermaid}
graph TB
    %% アプリケーション仮想化
    subgraph AppVirt[アプリケーション仮想化]
    direction LR
      %% サーバー側
      subgraph Server[サーバー]
          direction LR
          HW[ハードウェア]
          AppServer[アプリケーションサーバー]
      end

      %% クライアント側
      Client1[端末 1]
      Client2[端末 2]

      AppServer -->|アプリ配信 + データ保護| Client1
      AppServer -->|アプリ配信 + データ保護| Client2
    end
```

:::


### VDIの特徴

::: {.callout-note icon="false"}
### (1) 集中管理

- OSやアプリケーションをサーバー上で集中管理するため，ソフトウェアの更新やパッチ適用を一元的に行える
- アクセス権限や暗号化を一元管理できる

:::

::: {.callout-note icon="false"}
### (2) 画面転送型アーキテクチャ

- 実際の処理はサーバー上で行われ，端末には画面情報だけが転送される
- クライアント側の性能に大きく依存せず，高速な端末が不要
- 端末が変わっても同じ仮想デスクトップ環境が使える

:::

::: {.callout-note icon="false"}
### (3) セキュリティの強化

- データはサーバーに集中保存され，端末側には残らないため情報漏洩リスクが低い
- 端末の紛失・盗難による情報漏洩の防止が期待できる

:::

References
----------
- [【5分で学べる】VDIとは？VDI導入による効果 | 情報処理安全確保支援士（登録セキスペ）](https://www.youtube.com/watch?v=Jw2w6aYRKqo)
